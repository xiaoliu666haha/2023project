Git show output for commit da3a0ddfe2de5be718a2d7cb3021f350bf04c402:
commit da3a0ddfe2de5be718a2d7cb3021f350bf04c402
Author: David Lord <davidism@gmail.com>
Date:   Thu Jan 18 11:53:19 2024 -0800

    fix slsa generator version

diff --git a/.github/workflows/publish.yaml b/.github/workflows/publish.yaml
index f67eecfb..8769bef9 100644
--- a/.github/workflows/publish.yaml
+++ b/.github/workflows/publish.yaml
@@ -33,7 +33,8 @@ jobs:
       actions: read
       id-token: write
       contents: write
-    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@07e64b653f10a80b6510f4568f685f8b7b9ea830
+    # Can't pin with hash due to how this workflow works.
+    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
     with:
       base64-subjects: ${{ needs.build.outputs.hash }}
   create-release:

--------------------------------------------------------------------------------
Git show output for commit 8fdab74cc80c39f45aa65da5dd029c8d262756c3:
commit 8fdab74cc80c39f45aa65da5dd029c8d262756c3
Author: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>
Date:   Mon Jan 1 20:24:30 2024 +0000

    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci

diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index b4ca16bf..ba1f1089 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -49,7 +49,7 @@ def get_load_dotenv(default: bool = True) -> bool:
 
 
 def stream_with_context(
-    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]]
+    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]],
 ) -> t.Iterator[t.AnyStr]:
     """Request contexts disappear when the response is started on the server.
     This is done for efficiency reasons and to make it less likely to encounter

--------------------------------------------------------------------------------
Git show output for commit 05eebe36abe923d065133792f14d4ab6c07336a0:
commit 05eebe36abe923d065133792f14d4ab6c07336a0
Merge: b97165db 1d5abfad
Author: David Lord <davidism@gmail.com>
Date:   Wed Dec 13 15:06:37 2023 -0800

    fix missing quote in `--key` error message (#5344)


--------------------------------------------------------------------------------
Git show output for commit b97165db75c6f4e99c3307b4a5a1f3b0d9f4de25:
commit b97165db75c6f4e99c3307b4a5a1f3b0d9f4de25
Merge: 66743d4f 4104f299
Author: David Lord <davidism@gmail.com>
Date:   Wed Nov 15 12:55:43 2023 -0800

    type hint fix for flask.send_file (#5336)


--------------------------------------------------------------------------------
Git show output for commit 4104f29956b16f3e351462651ec3c6cc5a0dd069:
commit 4104f29956b16f3e351462651ec3c6cc5a0dd069
Author: Daniel Isaac <danielbcbs2@gmail.com>
Date:   Mon Nov 13 16:58:47 2023 +0530

    type hint fix for flask.send_file

diff --git a/CHANGES.rst b/CHANGES.rst
index 5c42cc76..c7ae2f65 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -3,6 +3,8 @@ Version 3.0.1
 
 Unreleased
 
+-   Correct type for ``path`` argument to ``send_file``. :issue:`5230`
+
 
 Version 3.0.0
 -------------
diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index 8601c2fd..84608912 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -387,7 +387,7 @@ def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:
 
 
 def send_file(
-    path_or_file: os.PathLike | str | t.BinaryIO,
+    path_or_file: os.PathLike[t.AnyStr] | str | t.BinaryIO,
     mimetype: str | None = None,
     as_attachment: bool = False,
     download_name: str | None = None,

--------------------------------------------------------------------------------
Git show output for commit beedaa4eff3919f250fad49a5092cf07c4d638e1:
commit beedaa4eff3919f250fad49a5092cf07c4d638e1
Merge: 541bc8df bb993759
Author: David Lord <davidism@gmail.com>
Date:   Fri Oct 20 09:50:00 2023 -0700

    docs/testing.rst: fix follow_redirects sample code (#5303)


--------------------------------------------------------------------------------
Git show output for commit bb9937593de3917d17c2da1fc55489f10bb3c8b2:
commit bb9937593de3917d17c2da1fc55489f10bb3c8b2
Author: Arnout Engelen <arnout@bzzt.net>
Date:   Fri Oct 20 17:17:24 2023 +0200

    docs/testing.rst: fix follow_redirects sample code

diff --git a/docs/testing.rst b/docs/testing.rst
index 8545bd39..b1d52f9a 100644
--- a/docs/testing.rst
+++ b/docs/testing.rst
@@ -192,7 +192,7 @@ which records the request that produced that response.
 .. code-block:: python
 
     def test_logout_redirect(client):
-        response = client.get("/logout")
+        response = client.get("/logout", follow_redirects=True)
         # Check that there was one redirect response.
         assert len(response.history) == 1
         # Check that the second request was to the index page.

--------------------------------------------------------------------------------
Git show output for commit 826514b8eb18f6c314cf566630253d35c89e42c3:
commit 826514b8eb18f6c314cf566630253d35c89e42c3
Author: David Lord <davidism@gmail.com>
Date:   Wed Aug 16 13:37:56 2023 -0700

    fix flake8 bugbear findings

diff --git a/tests/test_basic.py b/tests/test_basic.py
index ca373dca..d8bca980 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -431,9 +431,9 @@ def test_session_special_types(app, client):
         client.get("/")
         s = flask.session
         assert s["t"] == (1, 2, 3)
-        assert type(s["b"]) == bytes
+        assert type(s["b"]) is bytes
         assert s["b"] == b"\xff"
-        assert type(s["m"]) == Markup
+        assert type(s["m"]) is Markup
         assert s["m"] == Markup("<html>")
         assert s["u"] == the_uuid
         assert s["d"] == now
@@ -760,7 +760,7 @@ def test_teardown_request_handler_error(app, client):
 
     @app.teardown_request
     def teardown_request1(exc):
-        assert type(exc) == ZeroDivisionError
+        assert type(exc) is ZeroDivisionError
         called.append(True)
         # This raises a new error and blows away sys.exc_info(), so we can
         # test that all teardown_requests get passed the same original
@@ -772,7 +772,7 @@ def test_teardown_request_handler_error(app, client):
 
     @app.teardown_request
     def teardown_request2(exc):
-        assert type(exc) == ZeroDivisionError
+        assert type(exc) is ZeroDivisionError
         called.append(True)
         # This raises a new error and blows away sys.exc_info(), so we can
         # test that all teardown_requests get passed the same original

--------------------------------------------------------------------------------
Git show output for commit c49ce2e1eb8b598e724388bead0943837bab8027:
commit c49ce2e1eb8b598e724388bead0943837bab8027
Author: David Lord <davidism@gmail.com>
Date:   Wed Aug 16 13:37:26 2023 -0700

    fix flake8 bugbear findings

diff --git a/tests/test_basic.py b/tests/test_basic.py
index ca373dca..d8bca980 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -431,9 +431,9 @@ def test_session_special_types(app, client):
         client.get("/")
         s = flask.session
         assert s["t"] == (1, 2, 3)
-        assert type(s["b"]) == bytes
+        assert type(s["b"]) is bytes
         assert s["b"] == b"\xff"
-        assert type(s["m"]) == Markup
+        assert type(s["m"]) is Markup
         assert s["m"] == Markup("<html>")
         assert s["u"] == the_uuid
         assert s["d"] == now
@@ -760,7 +760,7 @@ def test_teardown_request_handler_error(app, client):
 
     @app.teardown_request
     def teardown_request1(exc):
-        assert type(exc) == ZeroDivisionError
+        assert type(exc) is ZeroDivisionError
         called.append(True)
         # This raises a new error and blows away sys.exc_info(), so we can
         # test that all teardown_requests get passed the same original
@@ -772,7 +772,7 @@ def test_teardown_request_handler_error(app, client):
 
     @app.teardown_request
     def teardown_request2(exc):
-        assert type(exc) == ZeroDivisionError
+        assert type(exc) is ZeroDivisionError
         called.append(True)
         # This raises a new error and blows away sys.exc_info(), so we can
         # test that all teardown_requests get passed the same original

--------------------------------------------------------------------------------
Git show output for commit 09789f2a34633be446f7fa04955e55a373b36302:
commit 09789f2a34633be446f7fa04955e55a373b36302
Merge: f39c7160 aea13d5a
Author: David Lord <davidism@gmail.com>
Date:   Thu Jun 29 17:28:25 2023 -0700

    fix typo in errorhandling doc (#5180)


--------------------------------------------------------------------------------
Git show output for commit aea13d5a100b03758fecb88a34daeab4f8aa8426:
commit aea13d5a100b03758fecb88a34daeab4f8aa8426
Author: ToolMoney <119289623+ToolMoney@users.noreply.github.com>
Date:   Thu Jun 29 17:20:35 2023 -0700

    fix typo in errorhandling doc

diff --git a/docs/errorhandling.rst b/docs/errorhandling.rst
index c281055f..faca58c2 100644
--- a/docs/errorhandling.rst
+++ b/docs/errorhandling.rst
@@ -231,7 +231,7 @@ responses, you could also pass them through directly.
 Error handlers still respect the exception class hierarchy. If you
 register handlers for both ``HTTPException`` and ``Exception``, the
 ``Exception`` handler will not handle ``HTTPException`` subclasses
-because it the ``HTTPException`` handler is more specific.
+because the ``HTTPException`` handler is more specific.
 
 
 Unhandled Exceptions

--------------------------------------------------------------------------------
Git show output for commit 4be9f521425b7ad659b182c319dc3afb8fe64f53:
commit 4be9f521425b7ad659b182c319dc3afb8fe64f53
Merge: c8cf4694 bda295d3
Author: David Lord <davidism@gmail.com>
Date:   Fri Jun 9 09:38:59 2023 -0700

    fix use of `importlib.util.find_spec` (#5161)


--------------------------------------------------------------------------------
Git show output for commit bda295d37fa3809c95a93d01dd605d0222109889:
commit bda295d37fa3809c95a93d01dd605d0222109889
Author: David Lord <davidism@gmail.com>
Date:   Fri Jun 9 09:34:42 2023 -0700

    fix use of importlib.util.find_spec

diff --git a/CHANGES.rst b/CHANGES.rst
index b36e1b60..4535e8cc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,6 +5,7 @@ Unreleased
 
 -   Python 3.12 compatibility.
 -   Update Werkzeug requirement to >=2.3.5.
+-   Refactor how an app's root and instance paths are determined. :issue:`5160`
 
 
 Version 2.3.2
diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index 4e8bc8b8..284c3696 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -575,13 +575,20 @@ def get_root_path(import_name: str) -> str:
         return os.path.dirname(os.path.abspath(mod.__file__))
 
     # Next attempt: check the loader.
-    spec = importlib.util.find_spec(import_name)
-    loader = spec.loader if spec is not None else None
+    try:
+        spec = importlib.util.find_spec(import_name)
+
+        if spec is None:
+            raise ValueError
+    except (ImportError, ValueError):
+        loader = None
+    else:
+        loader = spec.loader
 
     # Loader does not exist or we're referring to an unloaded main
     # module or a main module without path (interactive sessions), go
     # with the current working directory.
-    if loader is None or import_name == "__main__":
+    if loader is None:
         return os.getcwd()
 
     if hasattr(loader, "get_filename"):
diff --git a/src/flask/scaffold.py b/src/flask/scaffold.py
index 3c23ef97..d15b8733 100644
--- a/src/flask/scaffold.py
+++ b/src/flask/scaffold.py
@@ -779,31 +779,6 @@ def _endpoint_from_view_func(view_func: t.Callable) -> str:
     return view_func.__name__
 
 
-def _matching_loader_thinks_module_is_package(loader, mod_name):
-    """Attempt to figure out if the given name is a package or a module.
-
-    :param: loader: The loader that handled the name.
-    :param mod_name: The name of the package or module.
-    """
-    # Use loader.is_package if it's available.
-    if hasattr(loader, "is_package"):
-        return loader.is_package(mod_name)
-
-    cls = type(loader)
-
-    # NamespaceLoader doesn't implement is_package, but all names it
-    # loads must be packages.
-    if cls.__module__ == "_frozen_importlib" and cls.__name__ == "NamespaceLoader":
-        return True
-
-    # Otherwise we need to fail with an error that explains what went
-    # wrong.
-    raise AttributeError(
-        f"'{cls.__name__}.is_package()' must be implemented for PEP 302"
-        f" import hooks."
-    )
-
-
 def _path_is_relative_to(path: pathlib.PurePath, base: str) -> bool:
     # Path.is_relative_to doesn't exist until Python 3.9
     try:
@@ -822,64 +797,39 @@ def _find_package_path(import_name):
 
         if root_spec is None:
             raise ValueError("not found")
-    # ImportError: the machinery told us it does not exist
-    # ValueError:
-    #    - the module name was invalid
-    #    - the module name is __main__
-    #    - *we* raised `ValueError` due to `root_spec` being `None`
     except (ImportError, ValueError):
-        pass  # handled below
-    else:
-        # namespace package
-        if root_spec.origin in {"namespace", None}:
-            package_spec = importlib.util.find_spec(import_name)
-            if package_spec is not None and package_spec.submodule_search_locations:
-                # Pick the path in the namespace that contains the submodule.
-                package_path = pathlib.Path(
-                    os.path.commonpath(package_spec.submodule_search_locations)
-                )
-                search_locations = (
-                    location
-                    for location in root_spec.submodule_search_locations
-                    if _path_is_relative_to(package_path, location)
-                )
-            else:
-                # Pick the first path.
-                search_locations = iter(root_spec.submodule_search_locations)
-            return os.path.dirname(next(search_locations))
-        # a package (with __init__.py)
-        elif root_spec.submodule_search_locations:
-            return os.path.dirname(os.path.dirname(root_spec.origin))
-        # just a normal module
-        else:
-            return os.path.dirname(root_spec.origin)
-
-    # we were unable to find the `package_path` using PEP 451 loaders
-    spec = importlib.util.find_spec(root_mod_name)
-    loader = spec.loader if spec is not None else None
-
-    if loader is None or root_mod_name == "__main__":
-        # import name is not found, or interactive/main module
+        # ImportError: the machinery told us it does not exist
+        # ValueError:
+        #    - the module name was invalid
+        #    - the module name is __main__
+        #    - we raised `ValueError` due to `root_spec` being `None`
         return os.getcwd()
 
-    if hasattr(loader, "get_filename"):
-        filename = loader.get_filename(root_mod_name)
-    elif hasattr(loader, "archive"):
-        # zipimporter's loader.archive points to the .zip file.
-        filename = loader.archive
-    else:
-        # At least one loader is missing both get_filename and archive:
-        # Google App Engine's HardenedModulesHook, use __file__.
-        filename = importlib.import_module(root_mod_name).__file__
-
-    package_path = os.path.abspath(os.path.dirname(filename))
+    if root_spec.origin in {"namespace", None}:
+        # namespace package
+        package_spec = importlib.util.find_spec(import_name)
 
-    # If the imported name is a package, filename is currently pointing
-    # to the root of the package, need to get the current directory.
-    if _matching_loader_thinks_module_is_package(loader, root_mod_name):
-        package_path = os.path.dirname(package_path)
+        if package_spec is not None and package_spec.submodule_search_locations:
+            # Pick the path in the namespace that contains the submodule.
+            package_path = pathlib.Path(
+                os.path.commonpath(package_spec.submodule_search_locations)
+            )
+            search_location = next(
+                location
+                for location in root_spec.submodule_search_locations
+                if _path_is_relative_to(package_path, location)
+            )
+        else:
+            # Pick the first path.
+            search_location = root_spec.submodule_search_locations[0]
 
-    return package_path
+        return os.path.dirname(search_location)
+    elif root_spec.submodule_search_locations:
+        # package with __init__.py
+        return os.path.dirname(os.path.dirname(root_spec.origin))
+    else:
+        # module
+        return os.path.dirname(root_spec.origin)
 
 
 def find_package(import_name: str):

--------------------------------------------------------------------------------
Git show output for commit 55332be325a9f1a5882a309951f1f7db510036dd:
commit 55332be325a9f1a5882a309951f1f7db510036dd
Author: Pedro Guilherme S. Moreira <pg1992@users.noreply.github.com>
Date:   Thu May 18 09:33:44 2023 -0300

    docs: fix wrong JS syntax (#5136)

diff --git a/docs/patterns/javascript.rst b/docs/patterns/javascript.rst
index 4b1d7e0f..c9c4b0c8 100644
--- a/docs/patterns/javascript.rst
+++ b/docs/patterns/javascript.rst
@@ -125,8 +125,8 @@ in a Flask view.
 .. code-block:: javascript
 
     let data = new FormData()
-    data.append("name": "Flask Room")
-    data.append("description": "Talk about Flask here.")
+    data.append("name", "Flask Room")
+    data.append("description", "Talk about Flask here.")
     fetch(room_url, {
         "method": "POST",
         "body": data,

--------------------------------------------------------------------------------
Git show output for commit 0afeb1d11cad9aa42ef25cc20b10dcd67c8cf3c9:
commit 0afeb1d11cad9aa42ef25cc20b10dcd67c8cf3c9
Author: David Lord <davidism@gmail.com>
Date:   Mon May 1 09:01:40 2023 -0700

    fix release date

diff --git a/CHANGES.rst b/CHANGES.rst
index 1ba0f341..f0325579 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,7 +1,7 @@
 Version 2.3.2
 -------------
 
-Released 2022-05-01
+Released 2023-05-01
 
 -   Set ``Vary: Cookie`` header when the session is accessed, modified, or refreshed.
 -   Update Werkzeug requirement to >=2.3.3 to apply recent bug fixes.

--------------------------------------------------------------------------------
Git show output for commit 9532cba45d2339e90ebf04f178b1e4f2064e7328:
commit 9532cba45d2339e90ebf04f178b1e4f2064e7328
Author: David Lord <davidism@gmail.com>
Date:   Mon May 1 08:10:25 2023 -0700

    fix mypy finding

diff --git a/src/flask/app.py b/src/flask/app.py
index bd90a24b..3b6b38d8 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -1852,7 +1852,7 @@ class Flask(Scaffold):
 
         # extend existing headers with provided headers
         if headers:
-            rv.headers.update(headers)
+            rv.headers.update(headers)  # type: ignore[arg-type]
 
         return rv
 

--------------------------------------------------------------------------------
Git show output for commit 0ec9192cf25f5187d6521f2539489fa8d55336bb:
commit 0ec9192cf25f5187d6521f2539489fa8d55336bb
Author: Lucas Werkmeister <mail@lucaswerkmeister.de>
Date:   Tue Apr 25 21:10:05 2023 +0200

    fix importing Markup from flask

diff --git a/CHANGES.rst b/CHANGES.rst
index 5e458e6f..7d9188be 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -3,6 +3,8 @@ Version 2.3.1
 
 Unreleased
 
+-   Restore deprecated ``from flask import Markup``. :issue:`5084`
+
 
 Version 2.3.0
 -------------
diff --git a/src/flask/__init__.py b/src/flask/__init__.py
index 77ac68fb..9973dd48 100644
--- a/src/flask/__init__.py
+++ b/src/flask/__init__.py
@@ -76,7 +76,7 @@ def __getattr__(name):
         )
         return escape
 
-    if name == "escape":
+    if name == "Markup":
         import warnings
         from markupsafe import Markup
 

--------------------------------------------------------------------------------
Git show output for commit 9a4d370ea221b13d7fff5e2120007986c08f85fb:
commit 9a4d370ea221b13d7fff5e2120007986c08f85fb
Author: David Lord <davidism@gmail.com>
Date:   Sat Apr 15 07:39:35 2023 -0700

    fix typo

diff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst
index 5c122345..24daa729 100644
--- a/CONTRIBUTING.rst
+++ b/CONTRIBUTING.rst
@@ -121,7 +121,7 @@ First time setup in your local environment
       .. code-block:: text
 
          > py -3 -m venv .venv
-         > env\Scripts\activate
+         > .venv\Scripts\activate
 
 -   Install the development dependencies, then install Flask in editable mode.
 

--------------------------------------------------------------------------------
Git show output for commit c67bfe551d016b15d0a2df89c985d8030387bf1e:
commit c67bfe551d016b15d0a2df89c985d8030387bf1e
Author: lettow-humain <lettow@humain-labs.com>
Date:   Fri Mar 17 11:58:49 2023 +0100

    fix parentheses

diff --git a/docs/deploying/eventlet.rst b/docs/deploying/eventlet.rst
index 243be5eb..ec3d1e8f 100644
--- a/docs/deploying/eventlet.rst
+++ b/docs/deploying/eventlet.rst
@@ -54,7 +54,7 @@ its ``wsgi.server``, as well as your app or app factory.
     from hello import create_app
 
     app = create_app()
-    wsgi.server(eventlet.listen(("127.0.0.1", 8000), app)
+    wsgi.server(eventlet.listen(("127.0.0.1", 8000)), app)
 
 .. code-block:: text
 

--------------------------------------------------------------------------------
Git show output for commit 24df8fc89d5659d041b91b30a2ada9de49ec2264:
commit 24df8fc89d5659d041b91b30a2ada9de49ec2264
Author: David Lord <davidism@gmail.com>
Date:   Wed Feb 15 14:24:56 2023 -0800

    show 'run --debug' in docs
    
    Reverts commit 4d69165ab6e17fa754139d348cdfd9edacbcb999. Now that a
    release has this option, it's ok to show it in the docs. It had been
    reverted because the 2.2.x docs showed it before 2.2.3 was released.

diff --git a/docs/cli.rst b/docs/cli.rst
index 22484f17..be5a0b70 100644
--- a/docs/cli.rst
+++ b/docs/cli.rst
@@ -95,7 +95,7 @@ the ``--debug`` option.
 
 .. code-block:: console
 
-     $ flask --app hello --debug run
+     $ flask --app hello run --debug
       * Serving Flask app "hello"
       * Debug mode: on
       * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
@@ -103,6 +103,14 @@ the ``--debug`` option.
       * Debugger is active!
       * Debugger PIN: 223-456-919
 
+The ``--debug`` option can also be passed to the top level ``flask`` command to enable
+debug mode for any command. The following two ``run`` calls are equivalent.
+
+.. code-block:: console
+
+    $ flask --app hello --debug run
+    $ flask --app hello run --debug
+
 
 Watch and Ignore Files with the Reloader
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -550,7 +558,7 @@ a name such as "flask run".
 Click the *Script path* dropdown and change it to *Module name*, then input ``flask``.
 
 The *Parameters* field is set to the CLI command to execute along with any arguments.
-This example uses ``--app hello --debug run``, which will run the development server in
+This example uses ``--app hello run --debug``, which will run the development server in
 debug mode. ``--app hello`` should be the import or file with your Flask app.
 
 If you installed your project as a package in your virtualenv, you may uncheck the
diff --git a/docs/config.rst b/docs/config.rst
index 7cffc44b..9db2045f 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -47,17 +47,17 @@ Debug Mode
 
 The :data:`DEBUG` config value is special because it may behave inconsistently if
 changed after the app has begun setting up. In order to set debug mode reliably, use the
-``--debug`` option on the ``flask`` command. ``flask run`` will use the interactive
-debugger and reloader by default in debug mode.
+``--debug`` option on the ``flask`` or ``flask run`` command. ``flask run`` will use the
+interactive debugger and reloader by default in debug mode.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 Using the option is recommended. While it is possible to set :data:`DEBUG` in your
-config or code, this is strongly discouraged. It can't be read early by the ``flask run``
-command, and some systems or extensions may have already configured themselves based on
-a previous value.
+config or code, this is strongly discouraged. It can't be read early by the
+``flask run`` command, and some systems or extensions may have already configured
+themselves based on a previous value.
 
 
 Builtin Configuration Values
diff --git a/docs/debugging.rst b/docs/debugging.rst
index fb3604b0..18f42867 100644
--- a/docs/debugging.rst
+++ b/docs/debugging.rst
@@ -43,7 +43,7 @@ The debugger is enabled by default when the development server is run in debug m
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 When running from Python code, passing ``debug=True`` enables debug mode, which is
 mostly equivalent.
@@ -72,7 +72,7 @@ which can interfere.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run --no-debugger --no-reload
+    $ flask --app hello run --debug --no-debugger --no-reload
 
 When running from Python:
 
diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index 02dbc978..ad9e3bc4 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -108,7 +108,7 @@ To enable debug mode, use the ``--debug`` option.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
      * Serving Flask app 'hello'
      * Debug mode: on
      * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
diff --git a/docs/server.rst b/docs/server.rst
index a34dfab5..d38aa120 100644
--- a/docs/server.rst
+++ b/docs/server.rst
@@ -24,7 +24,7 @@ debug mode.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 This enables debug mode, including the interactive debugger and reloader, and then
 starts the server on http://localhost:5000/. Use ``flask run --help`` to see the
diff --git a/docs/tutorial/factory.rst b/docs/tutorial/factory.rst
index c8e2c5f4..39febd13 100644
--- a/docs/tutorial/factory.rst
+++ b/docs/tutorial/factory.rst
@@ -137,7 +137,7 @@ follow the tutorial.
 
 .. code-block:: text
 
-    $ flask --app flaskr --debug run
+    $ flask --app flaskr run --debug
 
 You'll see output similar to this:
 
diff --git a/examples/celery/README.md b/examples/celery/README.md
index 91782019..038eb51e 100644
--- a/examples/celery/README.md
+++ b/examples/celery/README.md
@@ -19,7 +19,7 @@ In a separate terminal, activate the virtualenv and run the Flask development se
 
 ```shell
 $ . ./.venv/bin/activate
-$ flask -A task_app --debug run
+$ flask -A task_app run --debug
 ```
 
 Go to http://localhost:5000/ and use the forms to submit tasks. You can see the polling
diff --git a/examples/tutorial/README.rst b/examples/tutorial/README.rst
index a7e12ca2..1c745078 100644
--- a/examples/tutorial/README.rst
+++ b/examples/tutorial/README.rst
@@ -48,7 +48,7 @@ Run
 .. code-block:: text
 
     $ flask --app flaskr init-db
-    $ flask --app flaskr --debug run
+    $ flask --app flaskr run --debug
 
 Open http://127.0.0.1:5000 in a browser.
 

--------------------------------------------------------------------------------
Git show output for commit f425c117e2a0309da7faa149090936733a65c57c:
commit f425c117e2a0309da7faa149090936733a65c57c
Merge: 129568f7 ba2b3094
Author: David Lord <davidism@gmail.com>
Date:   Fri Feb 10 10:53:02 2023 -0800

    Merge pull request #4972 from pallets/docs-push-reqctx
    
    fix test client arg for query string example


--------------------------------------------------------------------------------
Git show output for commit ba2b3094d1a8177059ea68853a48fcd5e90920fe:
commit ba2b3094d1a8177059ea68853a48fcd5e90920fe
Author: David Lord <davidism@gmail.com>
Date:   Fri Feb 10 10:50:48 2023 -0800

    fix test client arg for query string example

diff --git a/docs/reqcontext.rst b/docs/reqcontext.rst
index 2b109770..70ea13e3 100644
--- a/docs/reqcontext.rst
+++ b/docs/reqcontext.rst
@@ -69,11 +69,12 @@ everything that runs in the block will have access to :data:`request`,
 populated with your test data. ::
 
     def generate_report(year):
-        format = request.args.get('format')
+        format = request.args.get("format")
         ...
 
     with app.test_request_context(
-            '/make_report/2017', data={'format': 'short'}):
+        "/make_report/2017", query_string={"format": "short"}
+    ):
         generate_report()
 
 If you see that error somewhere else in your code not related to

--------------------------------------------------------------------------------
Git show output for commit 761e02ef67f9c689d899325dbafb7afdf6e495c6:
commit 761e02ef67f9c689d899325dbafb7afdf6e495c6
Merge: dd2423eb 428d9430
Author: David Lord <davidism@gmail.com>
Date:   Wed Feb 8 18:44:10 2023 -0800

    Merge pull request #4966 from ivanovmg/fix/cmd-format
    
    Fix command-line formatting


--------------------------------------------------------------------------------
Git show output for commit a15da89dbb4be39be09ed7e5b57a22acfb117e6d:
commit a15da89dbb4be39be09ed7e5b57a22acfb117e6d
Author: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>
Date:   Tue Feb 7 04:43:02 2023 +0000

    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci

diff --git a/tests/test_reqctx.py b/tests/test_reqctx.py
index abfacb98..6c38b661 100644
--- a/tests/test_reqctx.py
+++ b/tests/test_reqctx.py
@@ -227,7 +227,6 @@ def test_session_error_pops_context():
 
 
 def test_session_dynamic_cookie_name():
-
     # This session interface will use a cookie with a different name if the
     # requested url ends with the string "dynamic_cookie"
     class PathAwareSessionInterface(SecureCookieSessionInterface):

--------------------------------------------------------------------------------
Git show output for commit f45bc5995cb33cb47afcd5f2683924e84ef01516:
commit f45bc5995cb33cb47afcd5f2683924e84ef01516
Merge: 39fc0c6b 9abe2813
Author: David Lord <davidism@gmail.com>
Date:   Thu Feb 2 09:01:03 2023 -0800

    Merge pull request #4960 from owgreen/fix_appfactories_doc
    
    Fix appfactories doc


--------------------------------------------------------------------------------
Git show output for commit 9abe28130d4f0aff48b4f9931ebc15bd7617f19f:
commit 9abe28130d4f0aff48b4f9931ebc15bd7617f19f
Author: owgreen <satoshi.14ym@gmail.com>
Date:   Fri Feb 3 00:43:02 2023 +0900

    fix doc

diff --git a/docs/patterns/appfactories.rst b/docs/patterns/appfactories.rst
index 415c10fa..a76e676f 100644
--- a/docs/patterns/appfactories.rst
+++ b/docs/patterns/appfactories.rst
@@ -91,7 +91,7 @@ To run such an application, you can use the :command:`flask` command:
 
 .. code-block:: text
 
-    $ flask run --app hello run
+    $ flask --app hello run
 
 Flask will automatically detect the factory if it is named
 ``create_app`` or ``make_app`` in ``hello``. You can also pass arguments
@@ -99,7 +99,7 @@ to the factory like this:
 
 .. code-block:: text
 
-    $ flask run --app hello:create_app(local_auth=True)``
+    $ flask --app hello:create_app(local_auth=True) run``
 
 Then the ``create_app`` factory in ``myapp`` is called with the keyword
 argument ``local_auth=True``. See :doc:`/cli` for more detail.

--------------------------------------------------------------------------------
Git show output for commit 261e4a6cf287180b69c4db407791e43ce90e50ad:
commit 261e4a6cf287180b69c4db407791e43ce90e50ad
Author: David Lord <davidism@gmail.com>
Date:   Wed Jan 18 10:31:08 2023 -0800

    fix flake8 bugbear errors

diff --git a/.flake8 b/.flake8
index 09809616..a5ce8844 100644
--- a/.flake8
+++ b/.flake8
@@ -1,12 +1,12 @@
 [flake8]
-# B = bugbear
-# E = pycodestyle errors
-# F = flake8 pyflakes
-# W = pycodestyle warnings
-# B9 = bugbear opinions
-# ISC = implicit str concat
-select = B, E, F, W, B9, ISC
-ignore =
+extend-select =
+    # bugbear
+    B
+    # bugbear opinions
+    B9
+    # implicit str concat
+    ISC
+extend-ignore =
     # slice notation whitespace, invalid
     E203
     # import at top, too many circular import fixes
@@ -15,10 +15,11 @@ ignore =
     E501
     # bare except, handled by bugbear B001
     E722
-    # bin op line break, invalid
-    W503
-    # requires Python 3.10
+    # zip with strict=, requires python >= 3.10
     B905
+    # string formatting opinion, B028 renamed to B907
+    B028
+    B907
 # up to 88 allowed by bugbear B950
 max-line-length = 80
 per-file-ignores =
diff --git a/tests/test_appctx.py b/tests/test_appctx.py
index f5ca0bde..aa3a8b4e 100644
--- a/tests/test_appctx.py
+++ b/tests/test_appctx.py
@@ -120,14 +120,14 @@ def test_app_tearing_down_with_unhandled_exception(app, client):
 
     @app.route("/")
     def index():
-        raise Exception("dummy")
+        raise ValueError("dummy")
 
-    with pytest.raises(Exception, match="dummy"):
+    with pytest.raises(ValueError, match="dummy"):
         with app.app_context():
             client.get("/")
 
     assert len(cleanup_stuff) == 1
-    assert isinstance(cleanup_stuff[0], Exception)
+    assert isinstance(cleanup_stuff[0], ValueError)
     assert str(cleanup_stuff[0]) == "dummy"
 
 
diff --git a/tests/test_basic.py b/tests/test_basic.py
index d547012a..9aca6679 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -1472,11 +1472,11 @@ def test_static_route_with_host_matching():
         rv = flask.url_for("static", filename="index.html", _external=True)
         assert rv == "http://example.com/static/index.html"
     # Providing static_host without host_matching=True should error.
-    with pytest.raises(Exception):
+    with pytest.raises(AssertionError):
         flask.Flask(__name__, static_host="example.com")
     # Providing host_matching=True with static_folder
     # but without static_host should error.
-    with pytest.raises(Exception):
+    with pytest.raises(AssertionError):
         flask.Flask(__name__, host_matching=True)
     # Providing host_matching=True without static_host
     # but with static_folder=None should not error.

--------------------------------------------------------------------------------
Git show output for commit cabda5935322d75e7aedb3ee6d59fb7ab62bd674:
commit cabda5935322d75e7aedb3ee6d59fb7ab62bd674
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Wed Jan 4 16:45:20 2023 +0000

    Ensure that blueprint subdomains suffix-chain
    
    This ensures that a child's subdomain prefixs any parent subdomain
    such that the full domain is child.parent.domain.tld and onwards with
    further nesting. This makes the most sense to users and mimics how
    url_prefixes work (although subdomains suffix).

diff --git a/CHANGES.rst b/CHANGES.rst
index adf2623d..bcec74a7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -3,6 +3,8 @@ Version 2.3.0
 
 Unreleased
 
+-   Ensure subdomains are applied with nested blueprints. :issue:`4834`
+
 
 Version 2.2.3
 -------------
diff --git a/docs/blueprints.rst b/docs/blueprints.rst
index af368bac..d5cf3d82 100644
--- a/docs/blueprints.rst
+++ b/docs/blueprints.rst
@@ -140,6 +140,19 @@ name, and child URLs will be prefixed with the parent's URL prefix.
     url_for('parent.child.create')
     /parent/child/create
 
+In addition a child blueprint's will gain their parent's subdomain,
+with their subdomain as prefix if present i.e.
+
+.. code-block:: python
+
+    parent = Blueprint('parent', __name__, subdomain='parent')
+    child = Blueprint('child', __name__, subdomain='child')
+    parent.register_blueprint(child)
+    app.register_blueprint(parent)
+
+    url_for('parent.child.create', _external=True)
+    "child.parent.domain.tld"
+
 Blueprint-specific before request functions, etc. registered with the
 parent will trigger for the child. If a child does not have an error
 handler that can handle a given exception, the parent's will be tried.
diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index 1278fb8c..2403be1c 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -358,6 +358,9 @@ class Blueprint(Scaffold):
         :param options: Keyword arguments forwarded from
             :meth:`~Flask.register_blueprint`.
 
+        .. versionchanged:: 2.3
+            Nested blueprints now correctly apply subdomains.
+
         .. versionchanged:: 2.0.1
             Nested blueprints are registered with their dotted name.
             This allows different blueprints with the same name to be
@@ -458,10 +461,12 @@ class Blueprint(Scaffold):
             if bp_subdomain is None:
                 bp_subdomain = blueprint.subdomain
 
-            if state.subdomain is not None and bp_subdomain is None:
-                bp_options["subdomain"] = state.subdomain
+            if state.subdomain is not None and bp_subdomain is not None:
+                bp_options["subdomain"] = bp_subdomain + "." + state.subdomain
             elif bp_subdomain is not None:
                 bp_options["subdomain"] = bp_subdomain
+            elif state.subdomain is not None:
+                bp_options["subdomain"] = state.subdomain
 
             if bp_url_prefix is None:
                 bp_url_prefix = blueprint.url_prefix
diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py
index a83ae243..dbe00b97 100644
--- a/tests/test_blueprints.py
+++ b/tests/test_blueprints.py
@@ -971,7 +971,7 @@ def test_nesting_subdomains(app, client) -> None:
     assert response.status_code == 200
 
 
-def test_child_overrides_parent_subdomain(app, client) -> None:
+def test_child_and_parent_subdomain(app, client) -> None:
     child_subdomain = "api"
     parent_subdomain = "parent"
     parent = flask.Blueprint("parent", __name__)
@@ -988,7 +988,9 @@ def test_child_overrides_parent_subdomain(app, client) -> None:
 
     domain_name = "domain.tld"
     app.config["SERVER_NAME"] = domain_name
-    response = client.get("/", base_url=f"http://{child_subdomain}.{domain_name}")
+    response = client.get(
+        "/", base_url=f"http://{child_subdomain}.{parent_subdomain}.{domain_name}"
+    )
 
     assert response.status_code == 200
 

--------------------------------------------------------------------------------
Git show output for commit 74e5263c88e51bb442879ab863a5d03292fc0a33:
commit 74e5263c88e51bb442879ab863a5d03292fc0a33
Author: David Lord <davidism@gmail.com>
Date:   Thu Dec 29 09:52:18 2022 -0800

    new run debug docs

diff --git a/docs/cli.rst b/docs/cli.rst
index 22484f17..a3ea268e 100644
--- a/docs/cli.rst
+++ b/docs/cli.rst
@@ -95,7 +95,7 @@ the ``--debug`` option.
 
 .. code-block:: console
 
-     $ flask --app hello --debug run
+     $ flask --app hello run --debug
       * Serving Flask app "hello"
       * Debug mode: on
       * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
@@ -550,7 +550,7 @@ a name such as "flask run".
 Click the *Script path* dropdown and change it to *Module name*, then input ``flask``.
 
 The *Parameters* field is set to the CLI command to execute along with any arguments.
-This example uses ``--app hello --debug run``, which will run the development server in
+This example uses ``--app hello run --debug``, which will run the development server in
 debug mode. ``--app hello`` should be the import or file with your Flask app.
 
 If you installed your project as a package in your virtualenv, you may uncheck the
diff --git a/docs/config.rst b/docs/config.rst
index 7cffc44b..9446e456 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -47,12 +47,12 @@ Debug Mode
 
 The :data:`DEBUG` config value is special because it may behave inconsistently if
 changed after the app has begun setting up. In order to set debug mode reliably, use the
-``--debug`` option on the ``flask`` command. ``flask run`` will use the interactive
+``--debug`` option on the ``flask run`` command. ``flask run`` will use the interactive
 debugger and reloader by default in debug mode.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 Using the option is recommended. While it is possible to set :data:`DEBUG` in your
 config or code, this is strongly discouraged. It can't be read early by the ``flask run``
diff --git a/docs/debugging.rst b/docs/debugging.rst
index fb3604b0..18f42867 100644
--- a/docs/debugging.rst
+++ b/docs/debugging.rst
@@ -43,7 +43,7 @@ The debugger is enabled by default when the development server is run in debug m
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 When running from Python code, passing ``debug=True`` enables debug mode, which is
 mostly equivalent.
@@ -72,7 +72,7 @@ which can interfere.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run --no-debugger --no-reload
+    $ flask --app hello run --debug --no-debugger --no-reload
 
 When running from Python:
 
diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index f92bd241..0d7ad3f6 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -108,7 +108,7 @@ To enable debug mode, use the ``--debug`` option.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
      * Serving Flask app 'hello'
      * Debug mode: on
      * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
diff --git a/docs/server.rst b/docs/server.rst
index a34dfab5..d38aa120 100644
--- a/docs/server.rst
+++ b/docs/server.rst
@@ -24,7 +24,7 @@ debug mode.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 This enables debug mode, including the interactive debugger and reloader, and then
 starts the server on http://localhost:5000/. Use ``flask run --help`` to see the
diff --git a/docs/tutorial/factory.rst b/docs/tutorial/factory.rst
index c8e2c5f4..39febd13 100644
--- a/docs/tutorial/factory.rst
+++ b/docs/tutorial/factory.rst
@@ -137,7 +137,7 @@ follow the tutorial.
 
 .. code-block:: text
 
-    $ flask --app flaskr --debug run
+    $ flask --app flaskr run --debug
 
 You'll see output similar to this:
 
diff --git a/examples/tutorial/README.rst b/examples/tutorial/README.rst
index a7e12ca2..1c745078 100644
--- a/examples/tutorial/README.rst
+++ b/examples/tutorial/README.rst
@@ -48,7 +48,7 @@ Run
 .. code-block:: text
 
     $ flask --app flaskr init-db
-    $ flask --app flaskr --debug run
+    $ flask --app flaskr run --debug
 
 Open http://127.0.0.1:5000 in a browser.
 

--------------------------------------------------------------------------------
Git show output for commit 4d69165ab6e17fa754139d348cdfd9edacbcb999:
commit 4d69165ab6e17fa754139d348cdfd9edacbcb999
Author: David Lord <davidism@gmail.com>
Date:   Thu Dec 29 09:51:34 2022 -0800

    revert run debug docs

diff --git a/docs/cli.rst b/docs/cli.rst
index a3ea268e..22484f17 100644
--- a/docs/cli.rst
+++ b/docs/cli.rst
@@ -95,7 +95,7 @@ the ``--debug`` option.
 
 .. code-block:: console
 
-     $ flask --app hello run --debug
+     $ flask --app hello --debug run
       * Serving Flask app "hello"
       * Debug mode: on
       * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
@@ -550,7 +550,7 @@ a name such as "flask run".
 Click the *Script path* dropdown and change it to *Module name*, then input ``flask``.
 
 The *Parameters* field is set to the CLI command to execute along with any arguments.
-This example uses ``--app hello run --debug``, which will run the development server in
+This example uses ``--app hello --debug run``, which will run the development server in
 debug mode. ``--app hello`` should be the import or file with your Flask app.
 
 If you installed your project as a package in your virtualenv, you may uncheck the
diff --git a/docs/config.rst b/docs/config.rst
index 9446e456..7cffc44b 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -47,12 +47,12 @@ Debug Mode
 
 The :data:`DEBUG` config value is special because it may behave inconsistently if
 changed after the app has begun setting up. In order to set debug mode reliably, use the
-``--debug`` option on the ``flask run`` command. ``flask run`` will use the interactive
+``--debug`` option on the ``flask`` command. ``flask run`` will use the interactive
 debugger and reloader by default in debug mode.
 
 .. code-block:: text
 
-    $ flask --app hello run --debug
+    $ flask --app hello --debug run
 
 Using the option is recommended. While it is possible to set :data:`DEBUG` in your
 config or code, this is strongly discouraged. It can't be read early by the ``flask run``
diff --git a/docs/debugging.rst b/docs/debugging.rst
index 18f42867..fb3604b0 100644
--- a/docs/debugging.rst
+++ b/docs/debugging.rst
@@ -43,7 +43,7 @@ The debugger is enabled by default when the development server is run in debug m
 
 .. code-block:: text
 
-    $ flask --app hello run --debug
+    $ flask --app hello --debug run
 
 When running from Python code, passing ``debug=True`` enables debug mode, which is
 mostly equivalent.
@@ -72,7 +72,7 @@ which can interfere.
 
 .. code-block:: text
 
-    $ flask --app hello run --debug --no-debugger --no-reload
+    $ flask --app hello --debug run --no-debugger --no-reload
 
 When running from Python:
 
diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index ad9e3bc4..02dbc978 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -108,7 +108,7 @@ To enable debug mode, use the ``--debug`` option.
 
 .. code-block:: text
 
-    $ flask --app hello run --debug
+    $ flask --app hello --debug run
      * Serving Flask app 'hello'
      * Debug mode: on
      * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
diff --git a/docs/server.rst b/docs/server.rst
index d38aa120..a34dfab5 100644
--- a/docs/server.rst
+++ b/docs/server.rst
@@ -24,7 +24,7 @@ debug mode.
 
 .. code-block:: text
 
-    $ flask --app hello run --debug
+    $ flask --app hello --debug run
 
 This enables debug mode, including the interactive debugger and reloader, and then
 starts the server on http://localhost:5000/. Use ``flask run --help`` to see the
diff --git a/docs/tutorial/factory.rst b/docs/tutorial/factory.rst
index 39febd13..c8e2c5f4 100644
--- a/docs/tutorial/factory.rst
+++ b/docs/tutorial/factory.rst
@@ -137,7 +137,7 @@ follow the tutorial.
 
 .. code-block:: text
 
-    $ flask --app flaskr run --debug
+    $ flask --app flaskr --debug run
 
 You'll see output similar to this:
 
diff --git a/examples/tutorial/README.rst b/examples/tutorial/README.rst
index 1c745078..a7e12ca2 100644
--- a/examples/tutorial/README.rst
+++ b/examples/tutorial/README.rst
@@ -48,7 +48,7 @@ Run
 .. code-block:: text
 
     $ flask --app flaskr init-db
-    $ flask --app flaskr run --debug
+    $ flask --app flaskr --debug run
 
 Open http://127.0.0.1:5000 in a browser.
 

--------------------------------------------------------------------------------
Git show output for commit 229dcbb5ce3fd935974d923be84ad1bf9efb61e8:
commit 229dcbb5ce3fd935974d923be84ad1bf9efb61e8
Merge: 79032ca5 bd26928f
Author: David Lord <davidism@gmail.com>
Date:   Sat Dec 24 15:28:21 2022 -0700

    Merge pull request #4779 from greyli/add-debug-to-run
    
    Add `--debug` option to flask run


--------------------------------------------------------------------------------
Git show output for commit bd26928fdb2476fca62f0e621e8f2870250ac2bc:
commit bd26928fdb2476fca62f0e621e8f2870250ac2bc
Author: Grey Li <withlihui@gmail.com>
Date:   Tue Aug 23 12:44:50 2022 +0800

    Prefer flask run --debug in docs

diff --git a/docs/_static/pycharm-run-config.png b/docs/_static/pycharm-run-config.png
index 3f789157..ad025545 100644
Binary files a/docs/_static/pycharm-run-config.png and b/docs/_static/pycharm-run-config.png differ
diff --git a/docs/cli.rst b/docs/cli.rst
index 22484f17..a3ea268e 100644
--- a/docs/cli.rst
+++ b/docs/cli.rst
@@ -95,7 +95,7 @@ the ``--debug`` option.
 
 .. code-block:: console
 
-     $ flask --app hello --debug run
+     $ flask --app hello run --debug
       * Serving Flask app "hello"
       * Debug mode: on
       * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
@@ -550,7 +550,7 @@ a name such as "flask run".
 Click the *Script path* dropdown and change it to *Module name*, then input ``flask``.
 
 The *Parameters* field is set to the CLI command to execute along with any arguments.
-This example uses ``--app hello --debug run``, which will run the development server in
+This example uses ``--app hello run --debug``, which will run the development server in
 debug mode. ``--app hello`` should be the import or file with your Flask app.
 
 If you installed your project as a package in your virtualenv, you may uncheck the
diff --git a/docs/config.rst b/docs/config.rst
index aa966e5c..9446e456 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -47,15 +47,15 @@ Debug Mode
 
 The :data:`DEBUG` config value is special because it may behave inconsistently if
 changed after the app has begun setting up. In order to set debug mode reliably, use the
-``--debug`` option on the ``flask`` command. ``flask run`` will use the interactive
+``--debug`` option on the ``flask run`` command. ``flask run`` will use the interactive
 debugger and reloader by default in debug mode.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 Using the option is recommended. While it is possible to set :data:`DEBUG` in your
-config or code, this is strongly discouraged. It can't be read early by the ``flask``
+config or code, this is strongly discouraged. It can't be read early by the ``flask run``
 command, and some systems or extensions may have already configured themselves based on
 a previous value.
 
diff --git a/docs/debugging.rst b/docs/debugging.rst
index fb3604b0..18f42867 100644
--- a/docs/debugging.rst
+++ b/docs/debugging.rst
@@ -43,7 +43,7 @@ The debugger is enabled by default when the development server is run in debug m
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 When running from Python code, passing ``debug=True`` enables debug mode, which is
 mostly equivalent.
@@ -72,7 +72,7 @@ which can interfere.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run --no-debugger --no-reload
+    $ flask --app hello run --debug --no-debugger --no-reload
 
 When running from Python:
 
diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index 02dbc978..ad9e3bc4 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -108,7 +108,7 @@ To enable debug mode, use the ``--debug`` option.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
      * Serving Flask app 'hello'
      * Debug mode: on
      * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
diff --git a/docs/server.rst b/docs/server.rst
index a34dfab5..d38aa120 100644
--- a/docs/server.rst
+++ b/docs/server.rst
@@ -24,7 +24,7 @@ debug mode.
 
 .. code-block:: text
 
-    $ flask --app hello --debug run
+    $ flask --app hello run --debug
 
 This enables debug mode, including the interactive debugger and reloader, and then
 starts the server on http://localhost:5000/. Use ``flask run --help`` to see the
diff --git a/docs/tutorial/factory.rst b/docs/tutorial/factory.rst
index c8e2c5f4..39febd13 100644
--- a/docs/tutorial/factory.rst
+++ b/docs/tutorial/factory.rst
@@ -137,7 +137,7 @@ follow the tutorial.
 
 .. code-block:: text
 
-    $ flask --app flaskr --debug run
+    $ flask --app flaskr run --debug
 
 You'll see output similar to this:
 
diff --git a/examples/tutorial/README.rst b/examples/tutorial/README.rst
index a7e12ca2..1c745078 100644
--- a/examples/tutorial/README.rst
+++ b/examples/tutorial/README.rst
@@ -48,7 +48,7 @@ Run
 .. code-block:: text
 
     $ flask --app flaskr init-db
-    $ flask --app flaskr --debug run
+    $ flask --app flaskr run --debug
 
 Open http://127.0.0.1:5000 in a browser.
 
diff --git a/src/flask/cli.py b/src/flask/cli.py
index 10e9c1e9..37a15ff2 100644
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -837,11 +837,6 @@ class SeparatedPathType(click.Path):
     expose_value=False,
     help="The key file to use when specifying a certificate.",
 )
-@click.option(
-    "--debug/--no-debug",
-    default=None,
-    help="Enable or disable the debug mode.",
-)
 @click.option(
     "--reload/--no-reload",
     default=None,
@@ -883,7 +878,6 @@ def run_command(
     info,
     host,
     port,
-    debug,
     reload,
     debugger,
     with_threads,
@@ -916,8 +910,7 @@ def run_command(
             # command fails.
             raise e from None
 
-    if debug is None:
-        debug = get_debug_flag()
+    debug = get_debug_flag()
 
     if reload is None:
         reload = debug
@@ -940,6 +933,9 @@ def run_command(
     )
 
 
+run_command.params.insert(0, _debug_option)
+
+
 @click.command("shell", short_help="Run a shell in the app context.")
 @with_appcontext
 def shell_command() -> None:

--------------------------------------------------------------------------------
Git show output for commit 4bc0e4943dfa637361aec2bb18dc9e1fabeaad12:
commit 4bc0e4943dfa637361aec2bb18dc9e1fabeaad12
Author: Grey Li <withlihui@gmail.com>
Date:   Sun Aug 21 17:36:30 2022 +0800

    Add --debug option to flask run

diff --git a/CHANGES.rst b/CHANGES.rst
index 82d2da6d..79e66e95 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -7,6 +7,7 @@ Unreleased
     templates this behavior can be changed with the ``autoescape`` tag.
     :issue:`4831`
 -   Fix the type of ``template_folder`` to accept ``pathlib.Path``. :issue:`4892`
+-   Add ``--debug`` option to the ``flask run`` command. :issue:`4777`
 
 
 Version 2.2.2
diff --git a/src/flask/cli.py b/src/flask/cli.py
index 82fe8194..10e9c1e9 100644
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -837,6 +837,11 @@ class SeparatedPathType(click.Path):
     expose_value=False,
     help="The key file to use when specifying a certificate.",
 )
+@click.option(
+    "--debug/--no-debug",
+    default=None,
+    help="Enable or disable the debug mode.",
+)
 @click.option(
     "--reload/--no-reload",
     default=None,
@@ -878,6 +883,7 @@ def run_command(
     info,
     host,
     port,
+    debug,
     reload,
     debugger,
     with_threads,
@@ -910,7 +916,8 @@ def run_command(
             # command fails.
             raise e from None
 
-    debug = get_debug_flag()
+    if debug is None:
+        debug = get_debug_flag()
 
     if reload is None:
         reload = debug

--------------------------------------------------------------------------------
Git show output for commit 631b6dd54619f5e71134297e3daa9bdbd1bc123b:
commit 631b6dd54619f5e71134297e3daa9bdbd1bc123b
Merge: d9e56c7f 09112cfc
Author: David Lord <davidism@gmail.com>
Date:   Sat Dec 24 11:20:56 2022 -0700

    Merge pull request #4921 from ivanovmg/fix/template_folder
    
    Allow pathlib.Path for template_folder


--------------------------------------------------------------------------------
Git show output for commit d9e56c7f4b04b050b28cf90778f44dcb2e0287f4:
commit d9e56c7f4b04b050b28cf90778f44dcb2e0287f4
Merge: d8fe178a 677a0468
Author: David Lord <davidism@gmail.com>
Date:   Sat Dec 24 11:07:46 2022 -0700

    Merge pull request #4920 from ivanovmg/fix/link
    
    Fix URL "committing as you go"


--------------------------------------------------------------------------------
Git show output for commit d8fe178aa635c8cc584fae86435824bd97595100:
commit d8fe178aa635c8cc584fae86435824bd97595100
Merge: 55cdb420 6fcf6d00
Author: David Lord <davidism@gmail.com>
Date:   Sat Dec 24 10:57:53 2022 -0700

    Merge pull request #4920 from ivanovmg/fix/link
    
    Fix URL "committing as you go"


--------------------------------------------------------------------------------
Git show output for commit d36a379a0fa1f83e539da6f305c7fbaa9122e886:
commit d36a379a0fa1f83e539da6f305c7fbaa9122e886
Merge: dcdcac2f 43ef559d
Author: Grey Li <withlihui@gmail.com>
Date:   Thu Dec 22 21:48:45 2022 +0800

    Merge pull request #4913 from ivanovmg/fix/var-name


--------------------------------------------------------------------------------
Git show output for commit 3dc6db9d0cfddcfb971c382b014bb56ac3761d3c:
commit 3dc6db9d0cfddcfb971c382b014bb56ac3761d3c
Merge: 0d8c8ba7 75e92090
Author: David Lord <davidism@gmail.com>
Date:   Tue Oct 4 20:09:06 2022 -0700

    Merge pull request #4835 from TehBrian/2.2.x
    
    fix typo in quickstart


--------------------------------------------------------------------------------
Git show output for commit 75e92090ee43642ad0608edc8bc5d4dc5e84dec8:
commit 75e92090ee43642ad0608edc8bc5d4dc5e84dec8
Author: TehBrian <32250137+TehBrian@users.noreply.github.com>
Date:   Tue Oct 4 21:12:13 2022 -0400

    fix typo in quickstart

diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index 02dbc978..f92bd241 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -359,7 +359,7 @@ the application secure.  Because of that Flask configures the `Jinja2
 
 Templates can be used to generate any type of text file. For web applications, you'll
 primarily be generating HTML pages, but you can also generate markdown, plain text for
-emails, any anything else.
+emails, and anything else.
 
 For a reference to HTML, CSS, and other web APIs, use the `MDN Web Docs`_.
 

--------------------------------------------------------------------------------
Git show output for commit 00bdc2b448a10c690b159d778391fe23852cfc08:
commit 00bdc2b448a10c690b159d778391fe23852cfc08
Author: Kevin Kirsche <kevin.kirsche@one.verizon.com>
Date:   Mon Aug 22 12:05:52 2022 -0400

    fix: remove obsolete `zip_safe` (#4783)
    
    remove obsolete `zip_safe`

diff --git a/docs/tutorial/install.rst b/docs/tutorial/install.rst
index 7380b302..f6820ebd 100644
--- a/docs/tutorial/install.rst
+++ b/docs/tutorial/install.rst
@@ -41,7 +41,6 @@ to it.
         version='1.0.0',
         packages=find_packages(),
         include_package_data=True,
-        zip_safe=False,
         install_requires=[
             'flask',
         ],

--------------------------------------------------------------------------------
Git show output for commit 56a95f6ff6b14d26a8aad124bf08484e2b4be21f:
commit 56a95f6ff6b14d26a8aad124bf08484e2b4be21f
Merge: e0c157f7 746455d1
Author: David Lord <davidism@gmail.com>
Date:   Sun Aug 21 07:56:09 2022 -0700

    Merge pull request #4780 from tjrhines1/config-fix-docstring
    
    Fix misrendered docstring


--------------------------------------------------------------------------------
Git show output for commit 2d3f72574dcb9026c3fed6b68568351a4b18a69a:
commit 2d3f72574dcb9026c3fed6b68568351a4b18a69a
Author: David Lord <davidism@gmail.com>
Date:   Mon Aug 15 12:37:11 2022 -0700

    fix typo

diff --git a/docs/extensiondev.rst b/docs/extensiondev.rst
index 95745119..7b54917d 100644
--- a/docs/extensiondev.rst
+++ b/docs/extensiondev.rst
@@ -184,7 +184,7 @@ context is active when a request context is, or when a CLI command is
 run. If you're storing something that should be closed, use
 :meth:`~flask.Flask.teardown_appcontext` to ensure that it gets closed
 when the application context ends. If it should only be valid during a
-request, or would not be used in the CLI outside a reqeust, use
+request, or would not be used in the CLI outside a request, use
 :meth:`~flask.Flask.teardown_request`.
 
 

--------------------------------------------------------------------------------
Git show output for commit d94634b1beaf81afea662692874fdaa4c8a6bd89:
commit d94634b1beaf81afea662692874fdaa4c8a6bd89
Author: David Lord <davidism@gmail.com>
Date:   Mon Aug 15 07:34:50 2022 -0700

    fix view docs

diff --git a/docs/views.rst b/docs/views.rst
index b7c5ba20..3eebbfaa 100644
--- a/docs/views.rst
+++ b/docs/views.rst
@@ -116,7 +116,10 @@ function.
             item = self.model.query.get_or_404(id)
             return render_template(self.template, item=item)
 
-    app.add_url_rule("/users/<int:id>", view_func=DetailView.as_view("user_detail"))
+    app.add_url_rule(
+        "/users/<int:id>",
+        view_func=DetailView.as_view("user_detail", User)
+    )
 
 
 View Lifetime and ``self``
@@ -295,8 +298,10 @@ provide get (list) and post (create) methods.
             return jsonify(item.to_json())
 
     def register_api(app, model, url):
-        app.add_url_rule(f"/{name}/<int:id>", view_func=ItemAPI(f"{name}-item", model))
-        app.add_url_rule(f"/{name}/", view_func=GroupAPI(f"{name}-group", model))
+        item = ItemAPI.as_view(f"{name}-item", model)
+        group = GroupAPI.as_view(f"{name}-group", model)
+        app.add_url_rule(f"/{name}/<int:id>", view_func=item)
+        app.add_url_rule(f"/{name}/", view_func=group)
 
     register_api(app, User, "users")
     register_api(app, Story, "stories")

--------------------------------------------------------------------------------
Git show output for commit 1d07857b1ddd2c0aef6d09436b307eb7abfdbd39:
commit 1d07857b1ddd2c0aef6d09436b307eb7abfdbd39
Author: David Lord <davidism@gmail.com>
Date:   Mon Aug 15 07:29:34 2022 -0700

    fix typo

diff --git a/docs/patterns/streaming.rst b/docs/patterns/streaming.rst
index e35ac4ab..c9e6ef22 100644
--- a/docs/patterns/streaming.rst
+++ b/docs/patterns/streaming.rst
@@ -20,7 +20,7 @@ data and to then invoke that function and pass it to a response object::
         def generate():
             for row in iter_all_rows():
                 yield f"{','.join(row)}\n"
-        return generate(), {"Content-Type": "text/csv")
+        return generate(), {"Content-Type": "text/csv"}
 
 Each ``yield`` expression is directly sent to the browser.  Note though
 that some WSGI middlewares might break streaming, so be careful there in

--------------------------------------------------------------------------------
Git show output for commit 5b2e9e946bd1e024795d54b9daa489ead6b7a995:
commit 5b2e9e946bd1e024795d54b9daa489ead6b7a995
Merge: a1c478bc 00b07c86
Author: Grey Li <withlihui@gmail.com>
Date:   Tue Aug 9 22:03:39 2022 +0800

    Merge pull request #4757 from prohde/fix-4756


--------------------------------------------------------------------------------
Git show output for commit 00b07c863ec147256b68f71c3fe9b6b2f9dbe6bc:
commit 00b07c863ec147256b68f71c3fe9b6b2f9dbe6bc
Author: Philipp Rohde <Philipp.Rohde@tib.eu>
Date:   Tue Aug 9 09:48:02 2022 +0200

    fix typo
    
    fixes #4756

diff --git a/src/flask/globals.py b/src/flask/globals.py
index b230ef7e..254da42b 100644
--- a/src/flask/globals.py
+++ b/src/flask/globals.py
@@ -88,7 +88,7 @@ def __getattr__(name: str) -> t.Any:
         import warnings
 
         warnings.warn(
-            "'_app_ctx_stack' is deprecated and will be remoevd in Flask 2.3.",
+            "'_app_ctx_stack' is deprecated and will be removed in Flask 2.3.",
             DeprecationWarning,
             stacklevel=2,
         )
@@ -98,7 +98,7 @@ def __getattr__(name: str) -> t.Any:
         import warnings
 
         warnings.warn(
-            "'_request_ctx_stack' is deprecated and will be remoevd in Flask 2.3.",
+            "'_request_ctx_stack' is deprecated and will be removed in Flask 2.3.",
             DeprecationWarning,
             stacklevel=2,
         )

--------------------------------------------------------------------------------
Git show output for commit 6ab3cb8d0cb1fa28dd2e0118c07e481720bd684a:
commit 6ab3cb8d0cb1fa28dd2e0118c07e481720bd684a
Author: David Lord <davidism@gmail.com>
Date:   Mon Aug 8 10:27:57 2022 -0700

    fix issue number

diff --git a/CHANGES.rst b/CHANGES.rst
index efc373b8..bc7dae20 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -21,7 +21,7 @@ Version 2.2.0
 
 Released 2022-08-01
 
--   Remove previously deprecated code. :pr:`4337`
+-   Remove previously deprecated code. :pr:`4667`
 
     -   Old names for some ``send_file`` parameters have been removed.
         ``download_name`` replaces ``attachment_filename``, ``max_age``

--------------------------------------------------------------------------------
Git show output for commit 45b2c99c1f6a884376d54bbb25223edad65596c5:
commit 45b2c99c1f6a884376d54bbb25223edad65596c5
Merge: 4984753d a6a7a573
Author: David Lord <davidism@gmail.com>
Date:   Thu Aug 4 07:27:50 2022 -0700

    Merge pull request #4742 from pallets/env-default
    
    fix default value of app.env


--------------------------------------------------------------------------------
Git show output for commit a6a7a57380cd8f7410753c3b819ba6d09198d8c9:
commit a6a7a57380cd8f7410753c3b819ba6d09198d8c9
Author: David Lord <davidism@gmail.com>
Date:   Thu Aug 4 07:24:20 2022 -0700

    fix default value of app.env

diff --git a/CHANGES.rst b/CHANGES.rst
index 547c121f..efc373b8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -3,6 +3,9 @@ Version 2.2.2
 
 Unreleased
 
+-   Fix the default value for ``app.env`` to be ``"production"``. This
+    attribute remains deprecated. :issue:`4740`
+
 
 Version 2.2.1
 -------------
diff --git a/src/flask/app.py b/src/flask/app.py
index 965865f2..db442c9e 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -827,7 +827,7 @@ class Flask(Scaffold):
         if instance_relative:
             root_path = self.instance_path
         defaults = dict(self.default_config)
-        defaults["ENV"] = os.environ.get("FLASK_ENV") or "development"
+        defaults["ENV"] = os.environ.get("FLASK_ENV") or "production"
         defaults["DEBUG"] = get_debug_flag()
         return self.config_class(root_path, defaults)
 

--------------------------------------------------------------------------------
Git show output for commit 095651be9eec58ddb0c2eb6158318b1c703c67c5:
commit 095651be9eec58ddb0c2eb6158318b1c703c67c5
Author: David Lord <davidism@gmail.com>
Date:   Mon Jul 25 07:35:17 2022 -0700

    fix has_app_context and has_request_context

diff --git a/src/flask/ctx.py b/src/flask/ctx.py
index 84d739ec..ca284494 100644
--- a/src/flask/ctx.py
+++ b/src/flask/ctx.py
@@ -213,7 +213,7 @@ def has_request_context() -> bool:
 
     .. versionadded:: 0.7
     """
-    return _cv_app.get(None) is not None
+    return _cv_request.get(None) is not None
 
 
 def has_app_context() -> bool:
@@ -223,7 +223,7 @@ def has_app_context() -> bool:
 
     .. versionadded:: 0.9
     """
-    return _cv_request.get(None) is not None
+    return _cv_app.get(None) is not None
 
 
 class AppContext:

--------------------------------------------------------------------------------
Git show output for commit 4f01c68a4bcabf7dde010b7c602f2811aa89a852:
commit 4f01c68a4bcabf7dde010b7c602f2811aa89a852
Author: David Lord <davidism@gmail.com>
Date:   Wed Jul 13 14:02:50 2022 -0700

    fix issue link

diff --git a/CHANGES.rst b/CHANGES.rst
index 50b8763b..d6166f84 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -9,7 +9,7 @@ Released 2022-07-13
     commands. :pr:`4606`
 -   Relax type annotation for ``after_request`` functions. :issue:`4600`
 -   ``instance_path`` for namespace packages uses the path closest to
-    the imported submodule. :issue:`4600`
+    the imported submodule. :issue:`4610`
 -   Clearer error message when ``render_template`` and
     ``render_template_string`` are used outside an application context.
     :pr:`4693`

--------------------------------------------------------------------------------
Git show output for commit 979e0adbacfb3c5cc1ac678b4ef5373dadde83d3:
commit 979e0adbacfb3c5cc1ac678b4ef5373dadde83d3
Author: David Lord <davidism@gmail.com>
Date:   Fri Jul 8 12:02:18 2022 -0700

    fix pr link

diff --git a/CHANGES.rst b/CHANGES.rst
index 5fda08e3..55c5c281 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,7 +17,7 @@ Unreleased
 
 -   The app and request contexts are managed using Python context vars
     directly rather than Werkzeug's ``LocalStack``. This should result
-    in better performance and memory use. :pr:`4672`
+    in better performance and memory use. :pr:`4682`
 
     -   Extension maintainers, be aware that ``_app_ctx_stack.top``
         and ``_request_ctx_stack.top`` are deprecated. Store data on

--------------------------------------------------------------------------------
Git show output for commit 6916697a982df775a66a1ac9971985e5fa213f2b:
commit 6916697a982df775a66a1ac9971985e5fa213f2b
Merge: 57a95e82 84c72204
Author: David Lord <davidism@gmail.com>
Date:   Fri Jul 1 12:35:24 2022 -0700

    Merge pull request #4666 from pallets/debug-context
    
    new preserve context implementation


--------------------------------------------------------------------------------
Git show output for commit 84c722044ad03f7f5384f5314c8350b3a13d8dfa:
commit 84c722044ad03f7f5384f5314c8350b3a13d8dfa
Author: David Lord <davidism@gmail.com>
Date:   Wed Jun 29 21:02:44 2022 -0700

    new debug/test preserve context implementation

diff --git a/CHANGES.rst b/CHANGES.rst
index 64b4ef0b..cc96f441 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -42,6 +42,18 @@ Unreleased
     them in a ``Response``. :pr:`4629`
 -   Add ``stream_template`` and ``stream_template_string`` functions to
     render a template as a stream of pieces. :pr:`4629`
+-   A new implementation of context preservation during debugging and
+    testing. :pr:`4666`
+
+    -   ``request``, ``g``, and other context-locals point to the
+        correct data when running code in the interactive debugger
+        console. :issue:`2836`
+    -   Teardown functions are always run at the end of the request,
+        even if the context is preserved. They are also run after the
+        preserved context is popped.
+    -   ``stream_with_context`` preserves context separately from a
+        ``with client`` block. It will be cleaned up when
+        ``response.get_data()`` or ``response.close()`` is called.
 
 
 Version 2.1.3
diff --git a/docs/config.rst b/docs/config.rst
index 12170e90..ebe29d05 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -126,14 +126,6 @@ The following configuration values are used internally by Flask:
 
     Default: ``None``
 
-.. py:data:: PRESERVE_CONTEXT_ON_EXCEPTION
-
-    Don't pop the request context when an exception occurs. If not set, this
-    is true if ``DEBUG`` is true. This allows debuggers to introspect the
-    request data on errors, and should normally not need to be set directly.
-
-    Default: ``None``
-
 .. py:data:: TRAP_HTTP_EXCEPTIONS
 
     If there is no handler for an ``HTTPException``-type exception, re-raise it
@@ -392,6 +384,9 @@ The following configuration values are used internally by Flask:
 
     Added :data:`MAX_COOKIE_SIZE` to control a warning from Werkzeug.
 
+.. versionchanged:: 2.2
+    Removed ``PRESERVE_CONTEXT_ON_EXCEPTION``.
+
 
 Configuring from Python Files
 -----------------------------
diff --git a/docs/reqcontext.rst b/docs/reqcontext.rst
index f395e844..96e17e3b 100644
--- a/docs/reqcontext.rst
+++ b/docs/reqcontext.rst
@@ -219,25 +219,6 @@ sent:
     :meth:`~Flask.teardown_request` functions are called.
 
 
-Context Preservation on Error
------------------------------
-
-At the end of a request, the request context is popped and all data
-associated with it is destroyed. If an error occurs during development,
-it is useful to delay destroying the data for debugging purposes.
-
-When the development server is running in development mode (the
-``--env`` option is set to ``'development'``), the error and data will
-be preserved and shown in the interactive debugger.
-
-This behavior can be controlled with the
-:data:`PRESERVE_CONTEXT_ON_EXCEPTION` config. As described above, it
-defaults to ``True`` in the development environment.
-
-Do not enable :data:`PRESERVE_CONTEXT_ON_EXCEPTION` in production, as it
-will cause your application to leak memory on exceptions.
-
-
 .. _notes-on-proxies:
 
 Notes On Proxies
diff --git a/src/flask/app.py b/src/flask/app.py
index 22dd3953..5a8223e5 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -331,7 +331,6 @@ class Flask(Scaffold):
             "DEBUG": None,
             "TESTING": False,
             "PROPAGATE_EXCEPTIONS": None,
-            "PRESERVE_CONTEXT_ON_EXCEPTION": None,
             "SECRET_KEY": None,
             "PERMANENT_SESSION_LIFETIME": timedelta(days=31),
             "USE_X_SENDFILE": False,
@@ -583,19 +582,6 @@ class Flask(Scaffold):
             return rv
         return self.testing or self.debug
 
-    @property
-    def preserve_context_on_exception(self) -> bool:
-        """Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``
-        configuration value in case it's set, otherwise a sensible default
-        is returned.
-
-        .. versionadded:: 0.7
-        """
-        rv = self.config["PRESERVE_CONTEXT_ON_EXCEPTION"]
-        if rv is not None:
-            return rv
-        return self.debug
-
     @locked_cached_property
     def logger(self) -> logging.Logger:
         """A standard Python :class:`~logging.Logger` for the app, with
@@ -2301,9 +2287,14 @@ class Flask(Scaffold):
                 raise
             return response(environ, start_response)
         finally:
-            if self.should_ignore_error(error):
+            if "werkzeug.debug.preserve_context" in environ:
+                environ["werkzeug.debug.preserve_context"](_app_ctx_stack.top)
+                environ["werkzeug.debug.preserve_context"](_request_ctx_stack.top)
+
+            if error is not None and self.should_ignore_error(error):
                 error = None
-            ctx.auto_pop(error)
+
+            ctx.pop(error)
 
     def __call__(self, environ: dict, start_response: t.Callable) -> t.Any:
         """The WSGI server calls the Flask application object as the
diff --git a/src/flask/ctx.py b/src/flask/ctx.py
index 2b2ebb75..caecbcc2 100644
--- a/src/flask/ctx.py
+++ b/src/flask/ctx.py
@@ -289,20 +289,12 @@ class RequestContext:
     functions registered on the application for teardown execution
     (:meth:`~flask.Flask.teardown_request`).
 
-    The request context is automatically popped at the end of the request
-    for you.  In debug mode the request context is kept around if
-    exceptions happen so that interactive debuggers have a chance to
-    introspect the data.  With 0.4 this can also be forced for requests
-    that did not fail and outside of ``DEBUG`` mode.  By setting
-    ``'flask._preserve_context'`` to ``True`` on the WSGI environment the
-    context will not pop itself at the end of the request.  This is used by
-    the :meth:`~flask.Flask.test_client` for example to implement the
-    deferred cleanup functionality.
-
-    You might find this helpful for unittests where you need the
-    information from the context local around for a little longer.  Make
-    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in
-    that situation, otherwise your unittests will leak memory.
+    The request context is automatically popped at the end of the
+    request. When using the interactive debugger, the context will be
+    restored so ``request`` is still accessible. Similarly, the test
+    client can preserve the context after the request ends. However,
+    teardown functions may already have closed some resources such as
+    database connections.
     """
 
     def __init__(
@@ -330,14 +322,6 @@ class RequestContext:
         # one is created implicitly so for each level we add this information
         self._implicit_app_ctx_stack: t.List[t.Optional["AppContext"]] = []
 
-        # indicator if the context was preserved.  Next time another context
-        # is pushed the preserved context is popped.
-        self.preserved = False
-
-        # remembers the exception for pop if there is one in case the context
-        # preservation kicks in.
-        self._preserved_exc = None
-
         # Functions that should be executed after the request on the response
         # object.  These will be called before the regular "after_request"
         # functions.
@@ -400,19 +384,6 @@ class RequestContext:
             self.request.routing_exception = e
 
     def push(self) -> None:
-        """Binds the request context to the current context."""
-        # If an exception occurs in debug mode or if context preservation is
-        # activated under exception situations exactly one context stays
-        # on the stack.  The rationale is that you want to access that
-        # information under debug situations.  However if someone forgets to
-        # pop that context again we want to make sure that on the next push
-        # it's invalidated, otherwise we run at risk that something leaks
-        # memory.  This is usually only a problem in test suite since this
-        # functionality is not active in production environments.
-        top = _request_ctx_stack.top
-        if top is not None and top.preserved:
-            top.pop(top._preserved_exc)
-
         # Before we push the request context we have to ensure that there
         # is an application context.
         app_ctx = _app_ctx_stack.top
@@ -454,8 +425,6 @@ class RequestContext:
 
         try:
             if not self._implicit_app_ctx_stack:
-                self.preserved = False
-                self._preserved_exc = None
                 if exc is _sentinel:
                     exc = sys.exc_info()[1]
                 self.app.do_teardown_request(exc)
@@ -481,13 +450,18 @@ class RequestContext:
             ), f"Popped wrong request context. ({rv!r} instead of {self!r})"
 
     def auto_pop(self, exc: t.Optional[BaseException]) -> None:
-        if self.request.environ.get("flask._preserve_context") or (
-            exc is not None and self.app.preserve_context_on_exception
-        ):
-            self.preserved = True
-            self._preserved_exc = exc  # type: ignore
-        else:
-            self.pop(exc)
+        """
+        .. deprecated:: 2.2
+            Will be removed in Flask 2.3.
+        """
+        import warnings
+
+        warnings.warn(
+            "'ctx.auto_pop' is deprecated and will be removed in Flask 2.3.",
+            DeprecationWarning,
+            stacklevel=2,
+        )
+        self.pop(exc)
 
     def __enter__(self) -> "RequestContext":
         self.push()
@@ -499,12 +473,7 @@ class RequestContext:
         exc_value: t.Optional[BaseException],
         tb: t.Optional[TracebackType],
     ) -> None:
-        # do not pop the request stack if we are in debug mode and an
-        # exception happened.  This will allow the debugger to still
-        # access the request object in the interactive shell.  Furthermore
-        # the context can be force kept alive for the test client.
-        # See flask.testing for how this works.
-        self.auto_pop(exc_value)
+        self.pop(exc_value)
 
     def __repr__(self) -> str:
         return (
diff --git a/src/flask/scaffold.py b/src/flask/scaffold.py
index 54d42d1d..418b24ae 100644
--- a/src/flask/scaffold.py
+++ b/src/flask/scaffold.py
@@ -600,13 +600,6 @@ class Scaffold:
         be passed an error object.
 
         The return values of teardown functions are ignored.
-
-        .. admonition:: Debug Note
-
-           In debug mode Flask will not tear down a request on an exception
-           immediately.  Instead it will keep it alive so that the interactive
-           debugger can still access it.  This behavior can be controlled
-           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.
         """
         self.teardown_request_funcs.setdefault(None, []).append(f)
         return f
diff --git a/src/flask/testing.py b/src/flask/testing.py
index df69d903..f652c23a 100644
--- a/src/flask/testing.py
+++ b/src/flask/testing.py
@@ -1,5 +1,6 @@
 import typing as t
 from contextlib import contextmanager
+from contextlib import ExitStack
 from copy import copy
 from types import TracebackType
 
@@ -108,10 +109,12 @@ class FlaskClient(Client):
     """
 
     application: "Flask"
-    preserve_context = False
 
     def __init__(self, *args: t.Any, **kwargs: t.Any) -> None:
         super().__init__(*args, **kwargs)
+        self.preserve_context = False
+        self._new_contexts: t.List[t.ContextManager[t.Any]] = []
+        self._context_stack = ExitStack()
         self.environ_base = {
             "REMOTE_ADDR": "127.0.0.1",
             "HTTP_USER_AGENT": f"werkzeug/{werkzeug.__version__}",
@@ -173,11 +176,12 @@ class FlaskClient(Client):
             self.cookie_jar.extract_wsgi(c.request.environ, headers)
 
     def _copy_environ(self, other):
-        return {
-            **self.environ_base,
-            **other,
-            "flask._preserve_context": self.preserve_context,
-        }
+        out = {**self.environ_base, **other}
+
+        if self.preserve_context:
+            out["werkzeug.debug.preserve_context"] = self._new_contexts.append
+
+        return out
 
     def _request_from_builder_args(self, args, kwargs):
         kwargs["environ_base"] = self._copy_environ(kwargs.get("environ_base", {}))
@@ -214,12 +218,24 @@ class FlaskClient(Client):
             # request is None
             request = self._request_from_builder_args(args, kwargs)
 
-        return super().open(
+        # Pop any previously preserved contexts. This prevents contexts
+        # from being preserved across redirects or multiple requests
+        # within a single block.
+        self._context_stack.close()
+
+        response = super().open(
             request,
             buffered=buffered,
             follow_redirects=follow_redirects,
         )
 
+        # Re-push contexts that were preserved during the request.
+        while self._new_contexts:
+            cm = self._new_contexts.pop()
+            self._context_stack.enter_context(cm)
+
+        return response
+
     def __enter__(self) -> "FlaskClient":
         if self.preserve_context:
             raise RuntimeError("Cannot nest client invocations")
@@ -233,18 +249,7 @@ class FlaskClient(Client):
         tb: t.Optional[TracebackType],
     ) -> None:
         self.preserve_context = False
-
-        # Normally the request context is preserved until the next
-        # request in the same thread comes. When the client exits we
-        # want to clean up earlier. Pop request contexts until the stack
-        # is empty or a non-preserved one is found.
-        while True:
-            top = _request_ctx_stack.top
-
-            if top is not None and top.preserved:
-                top.pop()
-            else:
-                break
+        self._context_stack.close()
 
 
 class FlaskCliRunner(CliRunner):
diff --git a/tests/test_basic.py b/tests/test_basic.py
index 916b7038..91ba042f 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -928,13 +928,8 @@ def test_baseexception_error_handling(app, client):
     def broken_func():
         raise KeyboardInterrupt()
 
-    with client:
-        with pytest.raises(KeyboardInterrupt):
-            client.get("/")
-
-        ctx = flask._request_ctx_stack.top
-        assert ctx.preserved
-        assert type(ctx._preserved_exc) is KeyboardInterrupt
+    with pytest.raises(KeyboardInterrupt):
+        client.get("/")
 
 
 def test_before_request_and_routing_errors(app, client):
@@ -1769,57 +1764,6 @@ def test_route_decorator_custom_endpoint(app, client):
     assert client.get("/bar/123").data == b"123"
 
 
-def test_preserve_only_once(app, client):
-    app.debug = True
-
-    @app.route("/fail")
-    def fail_func():
-        1 // 0
-
-    for _x in range(3):
-        with pytest.raises(ZeroDivisionError):
-            client.get("/fail")
-
-    assert flask._request_ctx_stack.top is not None
-    assert flask._app_ctx_stack.top is not None
-    # implicit appctx disappears too
-    flask._request_ctx_stack.top.pop()
-    assert flask._request_ctx_stack.top is None
-    assert flask._app_ctx_stack.top is None
-
-
-def test_preserve_remembers_exception(app, client):
-    app.debug = True
-    errors = []
-
-    @app.route("/fail")
-    def fail_func():
-        1 // 0
-
-    @app.route("/success")
-    def success_func():
-        return "Okay"
-
-    @app.teardown_request
-    def teardown_handler(exc):
-        errors.append(exc)
-
-    # After this failure we did not yet call the teardown handler
-    with pytest.raises(ZeroDivisionError):
-        client.get("/fail")
-    assert errors == []
-
-    # But this request triggers it, and it's an error
-    client.get("/success")
-    assert len(errors) == 2
-    assert isinstance(errors[0], ZeroDivisionError)
-
-    # At this point another request does nothing.
-    client.get("/success")
-    assert len(errors) == 3
-    assert errors[1] is None
-
-
 def test_get_method_on_g(app_ctx):
     assert flask.g.get("x") is None
     assert flask.g.get("x", 11) == 11
diff --git a/tests/test_signals.py b/tests/test_signals.py
index 719eb3ef..8aa69836 100644
--- a/tests/test_signals.py
+++ b/tests/test_signals.py
@@ -123,8 +123,7 @@ def test_request_exception_signal():
         flask.got_request_exception.disconnect(record, app)
 
 
-def test_appcontext_signals():
-    app = flask.Flask(__name__)
+def test_appcontext_signals(app, client):
     recorded = []
 
     def record_push(sender, **kwargs):
@@ -140,10 +139,8 @@ def test_appcontext_signals():
     flask.appcontext_pushed.connect(record_push, app)
     flask.appcontext_popped.connect(record_pop, app)
     try:
-        with app.test_client() as c:
-            rv = c.get("/")
-            assert rv.data == b"Hello"
-            assert recorded == ["push"]
+        rv = client.get("/")
+        assert rv.data == b"Hello"
         assert recorded == ["push", "pop"]
     finally:
         flask.appcontext_pushed.disconnect(record_push, app)
@@ -174,12 +171,12 @@ def test_flash_signal(app):
         flask.message_flashed.disconnect(record, app)
 
 
-def test_appcontext_tearing_down_signal():
-    app = flask.Flask(__name__)
+def test_appcontext_tearing_down_signal(app, client):
+    app.testing = False
     recorded = []
 
-    def record_teardown(sender, **kwargs):
-        recorded.append(("tear_down", kwargs))
+    def record_teardown(sender, exc):
+        recorded.append(exc)
 
     @app.route("/")
     def index():
@@ -187,10 +184,9 @@ def test_appcontext_tearing_down_signal():
 
     flask.appcontext_tearing_down.connect(record_teardown, app)
     try:
-        with app.test_client() as c:
-            rv = c.get("/")
-            assert rv.status_code == 500
-            assert recorded == []
-        assert recorded == [("tear_down", {"exc": None})]
+        rv = client.get("/")
+        assert rv.status_code == 500
+        assert len(recorded) == 1
+        assert isinstance(recorded[0], ZeroDivisionError)
     finally:
         flask.appcontext_tearing_down.disconnect(record_teardown, app)
diff --git a/tests/test_testing.py b/tests/test_testing.py
index a78502f4..dd6347e5 100644
--- a/tests/test_testing.py
+++ b/tests/test_testing.py
@@ -187,7 +187,6 @@ def test_session_transactions(app, client):
 
 def test_session_transactions_no_null_sessions():
     app = flask.Flask(__name__)
-    app.testing = True
 
     with app.test_client() as c:
         with pytest.raises(RuntimeError) as e:
@@ -254,29 +253,6 @@ def test_reuse_client(client):
         assert client.get("/").status_code == 404
 
 
-def test_test_client_calls_teardown_handlers(app, client):
-    called = []
-
-    @app.teardown_request
-    def remember(error):
-        called.append(error)
-
-    with client:
-        assert called == []
-        client.get("/")
-        assert called == []
-    assert called == [None]
-
-    del called[:]
-    with client:
-        assert called == []
-        client.get("/")
-        assert called == []
-        client.get("/")
-        assert called == [None]
-    assert called == [None, None]
-
-
 def test_full_url_request(app, client):
     @app.route("/action", methods=["POST"])
     def action():
@@ -412,13 +388,15 @@ def test_cli_custom_obj(app):
 def test_client_pop_all_preserved(app, req_ctx, client):
     @app.route("/")
     def index():
-        # stream_with_context pushes a third context, preserved by client
-        return flask.Response(flask.stream_with_context("hello"))
+        # stream_with_context pushes a third context, preserved by response
+        return flask.stream_with_context("hello")
 
-    # req_ctx fixture pushed an initial context, not marked preserved
+    # req_ctx fixture pushed an initial context
     with client:
         # request pushes a second request context, preserved by client
-        client.get("/")
+        rv = client.get("/")
 
+    # close the response, releasing the context held by stream_with_context
+    rv.close()
     # only req_ctx fixture should still be pushed
     assert flask._request_ctx_stack.top is req_ctx

--------------------------------------------------------------------------------
Git show output for commit 3635583ce27f70a3d9efd1e2212d5efc1d256333:
commit 3635583ce27f70a3d9efd1e2212d5efc1d256333
Merge: ab365422 5544d094
Author: David Lord <davidism@gmail.com>
Date:   Wed Jun 29 21:21:52 2022 -0700

    Merge pull request #4662 from pallets/fix-run-skip
    
    re-add flag to skip unguarded app.run from CLI


--------------------------------------------------------------------------------
Git show output for commit 99fa3c36abc03cd5b3407df34dce74e879ea377a:
commit 99fa3c36abc03cd5b3407df34dce74e879ea377a
Author: David Lord <davidism@gmail.com>
Date:   Fri Jun 17 07:54:06 2022 -0700

    add --app, --env, --debug, and --env-file CLI options

diff --git a/CHANGES.rst b/CHANGES.rst
index 84ffbf06..0dea8e3a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -27,6 +27,12 @@ Unreleased
     instance on every request. :issue:`2520`.
 -   A ``flask.cli.FlaskGroup`` Click group can be nested as a
     sub-command in a custom CLI. :issue:`3263`
+-   Add ``--app``, ``--env``, and ``--debug`` options to the ``flask``
+    CLI, instead of requiring that they are set through environment
+    variables. :issue:`2836`
+-   Add ``--env-file`` option to the ``flask`` CLI. This allows
+    specifying a dotenv file to load in addition to ``.env`` and
+    ``.flaskenv``. :issue:`3108`
 
 
 Version 2.1.3
diff --git a/src/flask/cli.py b/src/flask/cli.py
index a4e366d7..40f1de54 100644
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -1,3 +1,5 @@
+from __future__ import annotations
+
 import ast
 import inspect
 import os
@@ -12,6 +14,7 @@ from threading import Lock
 from threading import Thread
 
 import click
+from click.core import ParameterSource
 from werkzeug.serving import is_running_from_reloader
 from werkzeug.utils import import_string
 
@@ -20,6 +23,9 @@ from .helpers import get_debug_flag
 from .helpers import get_env
 from .helpers import get_load_dotenv
 
+if t.TYPE_CHECKING:
+    from .app import Flask
+
 
 class NoAppException(click.UsageError):
     """Raised if an application cannot be found or loaded."""
@@ -46,8 +52,8 @@ def find_best_app(module):
     elif len(matches) > 1:
         raise NoAppException(
             "Detected multiple Flask applications in module"
-            f" {module.__name__!r}. Use 'FLASK_APP={module.__name__}:name'"
-            f" to specify the correct one."
+            f" '{module.__name__}'. Use '{module.__name__}:name'"
+            " to specify the correct one."
         )
 
     # Search for app factory functions.
@@ -65,15 +71,15 @@ def find_best_app(module):
                     raise
 
                 raise NoAppException(
-                    f"Detected factory {attr_name!r} in module {module.__name__!r},"
+                    f"Detected factory '{attr_name}' in module '{module.__name__}',"
                     " but could not call it without arguments. Use"
-                    f" \"FLASK_APP='{module.__name__}:{attr_name}(args)'\""
+                    f" '{module.__name__}:{attr_name}(args)'"
                     " to specify arguments."
                 ) from e
 
     raise NoAppException(
         "Failed to find Flask application or factory in module"
-        f" {module.__name__!r}. Use 'FLASK_APP={module.__name__}:name'"
+        f" '{module.__name__}'. Use '{module.__name__}:name'"
         " to specify one."
     )
 
@@ -253,7 +259,7 @@ def get_version(ctx, param, value):
 
 version_option = click.Option(
     ["--version"],
-    help="Show the flask version",
+    help="Show the Flask version.",
     expose_value=False,
     callback=get_version,
     is_flag=True,
@@ -338,19 +344,24 @@ class ScriptInfo:
     onwards as click object.
     """
 
-    def __init__(self, app_import_path=None, create_app=None, set_debug_flag=True):
+    def __init__(
+        self,
+        app_import_path: str | None = None,
+        create_app: t.Callable[..., Flask] | None = None,
+        set_debug_flag: bool = True,
+    ) -> None:
         #: Optionally the import path for the Flask application.
-        self.app_import_path = app_import_path or os.environ.get("FLASK_APP")
+        self.app_import_path = app_import_path
         #: Optionally a function that is passed the script info to create
         #: the instance of the application.
         self.create_app = create_app
         #: A dictionary with arbitrary data that can be associated with
         #: this script info.
-        self.data = {}
+        self.data: t.Dict[t.Any, t.Any] = {}
         self.set_debug_flag = set_debug_flag
-        self._loaded_app = None
+        self._loaded_app: Flask | None = None
 
-    def load_app(self):
+    def load_app(self) -> Flask:
         """Loads the Flask app (if not yet loaded) and returns it.  Calling
         this multiple times will just result in the already loaded app to
         be returned.
@@ -379,9 +390,10 @@ class ScriptInfo:
 
         if not app:
             raise NoAppException(
-                "Could not locate a Flask application. You did not provide "
-                'the "FLASK_APP" environment variable, and a "wsgi.py" or '
-                '"app.py" module was not found in the current directory.'
+                "Could not locate a Flask application. Use the"
+                " 'flask --app' option, 'FLASK_APP' environment"
+                " variable, or a 'wsgi.py' or 'app.py' file in the"
+                " current directory."
             )
 
         if self.set_debug_flag:
@@ -442,6 +454,117 @@ class AppGroup(click.Group):
         return click.Group.group(self, *args, **kwargs)
 
 
+def _set_app(ctx: click.Context, param: click.Option, value: str | None) -> str | None:
+    if value is None:
+        return None
+
+    info = ctx.ensure_object(ScriptInfo)
+    info.app_import_path = value
+    return value
+
+
+# This option is eager so the app will be available if --help is given.
+# --help is also eager, so --app must be before it in the param list.
+# no_args_is_help bypasses eager processing, so this option must be
+# processed manually in that case to ensure FLASK_APP gets picked up.
+_app_option = click.Option(
+    ["-A", "--app"],
+    metavar="IMPORT",
+    help=(
+        "The Flask application or factory function to load, in the form 'module:name'."
+        " Module can be a dotted import or file path. Name is not required if it is"
+        " 'app', 'application', 'create_app', or 'make_app', and can be 'name(args)' to"
+        " pass arguments."
+    ),
+    is_eager=True,
+    expose_value=False,
+    callback=_set_app,
+)
+
+
+def _set_env(ctx: click.Context, param: click.Option, value: str | None) -> str | None:
+    if value is None:
+        return None
+
+    # Set with env var instead of ScriptInfo.load so that it can be
+    # accessed early during a factory function.
+    os.environ["FLASK_ENV"] = value
+    return value
+
+
+_env_option = click.Option(
+    ["-E", "--env"],
+    metavar="NAME",
+    help=(
+        "The execution environment name to set in 'app.env'. Defaults to"
+        " 'production'. 'development' will enable 'app.debug' and start the"
+        " debugger and reloader when running the server."
+    ),
+    expose_value=False,
+    callback=_set_env,
+)
+
+
+def _set_debug(ctx: click.Context, param: click.Option, value: bool) -> bool | None:
+    # If the flag isn't provided, it will default to False. Don't use
+    # that, let debug be set by env in that case.
+    source = ctx.get_parameter_source(param.name)  # type: ignore[arg-type]
+
+    if source is not None and source in (
+        ParameterSource.DEFAULT,
+        ParameterSource.DEFAULT_MAP,
+    ):
+        return None
+
+    # Set with env var instead of ScriptInfo.load so that it can be
+    # accessed early during a factory function.
+    os.environ["FLASK_DEBUG"] = "1" if value else "0"
+    return value
+
+
+_debug_option = click.Option(
+    ["--debug/--no-debug"],
+    help="Set 'app.debug' separately from '--env'.",
+    expose_value=False,
+    callback=_set_debug,
+)
+
+
+def _env_file_callback(
+    ctx: click.Context, param: click.Option, value: str | None
+) -> str | None:
+    if value is None:
+        return None
+
+    import importlib
+
+    try:
+        importlib.import_module("dotenv")
+    except ImportError:
+        raise click.BadParameter(
+            "python-dotenv must be installed to load an env file.",
+            ctx=ctx,
+            param=param,
+        ) from None
+
+    # Don't check FLASK_SKIP_DOTENV, that only disables automatically
+    # loading .env and .flaskenv files.
+    load_dotenv(value)
+    return value
+
+
+# This option is eager so env vars are loaded as early as possible to be
+# used by other options.
+_env_file_option = click.Option(
+    ["-e", "--env-file"],
+    type=click.Path(exists=True, dir_okay=False),
+    help="Load environment variables from this file. python-dotenv must be installed.",
+    is_eager=True,
+    expose_value=False,
+    callback=_env_file_callback,
+)
+
+
 class FlaskGroup(AppGroup):
     """Special subclass of the :class:`AppGroup` group that supports
     loading more commands from the configured Flask app.  Normally a
@@ -460,6 +583,10 @@ class FlaskGroup(AppGroup):
     :param set_debug_flag: Set the app's debug flag based on the active
         environment
 
+    .. versionchanged:: 2.2
+        Added the ``-A/--app``, ``-E/--env``, ``--debug/--no-debug``,
+        and ``-e/--env-file`` options.
+
     .. versionchanged:: 1.0
         If installed, python-dotenv will be used to load environment variables
         from :file:`.env` and :file:`.flaskenv` files.
@@ -467,14 +594,19 @@ class FlaskGroup(AppGroup):
 
     def __init__(
         self,
-        add_default_commands=True,
-        create_app=None,
-        add_version_option=True,
-        load_dotenv=True,
-        set_debug_flag=True,
-        **extra,
-    ):
+        add_default_commands: bool = True,
+        create_app: t.Callable[..., Flask] | None = None,
+        add_version_option: bool = True,
+        load_dotenv: bool = True,
+        set_debug_flag: bool = True,
+        **extra: t.Any,
+    ) -> None:
         params = list(extra.pop("params", None) or ())
+        # Processing is done with option callbacks instead of a group
+        # callback. This allows users to make a custom group callback
+        # without losing the behavior. --env-file must come first so
+        # that it is eagerly evaluated before --app.
+        params.extend((_env_file_option, _app_option, _env_option, _debug_option))
 
         if add_version_option:
             params.append(version_option)
@@ -555,11 +687,13 @@ class FlaskGroup(AppGroup):
 
     def make_context(
         self,
-        info_name: t.Optional[str],
-        args: t.List[str],
-        parent: t.Optional[click.Context] = None,
+        info_name: str | None,
+        args: list[str],
+        parent: click.Context | None = None,
         **extra: t.Any,
     ) -> click.Context:
+        # Attempt to load .env and .flask env files. The --env-file
+        # option can cause another file to be loaded.
         if get_load_dotenv(self.load_dotenv):
             load_dotenv()
 
@@ -570,6 +704,16 @@ class FlaskGroup(AppGroup):
 
         return super().make_context(info_name, args, parent=parent, **extra)
 
+    def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]:
+        if not args and self.no_args_is_help:
+            # Attempt to load --env-file and --app early in case they
+            # were given as env vars. Otherwise no_args_is_help will not
+            # see commands from app.cli.
+            _env_file_option.handle_parse_result(ctx, {}, [])
+            _app_option.handle_parse_result(ctx, {}, [])
+
+        return super().parse_args(ctx, args)
+
 
 def _path_is_ancestor(path, other):
     """Take ``other`` and remove the length of ``path`` from it. Then join it
@@ -578,7 +722,7 @@ def _path_is_ancestor(path, other):
     return os.path.join(path, other[len(path) :].lstrip(os.sep)) == other
 
 
-def load_dotenv(path=None):
+def load_dotenv(path: str | os.PathLike | None = None) -> bool:
     """Load "dotenv" files in order of precedence to set environment variables.
 
     If an env var is already set it is not overwritten, so earlier files in the
@@ -591,13 +735,17 @@ def load_dotenv(path=None):
     :param path: Load the file at this location instead of searching.
     :return: ``True`` if a file was loaded.
 
-    .. versionchanged:: 1.1.0
-        Returns ``False`` when python-dotenv is not installed, or when
-        the given path isn't a file.
+    .. versionchanged:: 2.0
+        The current directory is not changed to the location of the
+        loaded file.
 
     .. versionchanged:: 2.0
         When loading the env files, set the default encoding to UTF-8.
 
+    .. versionchanged:: 1.1.0
+        Returns ``False`` when python-dotenv is not installed, or when
+        the given path isn't a file.
+
     .. versionadded:: 1.0
     """
     try:
@@ -613,15 +761,15 @@ def load_dotenv(path=None):
 
         return False
 
-    # if the given path specifies the actual file then return True,
-    # else False
+    # Always return after attempting to load a given path, don't load
+    # the default files.
     if path is not None:
         if os.path.isfile(path):
             return dotenv.load_dotenv(path, encoding="utf-8")
 
         return False
 
-    new_dir = None
+    loaded = False
 
     for name in (".env", ".flaskenv"):
         path = dotenv.find_dotenv(name, usecwd=True)
@@ -629,12 +777,10 @@ def load_dotenv(path=None):
         if not path:
             continue
 
-        if new_dir is None:
-            new_dir = os.path.dirname(path)
-
         dotenv.load_dotenv(path, encoding="utf-8")
+        loaded = True
 
-    return new_dir is not None  # at least one file was located and loaded
+    return loaded  # True if at least one file was located and loaded.
 
 
 def show_server_banner(env, debug, app_import_path, eager_loading):
@@ -837,9 +983,10 @@ def run_command(
     This server is for development purposes only. It does not provide
     the stability, security, or performance of production WSGI servers.
 
-    The reloader and debugger are enabled by default if
-    FLASK_ENV=development or FLASK_DEBUG=1.
+    The reloader and debugger are enabled by default with the
+    '--env development' or '--debug' options.
     """
+    app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)
     debug = get_debug_flag()
 
     if reload is None:
@@ -849,7 +996,6 @@ def run_command(
         debugger = debug
 
     show_server_banner(get_env(), debug, info.app_import_path, eager_loading)
-    app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)
 
     from werkzeug.serving import run_simple
 
@@ -971,19 +1117,10 @@ cli = FlaskGroup(
     help="""\
 A general utility script for Flask applications.
 
-Provides commands from Flask, extensions, and the application. Loads the
-application defined in the FLASK_APP environment variable, or from a wsgi.py
-file. Setting the FLASK_ENV environment variable to 'development' will enable
-debug mode.
-
-\b
-  {prefix}{cmd} FLASK_APP=hello.py
-  {prefix}{cmd} FLASK_ENV=development
-  {prefix}flask run
-""".format(
-        cmd="export" if os.name == "posix" else "set",
-        prefix="$ " if os.name == "posix" else "> ",
-    ),
+An application to load must be given with the '--app' option,
+'FLASK_APP' environment variable, or with a 'wsgi.py' or 'app.py' file
+in the current directory.
+""",
 )
 
 
diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index 3b61635c..d1a84b9c 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -48,9 +48,9 @@ def get_debug_flag() -> bool:
 
 
 def get_load_dotenv(default: bool = True) -> bool:
-    """Get whether the user has disabled loading dotenv files by setting
-    :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load the
-    files.
+    """Get whether the user has disabled loading default dotenv files by
+    setting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load
+    the files.
 
     :param default: What to return if the env var isn't set.
     """

--------------------------------------------------------------------------------
Git show output for commit 9c50b8fc1ca160803f7368fc44f12591da856fd4:
commit 9c50b8fc1ca160803f7368fc44f12591da856fd4
Author: David Lord <davidism@gmail.com>
Date:   Mon Jun 13 06:08:45 2022 -0700

    fix formatting

diff --git a/docs/deploying/eventlet.rst b/docs/deploying/eventlet.rst
index 8842ce05..243be5eb 100644
--- a/docs/deploying/eventlet.rst
+++ b/docs/deploying/eventlet.rst
@@ -44,7 +44,7 @@ Running
 -------
 
 To use eventlet to serve your application, write a script that imports
-its ```wsgi.server``, as well as your app or app factory.
+its ``wsgi.server``, as well as your app or app factory.
 
 .. code-block:: python
     :caption: ``wsgi.py``

--------------------------------------------------------------------------------
Git show output for commit 3ba37d2afe6511c3f3153248f7342174bea5b131:
commit 3ba37d2afe6511c3f3153248f7342174bea5b131
Author: David Lord <davidism@gmail.com>
Date:   Mon Jun 6 08:24:05 2022 -0700

    fix uninstalled package tests under tox

diff --git a/src/flask/scaffold.py b/src/flask/scaffold.py
index 147d9827..80084a19 100644
--- a/src/flask/scaffold.py
+++ b/src/flask/scaffold.py
@@ -1,5 +1,6 @@
 import importlib.util
 import os
+import pathlib
 import pkgutil
 import sys
 import typing as t
@@ -780,6 +781,15 @@ def _matching_loader_thinks_module_is_package(loader, mod_name):
     )
 
 
+def _path_is_relative_to(path: pathlib.PurePath, base: str) -> bool:
+    # Path.is_relative_to doesn't exist until Python 3.9
+    try:
+        path.relative_to(base)
+        return True
+    except ValueError:
+        return False
+
+
 def _find_package_path(import_name):
     """Find the path that contains the package or module."""
     root_mod_name, _, _ = import_name.partition(".")
@@ -802,13 +812,13 @@ def _find_package_path(import_name):
             package_spec = importlib.util.find_spec(import_name)
             if package_spec is not None and package_spec.submodule_search_locations:
                 # Pick the path in the namespace that contains the submodule.
-                package_path = os.path.commonpath(
-                    package_spec.submodule_search_locations
+                package_path = pathlib.Path(
+                    os.path.commonpath(package_spec.submodule_search_locations)
                 )
                 search_locations = (
                     location
                     for location in root_spec.submodule_search_locations
-                    if package_path.startswith(location)
+                    if _path_is_relative_to(package_path, location)
                 )
             else:
                 # Pick the first path.
@@ -865,7 +875,7 @@ def find_package(import_name: str):
     py_prefix = os.path.abspath(sys.prefix)
 
     # installed to the system
-    if package_path.startswith(py_prefix):
+    if _path_is_relative_to(pathlib.PurePath(package_path), py_prefix):
         return py_prefix, package_path
 
     site_parent, site_folder = os.path.split(package_path)
diff --git a/tests/test_instance_config.py b/tests/test_instance_config.py
index d7fe6191..53e98042 100644
--- a/tests/test_instance_config.py
+++ b/tests/test_instance_config.py
@@ -15,7 +15,6 @@ def test_explicit_instance_paths(modules_tmpdir):
     assert app.instance_path == str(modules_tmpdir)
 
 
-@pytest.mark.xfail(reason="weird interaction with tox")
 def test_main_module_paths(modules_tmpdir, purge_module):
     app = modules_tmpdir.join("main_app.py")
     app.write('import flask\n\napp = flask.Flask("__main__")')
@@ -27,7 +26,6 @@ def test_main_module_paths(modules_tmpdir, purge_module):
     assert app.instance_path == os.path.join(here, "instance")
 
 
-@pytest.mark.xfail(reason="weird interaction with tox")
 def test_uninstalled_module_paths(modules_tmpdir, purge_module):
     app = modules_tmpdir.join("config_module_app.py").write(
         "import os\n"
@@ -42,7 +40,6 @@ def test_uninstalled_module_paths(modules_tmpdir, purge_module):
     assert app.instance_path == str(modules_tmpdir.join("instance"))
 
 
-@pytest.mark.xfail(reason="weird interaction with tox")
 def test_uninstalled_package_paths(modules_tmpdir, purge_module):
     app = modules_tmpdir.mkdir("config_package_app")
     init = app.join("__init__.py")
diff --git a/tox.ini b/tox.ini
index 077d66f2..ee4d40f6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -9,6 +9,7 @@ envlist =
 skip_missing_interpreters = true
 
 [testenv]
+envtmpdir = {toxworkdir}/tmp/{envname}
 deps =
     -r requirements/tests.txt
     min: -r requirements/tests-pallets-min.txt

--------------------------------------------------------------------------------
Git show output for commit 5d31ce1031e8ca24dc908c319567a76110edd87e:
commit 5d31ce1031e8ca24dc908c319567a76110edd87e
Author: Nick Kocharhook <nick@kocharhook.com>
Date:   Wed Jun 1 12:16:21 2022 -0700

    Fix incorrect references to query in testing doc
    
    The [EnvironBuilder doc](https://werkzeug.palletsprojects.com/en/2.1.x/test/#werkzeug.test.EnvironBuilder) shows that the correct name for the keyword argument is `query_string`, not `query`. Using `query` results in an error.
    
    I've fixed the two places this appears in the testing doc.

diff --git a/docs/testing.rst b/docs/testing.rst
index 6f9d6ee1..8545bd39 100644
--- a/docs/testing.rst
+++ b/docs/testing.rst
@@ -92,7 +92,7 @@ The ``client`` has methods that match the common HTTP request methods,
 such as ``client.get()`` and ``client.post()``. They take many arguments
 for building the request; you can find the full documentation in
 :class:`~werkzeug.test.EnvironBuilder`. Typically you'll use ``path``,
-``query``, ``headers``, and ``data`` or ``json``.
+``query_string``, ``headers``, and ``data`` or ``json``.
 
 To make a request, call the method the request should use with the path
 to the route to test. A :class:`~werkzeug.test.TestResponse` is returned
@@ -108,9 +108,9 @@ provides ``response.text``, or use ``response.get_data(as_text=True)``.
         assert b"<h2>Hello, World!</h2>" in response.data
 
 
-Pass a dict ``query={"key": "value", ...}`` to set arguments in the
-query string (after the ``?`` in the URL). Pass a dict ``headers={}``
-to set request headers.
+Pass a dict ``query_string={"key": "value", ...}`` to set arguments in
+the query string (after the ``?`` in the URL). Pass a dict
+``headers={}`` to set request headers.
 
 To send a request body in a POST or PUT request, pass a value to
 ``data``. If raw bytes are passed, that exact body is used. Usually,

--------------------------------------------------------------------------------
Git show output for commit a52a7db6c9760adba6ceefa038b6ab69c207d7f9:
commit a52a7db6c9760adba6ceefa038b6ab69c207d7f9
Merge: ca8e6217 e044b000
Author: David Lord <davidism@gmail.com>
Date:   Mon May 23 09:12:45 2022 -0700

    Merge pull request #4577 from hallacy/hallacy/fix_4571
    
    update setupmethod behavior


--------------------------------------------------------------------------------
Git show output for commit 127df57a06ec7b1a8b698206b1bdefc93248de5a:
commit 127df57a06ec7b1a8b698206b1bdefc93248de5a
Merge: f976d5bb 1e5dd430
Author: David Lord <davidism@gmail.com>
Date:   Tue May 3 11:56:11 2022 -0600

    Merge pull request #4560 from qingpeng9802/fix-old-behavior


--------------------------------------------------------------------------------
Git show output for commit dba2be9311d2abfd1b973c6bb578f416ee771fda:
commit dba2be9311d2abfd1b973c6bb578f416ee771fda
Merge: 69f71b4d eede1a36
Author: David Lord <davidism@gmail.com>
Date:   Sun Apr 24 09:58:01 2022 -0700

    Merge pull request #4534 from rzimmerdev/main
    
    Adapted input parameters type restriction for json.loads function - fixes #4519


--------------------------------------------------------------------------------
Git show output for commit eede1a3685e21deaeb6686e9de9b76a73b6a510c:
commit eede1a3685e21deaeb6686e9de9b76a73b6a510c
Author: Rafael Zimmer <rzimmerdev@gmail.com>
Date:   Tue Apr 12 13:17:24 2022 -0300

    fix annotation for json.loads

diff --git a/CHANGES.rst b/CHANGES.rst
index 945237cd..0d96a61e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,6 +5,9 @@ Version 2.1.2
 
 Unreleased
 
+-   Fix type annotation for ``json.loads``, it accepts str or bytes.
+    :issue:`4519`
+
 
 Version 2.1.1
 -------------
diff --git a/src/flask/json/__init__.py b/src/flask/json/__init__.py
index 43c018e7..edc9793d 100644
--- a/src/flask/json/__init__.py
+++ b/src/flask/json/__init__.py
@@ -153,7 +153,11 @@ def dump(
     _json.dump(obj, fp, **kwargs)
 
 
-def loads(s: str, app: t.Optional["Flask"] = None, **kwargs: t.Any) -> t.Any:
+def loads(
+    s: t.Union[str, bytes],
+    app: t.Optional["Flask"] = None,
+    **kwargs: t.Any,
+) -> t.Any:
     """Deserialize an object from a string of JSON.
 
     Takes the same arguments as the built-in :func:`json.loads`, with

--------------------------------------------------------------------------------
Git show output for commit 5c0b9a6af334dcbb2814f4e004be2b2c8a389363:
commit 5c0b9a6af334dcbb2814f4e004be2b2c8a389363
Merge: b9729a08 e3c014f9
Author: David Lord <davidism@gmail.com>
Date:   Fri Apr 8 11:02:45 2022 -0700

    Merge pull request #4526 from lbm98/docfix


--------------------------------------------------------------------------------
Git show output for commit cd4ab005a92ff996e9104c92017fe1e6daeccd46:
commit cd4ab005a92ff996e9104c92017fe1e6daeccd46
Author: David Lord <davidism@gmail.com>
Date:   Mon Mar 28 11:39:24 2022 -0700

    fix typing

diff --git a/src/flask/wrappers.py b/src/flask/wrappers.py
index bf31fc56..7153876b 100644
--- a/src/flask/wrappers.py
+++ b/src/flask/wrappers.py
@@ -123,7 +123,7 @@ class Request(RequestBase):
 
             attach_enctype_error_multidict(self)
 
-    def on_json_loading_failed(self, e: ValueError) -> t.Any:
+    def on_json_loading_failed(self, e: t.Optional[ValueError]) -> t.Any:
         try:
             return super().on_json_loading_failed(e)
         except BadRequest as e:

--------------------------------------------------------------------------------
Git show output for commit 41aaaf7fa07f28ef15fd1d343142e96440889a8b:
commit 41aaaf7fa07f28ef15fd1d343142e96440889a8b
Author: David Lord <davidism@gmail.com>
Date:   Fri Mar 25 12:24:31 2022 -0700

    clean up unused function from prefixed_env pr

diff --git a/src/flask/config.py b/src/flask/config.py
index a266ea1d..7b6a137a 100644
--- a/src/flask/config.py
+++ b/src/flask/config.py
@@ -7,13 +7,6 @@ import typing as t
 from werkzeug.utils import import_string
 
 
-def _json_loads(raw: t.Union[str, bytes]) -> t.Any:
-    try:
-        return json.loads(raw)
-    except json.JSONDecodeError:
-        return raw
-
-
 class ConfigAttribute:
     """Makes an attribute forward to the config"""
 

--------------------------------------------------------------------------------
Git show output for commit 4eb5e9455b2a8f15f3dc5065a47f8e43ac47e539:
commit 4eb5e9455b2a8f15f3dc5065a47f8e43ac47e539
Author: David Lord <davidism@gmail.com>
Date:   Fri Mar 25 11:00:32 2022 -0700

    more from_prefixed_env features
    
    * support nested dict access with "__" separator
    * don't specify separator in prefix
    * catch exceptions for any loads function

diff --git a/CHANGES.rst b/CHANGES.rst
index e471d6a8..bab6690b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -55,6 +55,10 @@ Unreleased
 -   From Werkzeug, for redirect responses the ``Location`` header URL
     will remain relative, and exclude the scheme and domain, by default.
     :pr:`4496`
+-   Add ``Config.from_prefixed_env()`` to load config values from
+    environment variables that start with ``FLASK_`` or another prefix.
+    This parses values as JSON by default, and allows setting keys in
+    nested dicts. :pr:`4479`
 
 
 Version 2.0.3
diff --git a/docs/config.rst b/docs/config.rst
index 9e66e01e..c25bf83f 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -521,7 +521,8 @@ configuration values directly from the environment. Flask can be
 instructed to load all environment variables starting with a specific
 prefix into the config using :meth:`~flask.Config.from_prefixed_env`.
 
-Environment variables can be set in the shell before starting the server:
+Environment variables can be set in the shell before starting the
+server:
 
 .. tabs::
 
@@ -561,30 +562,43 @@ Environment variables can be set in the shell before starting the server:
          > flask run
           * Running on http://127.0.0.1:5000/
 
-The variables can then be loaded and accessed via the config with a
-key equal to the environment variable name without the prefix i.e.
+The variables can then be loaded and accessed via the config with a key
+equal to the environment variable name without the prefix i.e.
 
 .. code-block:: python
 
     app.config.from_prefixed_env()
     app.config["SECRET_KEY"]  # Is "5f352379324c22463451387a0aec5d2f"
 
-The prefix is ``FLASK_`` by default, however it is an configurable via
-the ``prefix`` argument of :meth:`~flask.Config.from_prefixed_env`.
+The prefix is ``FLASK_`` by default. This is configurable via the
+``prefix`` argument of :meth:`~flask.Config.from_prefixed_env`.
 
-Whilst the value of any environment variable is a string, it will be
-parsed before being placed into the flask config. By default the
-parsing is done by json.loads, however this is configurable via the
-``loads`` argument of :meth:`~flask.Config.from_prefixed_env`.
+Values will be parsed to attempt to convert them to a more specific type
+than strings. By default :func:`json.loads` is used, so any valid JSON
+value is possible, including lists and dicts. This is configurable via
+the ``loads`` argument of :meth:`~flask.Config.from_prefixed_env`.
 
-Notice that any value besides an empty string will be interpreted as a boolean
-``True`` value in Python, which requires care if an environment explicitly sets
-values intended to be ``False``.
+When adding a boolean value with the default JSON parsing, only "true"
+and "false", lowercase, are valid values. Keep in mind that any
+non-empty string is considered ``True`` by Python.
 
-Make sure to load the configuration very early on, so that extensions have the
-ability to access the configuration when starting up.  There are other methods
-on the config object as well to load from individual files.  For a complete
-reference, read the :class:`~flask.Config` class documentation.
+It is possible to set keys in nested dictionaries by separating the
+keys with double underscore (``__``). Any intermediate keys that don't
+exist on the parent dict will be initialized to an empty dict.
+
+.. code-block:: text
+
+    $ export FLASK_MYAPI__credentials__username=user123
+
+.. code-block:: python
+
+    app.config["MYAPI"]["credentials"]["username"]  # Is "user123"
+
+For even more config loading features, including merging, try a
+dedicated library such as Dynaconf_, which includes integration with
+Flask.
+
+.. _Dynaconf: https://www.dynaconf.com/
 
 
 Configuration Best Practices
@@ -604,6 +618,10 @@ that experience:
     limit yourself to request-only accesses to the configuration you can
     reconfigure the object later on as needed.
 
+3.  Make sure to load the configuration very early on, so that
+    extensions can access the configuration when calling ``init_app``.
+
+
 .. _config-dev-prod:
 
 Development / Production
diff --git a/src/flask/config.py b/src/flask/config.py
index c02db272..a266ea1d 100644
--- a/src/flask/config.py
+++ b/src/flask/config.py
@@ -78,7 +78,7 @@ class Config(dict):
     """
 
     def __init__(self, root_path: str, defaults: t.Optional[dict] = None) -> None:
-        dict.__init__(self, defaults or {})
+        super().__init__(defaults or {})
         self.root_path = root_path
 
     def from_envvar(self, variable_name: str, silent: bool = False) -> bool:
@@ -106,42 +106,68 @@ class Config(dict):
         return self.from_pyfile(rv, silent=silent)
 
     def from_prefixed_env(
-        self,
-        prefix: str = "FLASK_",
-        *,
-        loads: t.Callable[[t.Union[str, bytes]], t.Any] = _json_loads,
+        self, prefix: str = "FLASK", *, loads: t.Callable[[str], t.Any] = json.loads
     ) -> bool:
-        """Updates the config from environment variables with the prefix.
-
-        Calling this method will result in every environment variable
-        starting with **prefix** being placed into the configuration
-        without the **prefix**. The prefix is configurable as an
-        argument. Note that this method updates the existing config.
+        """Load any environment variables that start with ``FLASK_``,
+        dropping the prefix from the env key for the config key. Values
+        are passed through a loading function to attempt to convert them
+        to more specific types than strings.
 
-        For example if there is an environment variable
-        ``FLASK_SECRET_KEY`` with value ``secretly`` and the prefix is
-        ``FLASK_`` the config will contain the key ``SECRET_KEY`` with
-        the value ``secretly`` after calling this method.
+        Keys are loaded in :func:`sorted` order.
 
-        The value of the environment variable will be passed to the
-        **loads** parameter before being placed into the config. By
-        default **loads** utilises the stdlib json.loads to parse the
-        value, falling back to the value itself on parsing error.
+        The default loading function attempts to parse values as any
+        valid JSON type, including dicts and lists.
 
-        :param loads: A callable that takes a str (or bytes) returns
-            the parsed value.
-        :return: Always returns ``True``.
+        Specific items in nested dicts can be set by separating the
+        keys with double underscores (``__``). If an intermediate key
+        doesn't exist, it will be initialized to an empty dict.
 
-        .. versionadded:: 2.1.0
+        :param prefix: Load env vars that start with this prefix,
+            separated with an underscore (``_``).
+        :param loads: Pass each string value to this function and use
+            the returned value as the config value. If any error is
+            raised it is ignored and the value remains a string. The
+            default is :func:`json.loads`.
 
+        .. versionadded:: 2.1
         """
-        mapping = {}
-        for raw_key, value in os.environ.items():
-            if raw_key.startswith(prefix):
-                key = raw_key[len(prefix) :]  # Use removeprefix with Python 3.9
-                mapping[key] = loads(value)
+        prefix = f"{prefix}_"
+        len_prefix = len(prefix)
+
+        for key in sorted(os.environ):
+            if not key.startswith(prefix):
+                continue
+
+            value = os.environ[key]
+
+            try:
+                value = loads(value)
+            except Exception:
+                # Keep the value as a string if loading failed.
+                pass
+
+            # Change to key.removeprefix(prefix) on Python >= 3.9.
+            key = key[len_prefix:]
 
-        return self.from_mapping(mapping)
+            if "__" not in key:
+                # A non-nested key, set directly.
+                self[key] = value
+                continue
+
+            # Traverse nested dictionaries with keys separated by "__".
+            current = self
+            *parts, tail = key.split("__")
+
+            for part in parts:
+                # If an intermediate dict does not exist, create it.
+                if part not in current:
+                    current[part] = {}
+
+                current = current[part]
+
+            current[tail] = value
+
+        return True
 
     def from_pyfile(self, filename: str, silent: bool = False) -> bool:
         """Updates the values in the config from a Python file.  This function
diff --git a/tests/test_config.py b/tests/test_config.py
index e2d5cd63..22aacd36 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -38,28 +38,54 @@ def test_config_from_file():
     common_object_test(app)
 
 
-def test_config_from_prefixed_env(monkeypatch):
+def test_from_prefixed_env(monkeypatch):
+    monkeypatch.setenv("FLASK_STRING", "value")
+    monkeypatch.setenv("FLASK_BOOL", "true")
+    monkeypatch.setenv("FLASK_INT", "1")
+    monkeypatch.setenv("FLASK_FLOAT", "1.2")
+    monkeypatch.setenv("FLASK_LIST", "[1, 2]")
+    monkeypatch.setenv("FLASK_DICT", '{"k": "v"}')
+    monkeypatch.setenv("NOT_FLASK_OTHER", "other")
+
     app = flask.Flask(__name__)
-    monkeypatch.setenv("FLASK_A", "A value")
-    monkeypatch.setenv("FLASK_B", "true")
-    monkeypatch.setenv("FLASK_C", "1")
-    monkeypatch.setenv("FLASK_D", "1.2")
-    monkeypatch.setenv("NOT_FLASK_A", "Another value")
     app.config.from_prefixed_env()
-    assert app.config["A"] == "A value"
-    assert app.config["B"] is True
-    assert app.config["C"] == 1
-    assert app.config["D"] == 1.2
-    assert "Another value" not in app.config.items()
 
+    assert app.config["STRING"] == "value"
+    assert app.config["BOOL"] is True
+    assert app.config["INT"] == 1
+    assert app.config["FLOAT"] == 1.2
+    assert app.config["LIST"] == [1, 2]
+    assert app.config["DICT"] == {"k": "v"}
+    assert "OTHER" not in app.config
+
+
+def test_from_prefixed_env_custom_prefix(monkeypatch):
+    monkeypatch.setenv("FLASK_A", "a")
+    monkeypatch.setenv("NOT_FLASK_A", "b")
+
+    app = flask.Flask(__name__)
+    app.config.from_prefixed_env("NOT_FLASK")
+
+    assert app.config["A"] == "b"
+
+
+def test_from_prefixed_env_nested(monkeypatch):
+    monkeypatch.setenv("FLASK_EXIST__ok", "other")
+    monkeypatch.setenv("FLASK_EXIST__inner__ik", "2")
+    monkeypatch.setenv("FLASK_EXIST__new__more", '{"k": false}')
+    monkeypatch.setenv("FLASK_NEW__K", "v")
 
-def test_config_from_custom_prefixed_env(monkeypatch):
     app = flask.Flask(__name__)
-    monkeypatch.setenv("FLASK_A", "A value")
-    monkeypatch.setenv("NOT_FLASK_A", "Another value")
-    app.config.from_prefixed_env("NOT_FLASK_")
-    assert app.config["A"] == "Another value"
-    assert "A value" not in app.config.items()
+    app.config["EXIST"] = {"ok": "value", "flag": True, "inner": {"ik": 1}}
+    app.config.from_prefixed_env()
+
+    assert app.config["EXIST"] == {
+        "ok": "other",
+        "flag": True,
+        "inner": {"ik": 2},
+        "new": {"more": {"k": False}},
+    }
+    assert app.config["NEW"] == {"K": "v"}
 
 
 def test_config_from_mapping():

--------------------------------------------------------------------------------
Git show output for commit 08a283af5efc999d4f1e29275317a5c0c05c6f7b:
commit 08a283af5efc999d4f1e29275317a5c0c05c6f7b
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Tue Mar 8 21:40:48 2022 +0000

    Allow loading of environment variables into the config
    
    This new method will pick out any environment variables with a certain
    prefix and place them into the config named without the prefix. This
    makes it easy to use environment variables to configure the app as is
    now more popular than when Flask started.
    
    The prefix should ensure that the environment isn't polluted and the
    config isn't polluted by environment variables.
    
    I've followed the dynaconf convention of trying to parse the
    environment variable and then falling back to the raw value if parsing
    fails.

diff --git a/docs/config.rst b/docs/config.rst
index 0b86674d..9e66e01e 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -515,9 +515,11 @@ Or from a JSON file:
 Configuring from Environment Variables
 --------------------------------------
 
-In addition to pointing to configuration files using environment variables, you
-may find it useful (or necessary) to control your configuration values directly
-from the environment.
+In addition to pointing to configuration files using environment
+variables, you may find it useful (or necessary) to control your
+configuration values directly from the environment. Flask can be
+instructed to load all environment variables starting with a specific
+prefix into the config using :meth:`~flask.Config.from_prefixed_env`.
 
 Environment variables can be set in the shell before starting the server:
 
@@ -527,8 +529,8 @@ Environment variables can be set in the shell before starting the server:
 
       .. code-block:: text
 
-         $ export SECRET_KEY="5f352379324c22463451387a0aec5d2f"
-         $ export MAIL_ENABLED=false
+         $ export FLASK_SECRET_KEY="5f352379324c22463451387a0aec5d2f"
+         $ export FLASK_MAIL_ENABLED=false
          $ flask run
           * Running on http://127.0.0.1:5000/
 
@@ -536,8 +538,8 @@ Environment variables can be set in the shell before starting the server:
 
       .. code-block:: text
 
-         $ set -x SECRET_KEY "5f352379324c22463451387a0aec5d2f"
-         $ set -x MAIL_ENABLED false
+         $ set -x FLASK_SECRET_KEY "5f352379324c22463451387a0aec5d2f"
+         $ set -x FLASK_MAIL_ENABLED false
          $ flask run
           * Running on http://127.0.0.1:5000/
 
@@ -545,8 +547,8 @@ Environment variables can be set in the shell before starting the server:
 
       .. code-block:: text
 
-         > set SECRET_KEY="5f352379324c22463451387a0aec5d2f"
-         > set MAIL_ENABLED=false
+         > set FLASK_SECRET_KEY="5f352379324c22463451387a0aec5d2f"
+         > set FLASK_MAIL_ENABLED=false
          > flask run
           * Running on http://127.0.0.1:5000/
 
@@ -554,27 +556,26 @@ Environment variables can be set in the shell before starting the server:
 
       .. code-block:: text
 
-         > $env:SECRET_KEY = "5f352379324c22463451387a0aec5d2f"
-         > $env:MAIL_ENABLED = "false"
+         > $env:FLASK_SECRET_KEY = "5f352379324c22463451387a0aec5d2f"
+         > $env:FLASK_MAIL_ENABLED = "false"
          > flask run
           * Running on http://127.0.0.1:5000/
 
-While this approach is straightforward to use, it is important to remember that
-environment variables are strings -- they are not automatically deserialized
-into Python types.
+The variables can then be loaded and accessed via the config with a
+key equal to the environment variable name without the prefix i.e.
 
-Here is an example of a configuration file that uses environment variables::
-
-    import os
-
-    _mail_enabled = os.environ.get("MAIL_ENABLED", default="true")
-    MAIL_ENABLED = _mail_enabled.lower() in {"1", "t", "true"}
+.. code-block:: python
 
-    SECRET_KEY = os.environ.get("SECRET_KEY")
+    app.config.from_prefixed_env()
+    app.config["SECRET_KEY"]  # Is "5f352379324c22463451387a0aec5d2f"
 
-    if not SECRET_KEY:
-        raise ValueError("No SECRET_KEY set for Flask application")
+The prefix is ``FLASK_`` by default, however it is an configurable via
+the ``prefix`` argument of :meth:`~flask.Config.from_prefixed_env`.
 
+Whilst the value of any environment variable is a string, it will be
+parsed before being placed into the flask config. By default the
+parsing is done by json.loads, however this is configurable via the
+``loads`` argument of :meth:`~flask.Config.from_prefixed_env`.
 
 Notice that any value besides an empty string will be interpreted as a boolean
 ``True`` value in Python, which requires care if an environment explicitly sets
diff --git a/src/flask/config.py b/src/flask/config.py
index 9657edc8..c02db272 100644
--- a/src/flask/config.py
+++ b/src/flask/config.py
@@ -1,4 +1,5 @@
 import errno
+import json
 import os
 import types
 import typing as t
@@ -6,6 +7,13 @@ import typing as t
 from werkzeug.utils import import_string
 
 
+def _json_loads(raw: t.Union[str, bytes]) -> t.Any:
+    try:
+        return json.loads(raw)
+    except json.JSONDecodeError:
+        return raw
+
+
 class ConfigAttribute:
     """Makes an attribute forward to the config"""
 
@@ -97,6 +105,44 @@ class Config(dict):
             )
         return self.from_pyfile(rv, silent=silent)
 
+    def from_prefixed_env(
+        self,
+        prefix: str = "FLASK_",
+        *,
+        loads: t.Callable[[t.Union[str, bytes]], t.Any] = _json_loads,
+    ) -> bool:
+        """Updates the config from environment variables with the prefix.
+
+        Calling this method will result in every environment variable
+        starting with **prefix** being placed into the configuration
+        without the **prefix**. The prefix is configurable as an
+        argument. Note that this method updates the existing config.
+
+        For example if there is an environment variable
+        ``FLASK_SECRET_KEY`` with value ``secretly`` and the prefix is
+        ``FLASK_`` the config will contain the key ``SECRET_KEY`` with
+        the value ``secretly`` after calling this method.
+
+        The value of the environment variable will be passed to the
+        **loads** parameter before being placed into the config. By
+        default **loads** utilises the stdlib json.loads to parse the
+        value, falling back to the value itself on parsing error.
+
+        :param loads: A callable that takes a str (or bytes) returns
+            the parsed value.
+        :return: Always returns ``True``.
+
+        .. versionadded:: 2.1.0
+
+        """
+        mapping = {}
+        for raw_key, value in os.environ.items():
+            if raw_key.startswith(prefix):
+                key = raw_key[len(prefix) :]  # Use removeprefix with Python 3.9
+                mapping[key] = loads(value)
+
+        return self.from_mapping(mapping)
+
     def from_pyfile(self, filename: str, silent: bool = False) -> bool:
         """Updates the values in the config from a Python file.  This function
         behaves as if the file was imported as module with the
diff --git a/tests/test_config.py b/tests/test_config.py
index a3cd3d25..e2d5cd63 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -38,6 +38,30 @@ def test_config_from_file():
     common_object_test(app)
 
 
+def test_config_from_prefixed_env(monkeypatch):
+    app = flask.Flask(__name__)
+    monkeypatch.setenv("FLASK_A", "A value")
+    monkeypatch.setenv("FLASK_B", "true")
+    monkeypatch.setenv("FLASK_C", "1")
+    monkeypatch.setenv("FLASK_D", "1.2")
+    monkeypatch.setenv("NOT_FLASK_A", "Another value")
+    app.config.from_prefixed_env()
+    assert app.config["A"] == "A value"
+    assert app.config["B"] is True
+    assert app.config["C"] == 1
+    assert app.config["D"] == 1.2
+    assert "Another value" not in app.config.items()
+
+
+def test_config_from_custom_prefixed_env(monkeypatch):
+    app = flask.Flask(__name__)
+    monkeypatch.setenv("FLASK_A", "A value")
+    monkeypatch.setenv("NOT_FLASK_A", "Another value")
+    app.config.from_prefixed_env("NOT_FLASK_")
+    assert app.config["A"] == "Another value"
+    assert "A value" not in app.config.items()
+
+
 def test_config_from_mapping():
     app = flask.Flask(__name__)
     app.config.from_mapping({"SECRET_KEY": "config", "TEST_KEY": "foo"})

--------------------------------------------------------------------------------
Git show output for commit ce7b884b73621b59ba184aa89b67d5c5780f50eb:
commit ce7b884b73621b59ba184aa89b67d5c5780f50eb
Merge: 598afa00 6578b493
Author: David Lord <davidism@gmail.com>
Date:   Wed Mar 23 09:18:20 2022 -0700

    Merge pull request #4492 from pallets/debug-messages
    
    update some debug message behavior


--------------------------------------------------------------------------------
Git show output for commit c9a1f7ad6545c9cc27c41c385f1d4cd9c7cf1a98:
commit c9a1f7ad6545c9cc27c41c385f1d4cd9c7cf1a98
Author: David Lord <davidism@gmail.com>
Date:   Wed Mar 23 08:25:22 2022 -0700

    don't intercept 307/308 routing redirects
    
    These don't change the request body, so the debug error is no longer relevant.

diff --git a/src/flask/app.py b/src/flask/app.py
index 3a4df366..348bc7f7 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -1457,17 +1457,26 @@ class Flask(Scaffold):
         )
 
     def raise_routing_exception(self, request: Request) -> "te.NoReturn":
-        """Exceptions that are recording during routing are reraised with
-        this method.  During debug we are not reraising redirect requests
-        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising
-        a different error instead to help debug situations.
+        """Intercept routing exceptions and possibly do something else.
 
+        In debug mode, intercept a routing redirect and replace it with
+        an error if the body will be discarded.
+
+        With modern Werkzeug this shouldn't occur, since it now uses a
+        308 status which tells the browser to resend the method and
+        body.
+
+        .. versionchanged:: 2.1
+            Don't intercept 307 and 308 redirects.
+
+        :meta private:
         :internal:
         """
         if (
             not self.debug
             or not isinstance(request.routing_exception, RequestRedirect)
-            or request.method in ("GET", "HEAD", "OPTIONS")
+            or request.routing_exception.code in {307, 308}
+            or request.method in {"GET", "HEAD", "OPTIONS"}
         ):
             raise request.routing_exception  # type: ignore
 
diff --git a/src/flask/debughelpers.py b/src/flask/debughelpers.py
index 212f7d7e..2d95d2e9 100644
--- a/src/flask/debughelpers.py
+++ b/src/flask/debughelpers.py
@@ -41,35 +41,33 @@ class DebugFilesKeyError(KeyError, AssertionError):
 
 
 class FormDataRoutingRedirect(AssertionError):
-    """This exception is raised by Flask in debug mode if it detects a
-    redirect caused by the routing system when the request method is not
-    GET, HEAD or OPTIONS.  Reasoning: form data will be dropped.
+    """This exception is raised in debug mode if a routing redirect
+    would cause the browser to drop the method or body. This happens
+    when method is not GET, HEAD or OPTIONS and the status code is not
+    307 or 308.
     """
 
     def __init__(self, request):
         exc = request.routing_exception
         buf = [
-            f"A request was sent to this URL ({request.url}) but a"
-            " redirect was issued automatically by the routing system"
-            f" to {exc.new_url!r}."
+            f"A request was sent to '{request.url}', but routing issued"
+            f" a redirect to the canonical URL '{exc.new_url}'."
         ]
 
-        # In case just a slash was appended we can be extra helpful
-        if f"{request.base_url}/" == exc.new_url.split("?")[0]:
+        if f"{request.base_url}/" == exc.new_url.partition("?")[0]:
             buf.append(
-                "  The URL was defined with a trailing slash so Flask"
-                " will automatically redirect to the URL with the"
-                " trailing slash if it was accessed without one."
+                " The URL was defined with a trailing slash. Flask"
+                " will redirect to the URL with a trailing slash if it"
+                " was accessed without one."
             )
 
         buf.append(
-            "  Make sure to directly send your"
-            f" {request.method}-request to this URL since we can't make"
-            " browsers or HTTP clients redirect with form data reliably"
-            " or without user interaction."
+            " Send requests to the canonical URL, or use 307 or 308 for"
+            " routing redirects. Otherwise, browsers will drop form"
+            " data.\n\n"
+            "This exception is only raised in debug mode."
         )
-        buf.append("\n\nNote: this exception is only raised in debug mode")
-        AssertionError.__init__(self, "".join(buf).encode("utf-8"))
+        super().__init__("".join(buf))
 
 
 def attach_enctype_error_multidict(request):
diff --git a/tests/test_basic.py b/tests/test_basic.py
index c5b83c7c..2a177e9a 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -15,6 +15,7 @@ from werkzeug.exceptions import Forbidden
 from werkzeug.exceptions import NotFound
 from werkzeug.http import parse_date
 from werkzeug.routing import BuildError
+from werkzeug.routing import RequestRedirect
 
 import flask
 
@@ -1724,28 +1725,29 @@ def test_before_first_request_functions_concurrent(app, client):
     assert app.got_first_request
 
 
-def test_routing_redirect_debugging(app, client):
-    app.debug = True
-
+def test_routing_redirect_debugging(monkeypatch, app, client):
     @app.route("/foo/", methods=["GET", "POST"])
     def foo():
         return "success"
 
-    with client:
-        with pytest.raises(AssertionError) as e:
-            client.post("/foo", data={})
-        assert "http://localhost/foo/" in str(e.value)
-        assert "Make sure to directly send your POST-request to this URL" in str(
-            e.value
-        )
+    app.debug = False
+    rv = client.post("/foo", data={}, follow_redirects=True)
+    assert rv.data == b"success"
 
-        rv = client.get("/foo", data={}, follow_redirects=True)
-        assert rv.data == b"success"
+    app.debug = True
 
-    app.debug = False
     with client:
         rv = client.post("/foo", data={}, follow_redirects=True)
         assert rv.data == b"success"
+        rv = client.get("/foo", data={}, follow_redirects=True)
+        assert rv.data == b"success"
+
+    monkeypatch.setattr(RequestRedirect, "code", 301)
+
+    with client, pytest.raises(AssertionError) as e:
+        client.post("/foo", data={})
+
+    assert "canonical URL 'http://localhost/foo/'" in str(e.value)
 
 
 def test_route_decorator_custom_endpoint(app, client):

--------------------------------------------------------------------------------
Git show output for commit b707bf443afe856b77e09b7a41592f10d46e02df:
commit b707bf443afe856b77e09b7a41592f10d46e02df
Author: uedvt359 <54625981+uedvt359@users.noreply.github.com>
Date:   Tue Mar 15 10:22:38 2022 +0100

    Preserve HttpOnly flag when deleting session cookie
    
    fixes #4485

diff --git a/CHANGES.rst b/CHANGES.rst
index 4b962e58..fd46c84c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -45,6 +45,8 @@ Unreleased
 -   When using lazy loading (the default with the debugger), the Click
     context from the ``flask run`` command remains available in the
     loader thread. :issue:`4460`
+-   Deleting the session cookie uses the ``httponly`` flag.
+    :issue:`4485`
 
 
 Version 2.0.3
diff --git a/src/flask/sessions.py b/src/flask/sessions.py
index 20648dea..4e19270e 100644
--- a/src/flask/sessions.py
+++ b/src/flask/sessions.py
@@ -383,13 +383,19 @@ class SecureCookieSessionInterface(SessionInterface):
         path = self.get_cookie_path(app)
         secure = self.get_cookie_secure(app)
         samesite = self.get_cookie_samesite(app)
+        httponly = self.get_cookie_httponly(app)
 
         # If the session is modified to be empty, remove the cookie.
         # If the session is empty, return without setting the cookie.
         if not session:
             if session.modified:
                 response.delete_cookie(
-                    name, domain=domain, path=path, secure=secure, samesite=samesite
+                    name,
+                    domain=domain,
+                    path=path,
+                    secure=secure,
+                    samesite=samesite,
+                    httponly=httponly,
                 )
 
             return
@@ -401,7 +407,6 @@ class SecureCookieSessionInterface(SessionInterface):
         if not self.should_set_cookie(app, session):
             return
 
-        httponly = self.get_cookie_httponly(app)
         expires = self.get_expiration_time(app, session)
         val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore
         response.set_cookie(

--------------------------------------------------------------------------------
Git show output for commit 426a1e25b77e760b4f54bf94aee3e3617850569f:
commit 426a1e25b77e760b4f54bf94aee3e3617850569f
Author: David Lord <davidism@gmail.com>
Date:   Tue Feb 8 12:05:17 2022 -0800

    fix pytest 7 warnings

diff --git a/tests/test_basic.py b/tests/test_basic.py
index 2cb96794..0188cc54 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -3,6 +3,7 @@ import re
 import sys
 import time
 import uuid
+import warnings
 import weakref
 from datetime import datetime
 from platform import python_implementation
@@ -1527,8 +1528,11 @@ def test_server_name_subdomain():
     rv = client.get("/", "https://dev.local")
     assert rv.data == b"default"
 
-    # suppress Werkzeug 1.0 warning about name mismatch
-    with pytest.warns(None):
+    # suppress Werkzeug 0.15 warning about name mismatch
+    with warnings.catch_warnings():
+        warnings.filterwarnings(
+            "ignore", "Current server name", UserWarning, "flask.app"
+        )
         rv = client.get("/", "http://foo.localhost")
         assert rv.status_code == 404
 
@@ -1895,7 +1899,10 @@ def test_subdomain_matching_other_name(matching):
         return "", 204
 
     # suppress Werkzeug 0.15 warning about name mismatch
-    with pytest.warns(None):
+    with warnings.catch_warnings():
+        warnings.filterwarnings(
+            "ignore", "Current server name", UserWarning, "flask.app"
+        )
         # ip address can't match name
         rv = client.get("/", "http://127.0.0.1:3000/")
         assert rv.status_code == 404 if matching else 204
diff --git a/tests/test_reqctx.py b/tests/test_reqctx.py
index d18cb509..1a478917 100644
--- a/tests/test_reqctx.py
+++ b/tests/test_reqctx.py
@@ -1,3 +1,5 @@
+import warnings
+
 import pytest
 
 import flask
@@ -81,7 +83,10 @@ def test_proper_test_request_context(app):
         )
 
     # suppress Werkzeug 0.15 warning about name mismatch
-    with pytest.warns(None):
+    with warnings.catch_warnings():
+        warnings.filterwarnings(
+            "ignore", "Current server name", UserWarning, "flask.app"
+        )
         with app.test_request_context(
             "/", environ_overrides={"HTTP_HOST": "localhost"}
         ):

--------------------------------------------------------------------------------
Git show output for commit 6389c07530fe53f64e4c8de8dfdfceb4f088d197:
commit 6389c07530fe53f64e4c8de8dfdfceb4f088d197
Merge: 7b0c82df b1a00ebc
Author: David Lord <davidism@gmail.com>
Date:   Wed Dec 22 17:49:30 2021 -0800

    Merge pull request #4348 from Yourun-proger/fix_msg
    
    Fix error message for `after_this_request` when used outside request context


--------------------------------------------------------------------------------
Git show output for commit 633449a36c959d25577799eb3da76005a803d5cd:
commit 633449a36c959d25577799eb3da76005a803d5cd
Author: Yourun-Proger <shkrobov.yura@mail.ru>
Date:   Fri Nov 19 23:09:38 2021 +0300

    fix error message

diff --git a/CHANGES.rst b/CHANGES.rst
index 1af03f26..3785f737 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,6 +15,8 @@ Unreleased
 -   ``app.json_encoder`` and ``json_decoder`` are only passed to
     ``dumps`` and ``loads`` if they have custom behavior. This improves
     performance, mainly on PyPy. :issue:`4349`
+-   Fix error message for ``after_this_request`` when it used outside
+    request context. :issue:`4333`
 
 
 Version 2.0.2
diff --git a/src/flask/ctx.py b/src/flask/ctx.py
index 5c064635..5149c821 100644
--- a/src/flask/ctx.py
+++ b/src/flask/ctx.py
@@ -130,7 +130,15 @@ def after_this_request(f: AfterRequestCallable) -> AfterRequestCallable:
 
     .. versionadded:: 0.9
     """
-    _request_ctx_stack.top._after_request_functions.append(f)
+    top = _request_ctx_stack.top
+    if top is None:
+        raise RuntimeError(
+            "This decorator can only be used at local scopes "
+            "when a request context is on the stack. For instance within "
+            "view functions."
+        )
+    top._after_request_functions.append(f)
+
     return f
 
 

--------------------------------------------------------------------------------
Git show output for commit 624ed4de72e144ceeb422c8bae1cafffd7edcc73:
commit 624ed4de72e144ceeb422c8bae1cafffd7edcc73
Merge: 776bf09f f16524ea
Author: David Lord <davidism@gmail.com>
Date:   Wed Dec 15 20:31:59 2021 -0800

    Merge pull request #4384 from jugmac00/patch-1
    
    fix typo


--------------------------------------------------------------------------------
Git show output for commit f16524ea1de682db50ee18a91b5204a834995b2e:
commit f16524ea1de682db50ee18a91b5204a834995b2e
Author: Jürgen Gmach <juergen.gmach@googlemail.com>
Date:   Thu Dec 16 04:28:09 2021 +0100

    fix typo

diff --git a/docs/server.rst b/docs/server.rst
index c12f502c..446d5be8 100644
--- a/docs/server.rst
+++ b/docs/server.rst
@@ -101,7 +101,7 @@ example shows that process id 6847 is using port 5000.
             TCP 127.0.0.1:5000 0.0.0.0:0 LISTENING 6847
 
 MacOS Monterey and later automatically starts a service that uses port
-5000. To disable the service, got to System Preferences, Sharing, and
+5000. To disable the service, go to System Preferences, Sharing, and
 disable "AirPlay Receiver".
 
 

--------------------------------------------------------------------------------
Git show output for commit b831e8507c8849899ea3b30eb4b6af19de2bf06a:
commit b831e8507c8849899ea3b30eb4b6af19de2bf06a
Merge: 37206698 46b39e26
Author: David Lord <davidism@gmail.com>
Date:   Mon Nov 15 13:37:42 2021 -0800

    Merge pull request #4298 from delicb/fix/issue4295
    
    fix errorhandler type check


--------------------------------------------------------------------------------
Git show output for commit 46b39e2698697408c6f8f8693e526cd1bb085684:
commit 46b39e2698697408c6f8f8693e526cd1bb085684
Author: Bojan Delić <bojan@delic.rs>
Date:   Thu Oct 7 01:09:32 2021 +0200

    fix errorhandler type check

diff --git a/CHANGES.rst b/CHANGES.rst
index 98139ae0..db65ee16 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -9,6 +9,7 @@ Unreleased
     removed in Werkzeug 2.1. It is now also deprecated in Flask, to be
     removed in Flask 2.1, while remaining compatible with both in
     2.0.x. Use ``response.request.environ`` instead. :pr:`4341`
+-   Fix type annotation for ``errorhandler`` decorator. :issue:`4295`
 
 
 Version 2.0.2
diff --git a/src/flask/typing.py b/src/flask/typing.py
index f1c84670..93896f80 100644
--- a/src/flask/typing.py
+++ b/src/flask/typing.py
@@ -46,11 +46,4 @@ TemplateGlobalCallable = t.Callable[..., t.Any]
 TemplateTestCallable = t.Callable[..., bool]
 URLDefaultCallable = t.Callable[[str, dict], None]
 URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], None]
-
-
-if t.TYPE_CHECKING:
-    import typing_extensions as te
-
-    class ErrorHandlerCallable(te.Protocol[GenericException]):
-        def __call__(self, error: GenericException) -> ResponseReturnValue:
-            ...
+ErrorHandlerCallable = t.Callable[[GenericException], ResponseReturnValue]

--------------------------------------------------------------------------------
Git show output for commit 6d637f0fdb0e18b2722ab2b19b79a5c954d22637:
commit 6d637f0fdb0e18b2722ab2b19b79a5c954d22637
Merge: 4346498c 3f6cdbd8
Author: David Lord <davidism@gmail.com>
Date:   Sun Oct 3 20:38:28 2021 -0700

    Merge pull request #4230 from matipau/blueprint-fix
    
    Fix callback order for nested blueprints


--------------------------------------------------------------------------------
Git show output for commit 4346498c85848c53843b810537b83a8f6124c9d3:
commit 4346498c85848c53843b810537b83a8f6124c9d3
Merge: f8c881b8 76858515
Author: David Lord <davidism@gmail.com>
Date:   Fri Oct 1 19:52:05 2021 -0700

    Merge pull request #4285 from Makonede/patch-1
    
    fix list numbering


--------------------------------------------------------------------------------
Git show output for commit 76858515944121ae3faf699f85ab2c4b7806d3d1:
commit 76858515944121ae3faf699f85ab2c4b7806d3d1
Author: Makonede <61922615+Makonede@users.noreply.github.com>
Date:   Fri Oct 1 18:07:32 2021 -0700

    fix list numbering

diff --git a/artwork/LICENSE.rst b/artwork/LICENSE.rst
index 605e41cb..99c58a21 100644
--- a/artwork/LICENSE.rst
+++ b/artwork/LICENSE.rst
@@ -10,7 +10,7 @@ following conditions are met:
 1.  Redistributions of source code must retain the above copyright
     notice and this list of conditions.
 
-3.  Neither the name of the copyright holder nor the names of its
+2.  Neither the name of the copyright holder nor the names of its
     contributors may be used to endorse or promote products derived from
     this software without specific prior written permission.
 

--------------------------------------------------------------------------------
Git show output for commit 1a40d9b9761b304150c3b82c656dbb0e425e8e2e:
commit 1a40d9b9761b304150c3b82c656dbb0e425e8e2e
Author: Seth Rutner <sprutner@gmail.com>
Date:   Tue Sep 21 15:44:39 2021 -0700

    fix grammar in links to app and request context

diff --git a/docs/appcontext.rst b/docs/appcontext.rst
index 68176494..b214f254 100644
--- a/docs/appcontext.rst
+++ b/docs/appcontext.rst
@@ -8,7 +8,7 @@ a request, CLI command, or other activity. Rather than passing the
 application around to each function, the :data:`current_app` and
 :data:`g` proxies are accessed instead.
 
-This is similar to the :doc:`/reqcontext`, which keeps track of
+This is similar to :doc:`/reqcontext`, which keeps track of
 request-level data during a request. A corresponding application context
 is pushed when a request context is pushed.
 
diff --git a/docs/reqcontext.rst b/docs/reqcontext.rst
index 31a83cff..b67745ed 100644
--- a/docs/reqcontext.rst
+++ b/docs/reqcontext.rst
@@ -8,7 +8,7 @@ request. Rather than passing the request object to each function that
 runs during a request, the :data:`request` and :data:`session` proxies
 are accessed instead.
 
-This is similar to the :doc:`/appcontext`, which keeps track of the
+This is similar to :doc:`/appcontext`, which keeps track of the
 application-level data independent of a request. A corresponding
 application context is pushed when a request context is pushed.
 
@@ -33,8 +33,8 @@ Lifetime of the Context
 -----------------------
 
 When a Flask application begins handling a request, it pushes a request
-context, which also pushes an :doc:`/appcontext`. When the request ends
-it pops the request context then the application context.
+context, which also pushes an :doc:`app context </appcontext>`. When the
+request ends it pops the request context then the application context.
 
 The context is unique to each thread (or other worker type).
 :data:`request` cannot be passed to another thread, the other thread
diff --git a/docs/shell.rst b/docs/shell.rst
index 47efba37..7e42e285 100644
--- a/docs/shell.rst
+++ b/docs/shell.rst
@@ -21,8 +21,7 @@ that these functions are not only there for interactive shell usage, but
 also for unit testing and other situations that require a faked request
 context.
 
-Generally it's recommended that you read the :doc:`reqcontext`
-chapter of the documentation first.
+Generally it's recommended that you read :doc:`reqcontext` first.
 
 Command Line Interface
 ----------------------

--------------------------------------------------------------------------------
Git show output for commit 22933a8cb424ffd65f2bec5bbfdbfa7e42105470:
commit 22933a8cb424ffd65f2bec5bbfdbfa7e42105470
Author: Pedro Torcatt <pedrotorcattsoto@gmail.com>
Date:   Wed Sep 22 21:20:26 2021 -0400

    fix docs for Flask.test_client_class

diff --git a/src/flask/app.py b/src/flask/app.py
index 9097c464..5179305a 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -366,7 +366,8 @@ class Flask(Scaffold):
     #: .. versionadded:: 1.1.0
     url_map_class = Map
 
-    #: the test client that is used with when `test_client` is used.
+    #: The :meth:`test_client` method creates an instance of this test
+    #: client class. Defaults to :class:`~flask.testing.FlaskClient`.
     #:
     #: .. versionadded:: 0.7
     test_client_class: t.Optional[t.Type["FlaskClient"]] = None

--------------------------------------------------------------------------------
Git show output for commit 6a4bf9eec13e035cf10ecc16e462049b4c967e41:
commit 6a4bf9eec13e035cf10ecc16e462049b4c967e41
Author: David Lord <davidism@gmail.com>
Date:   Fri Oct 1 09:39:10 2021 -0700

    use exception chaining
    
    fixes flake8-bugbear B904

diff --git a/src/flask/app.py b/src/flask/app.py
index 301694ac..9097c464 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -1621,7 +1621,7 @@ class Flask(Scaffold):
         except ImportError:
             raise RuntimeError(
                 "Install Flask with the 'async' extra in order to use async views."
-            )
+            ) from None
 
         # Check that Werkzeug isn't using its fallback ContextVar class.
         if ContextVar.__module__ == "werkzeug.local":
@@ -1727,7 +1727,7 @@ class Flask(Scaffold):
                         " response. The return type must be a string,"
                         " dict, tuple, Response instance, or WSGI"
                         f" callable, but it was a {type(rv).__name__}."
-                    ).with_traceback(sys.exc_info()[2])
+                    ).with_traceback(sys.exc_info()[2]) from None
             else:
                 raise TypeError(
                     "The view function did not return a valid"
diff --git a/src/flask/cli.py b/src/flask/cli.py
index 0d101d0a..7ab4fa1c 100644
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -69,15 +69,16 @@ def find_best_app(script_info, module):
 
                 if isinstance(app, Flask):
                     return app
-            except TypeError:
+            except TypeError as e:
                 if not _called_with_wrong_args(app_factory):
                     raise
+
                 raise NoAppException(
                     f"Detected factory {attr_name!r} in module {module.__name__!r},"
                     " but could not call it without arguments. Use"
                     f" \"FLASK_APP='{module.__name__}:{attr_name}(args)'\""
                     " to specify arguments."
-                )
+                ) from e
 
     raise NoAppException(
         "Failed to find Flask application or factory in module"
@@ -161,7 +162,7 @@ def find_app_by_string(script_info, module, app_name):
     except SyntaxError:
         raise NoAppException(
             f"Failed to parse {app_name!r} as an attribute name or function call."
-        )
+        ) from None
 
     if isinstance(expr, ast.Name):
         name = expr.id
@@ -184,7 +185,7 @@ def find_app_by_string(script_info, module, app_name):
             # message with the full expression instead.
             raise NoAppException(
                 f"Failed to parse arguments as literal values: {app_name!r}."
-            )
+            ) from None
     else:
         raise NoAppException(
             f"Failed to parse {app_name!r} as an attribute name or function call."
@@ -192,17 +193,17 @@ def find_app_by_string(script_info, module, app_name):
 
     try:
         attr = getattr(module, name)
-    except AttributeError:
+    except AttributeError as e:
         raise NoAppException(
             f"Failed to find attribute {name!r} in {module.__name__!r}."
-        )
+        ) from e
 
     # If the attribute is a function, call it with any args and kwargs
     # to get the real application.
     if inspect.isfunction(attr):
         try:
             app = call_factory(script_info, attr, args, kwargs)
-        except TypeError:
+        except TypeError as e:
             if not _called_with_wrong_args(attr):
                 raise
 
@@ -210,7 +211,7 @@ def find_app_by_string(script_info, module, app_name):
                 f"The factory {app_name!r} in module"
                 f" {module.__name__!r} could not be called with the"
                 " specified arguments."
-            )
+            ) from e
     else:
         app = attr
 
@@ -257,16 +258,15 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):
 
     try:
         __import__(module_name)
-    except ImportError:
+    except ImportError as e:
         # Reraise the ImportError if it occurred within the imported module.
         # Determine this by checking whether the trace has a depth > 1.
         if sys.exc_info()[2].tb_next:
             raise NoAppException(
-                f"While importing {module_name!r}, an ImportError was"
-                f" raised:\n\n{traceback.format_exc()}"
-            )
+                f"While importing {module_name!r}, an ImportError was raised."
+            ) from e
         elif raise_if_not_found:
-            raise NoAppException(f"Could not import {module_name!r}.")
+            raise NoAppException(f"Could not import {module_name!r}.") from e
         else:
             return
 
@@ -725,7 +725,7 @@ class CertParamType(click.ParamType):
                         "Using ad-hoc certificates requires the cryptography library.",
                         ctx,
                         param,
-                    )
+                    ) from None
 
                 return value
 
diff --git a/src/flask/debughelpers.py b/src/flask/debughelpers.py
index ce65c487..212f7d7e 100644
--- a/src/flask/debughelpers.py
+++ b/src/flask/debughelpers.py
@@ -83,10 +83,11 @@ def attach_enctype_error_multidict(request):
         def __getitem__(self, key):
             try:
                 return oldcls.__getitem__(self, key)
-            except KeyError:
+            except KeyError as e:
                 if key not in request.form:
                     raise
-                raise DebugFilesKeyError(request, key)
+
+                raise DebugFilesKeyError(request, key) from e
 
     newcls.__name__ = oldcls.__name__
     newcls.__module__ = oldcls.__module__
diff --git a/src/flask/scaffold.py b/src/flask/scaffold.py
index 42eabcfc..07ca5c65 100644
--- a/src/flask/scaffold.py
+++ b/src/flask/scaffold.py
@@ -715,7 +715,7 @@ class Scaffold:
                 f"'{code_or_exception}' is not a recognized HTTP error"
                 " code. Use a subclass of HTTPException with that code"
                 " instead."
-            )
+            ) from None
 
         self.error_handler_spec[None][code][exc_class] = t.cast(
             "ErrorHandlerCallable[Exception]", f
diff --git a/src/flask/signals.py b/src/flask/signals.py
index 63667bdb..2c6d6469 100644
--- a/src/flask/signals.py
+++ b/src/flask/signals.py
@@ -29,7 +29,7 @@ except ImportError:
             raise RuntimeError(
                 "Signalling support is unavailable because the blinker"
                 " library is not installed."
-            )
+            ) from None
 
         connect = connect_via = connected_to = temporarily_connected_to = _fail
         disconnect = _fail

--------------------------------------------------------------------------------
Git show output for commit ca0033c11a1c325944b1c6abf4e18e8831326d27:
commit ca0033c11a1c325944b1c6abf4e18e8831326d27
Merge: 313a70da 9d9108fe
Author: Grey Li <withlihui@gmail.com>
Date:   Wed Sep 15 08:50:07 2021 +0800

    Merge pull request #4266 from kkirsche/patch-1
    
    fix: typo docs/debugging.rst:72


--------------------------------------------------------------------------------
Git show output for commit 9d9108fe25600c566643f902255d74ff68d88967:
commit 9d9108fe25600c566643f902255d74ff68d88967
Author: Kevin Kirsche <Kev.Kirsche+GitHub@gmail.com>
Date:   Tue Sep 14 12:29:42 2021 -0400

    fix: typo docs/debugging.rst:72
    
    docs/debugging.rst:72: controled ==> controlled

diff --git a/docs/debugging.rst b/docs/debugging.rst
index a9f984b4..66118de2 100644
--- a/docs/debugging.rst
+++ b/docs/debugging.rst
@@ -69,7 +69,7 @@ enables the debugger and reloader.
 
 ``FLASK_ENV`` can only be set as an environment variable. When running
 from Python code, passing ``debug=True`` enables debug mode, which is
-mostly equivalent. Debug mode can be controled separately from
+mostly equivalent. Debug mode can be controlled separately from
 ``FLASK_ENV`` with the ``FLASK_DEBUG`` environment variable as well.
 
 .. code-block:: python

--------------------------------------------------------------------------------
Git show output for commit ef3a82a2820082f7d9f2ca963c9dff7eb1ea9687:
commit ef3a82a2820082f7d9f2ca963c9dff7eb1ea9687
Merge: c3f923d0 9f0da9b7
Author: David Lord <davidism@gmail.com>
Date:   Thu Aug 5 19:37:03 2021 -0700

    Merge pull request #4174 from na2shell/fix_4170
    
    cli loader handles kwargs in app factory


--------------------------------------------------------------------------------
Git show output for commit c3f923d0e0aba3ed5b6013c5d022021e4ae059cf:
commit c3f923d0e0aba3ed5b6013c5d022021e4ae059cf
Merge: 66d9d4fa 2305b056
Author: David Lord <davidism@gmail.com>
Date:   Thu Aug 5 19:17:52 2021 -0700

    Merge pull request #4169 from Rohan-Salwan/dev
    
    fix raising error during cli lazy loading


--------------------------------------------------------------------------------
Git show output for commit 66d9d4fa8d07dd50e4cb3036a9ae5f92c4693b84:
commit 66d9d4fa8d07dd50e4cb3036a9ae5f92c4693b84
Merge: 06cf349b 892ae955
Author: David Lord <davidism@gmail.com>
Date:   Thu Aug 5 18:40:44 2021 -0700

    Merge pull request #4160 from default-303/decimal_fix
    
    json support for Decimal objects


--------------------------------------------------------------------------------
Git show output for commit 06cf349bb8b69d9946c3a6a64d32eb552cc7c28b:
commit 06cf349bb8b69d9946c3a6a64d32eb552cc7c28b
Merge: 187f6ce4 9a2adfba
Author: David Lord <davidism@gmail.com>
Date:   Thu Aug 5 18:18:04 2021 -0700

    Merge pull request #4152 from Yourun-proger/fix
    
    `static_folder` can be a `pathlib.Path` object


--------------------------------------------------------------------------------
Git show output for commit e7b16b5ef2b22e2f4e76dc1be5747e21196fcbc5:
commit e7b16b5ef2b22e2f4e76dc1be5747e21196fcbc5
Merge: 85c35bd6 3127c304
Author: David Lord <davidism@gmail.com>
Date:   Wed Jul 7 10:59:04 2021 -0700

    Merge pull request #4193 from Elahi-cs/sql-fix
    
    Small SQL formatting fix


--------------------------------------------------------------------------------
Git show output for commit 3127c304ecbc54387792c9ddff3c266645b67b8a:
commit 3127c304ecbc54387792c9ddff3c266645b67b8a
Author: Elahi-cs <elijahshellsanchez@outlook.com>
Date:   Wed Jul 7 19:40:21 2021 +0200

    Small SQL formatting fix

diff --git a/docs/tutorial/tests.rst b/docs/tutorial/tests.rst
index d8f2a931..f97d19df 100644
--- a/docs/tutorial/tests.rst
+++ b/docs/tutorial/tests.rst
@@ -270,7 +270,7 @@ messages.
 
         with app.app_context():
             assert get_db().execute(
-                "select * from user where username = 'a'",
+                "SELECT * FROM user WHERE username = 'a'",
             ).fetchone() is not None
 
 
diff --git a/examples/tutorial/tests/test_auth.py b/examples/tutorial/tests/test_auth.py
index 3ac9a12c..0bc0a9db 100644
--- a/examples/tutorial/tests/test_auth.py
+++ b/examples/tutorial/tests/test_auth.py
@@ -16,7 +16,7 @@ def test_register(client, app):
     # test that the user was inserted into the database
     with app.app_context():
         assert (
-            get_db().execute("select * from user where username = 'a'").fetchone()
+            get_db().execute("SELECT * FROM user WHERE username = 'a'").fetchone()
             is not None
         )
 

--------------------------------------------------------------------------------
Git show output for commit 63893a427bd022d192febadad0b31ae06fa80776:
commit 63893a427bd022d192febadad0b31ae06fa80776
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Sun Jun 6 11:09:03 2021 +0100

    Improve the changelog entry
    
    The fix to the teardown_request also applies to all teardown_*
    methods.

diff --git a/CHANGES.rst b/CHANGES.rst
index d8dd974f..c27b623f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,7 +5,7 @@ Version 2.0.2
 
 Unreleased
 
--   Fix type annotation for ``teardown_request``. :issue:`4093`
+-   Fix type annotation for ``teardown_*`` methods. :issue:`4093`
 -   Fix type annotation for ``before_request`` and ``before_app_request``
     decorators. :issue:`4104`
 -   Fixed the issue where typing requires template global

--------------------------------------------------------------------------------
Git show output for commit 5205cd4ea979f6c322e4e6a256a72e7808592818:
commit 5205cd4ea979f6c322e4e6a256a72e7808592818
Author: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>
Date:   Tue Jun 1 17:56:33 2021 +0000

    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci

diff --git a/tests/test_async.py b/tests/test_async.py
index 344e9fe6..8276c4a8 100644
--- a/tests/test_async.py
+++ b/tests/test_async.py
@@ -31,11 +31,11 @@ class AsyncView(View):
 class AsyncMethodView(MethodView):
     async def get(self):
         await asyncio.sleep(0)
-        return 'GET'
+        return "GET"
 
     async def post(self):
         await asyncio.sleep(0)
-        return 'POST'
+        return "POST"
 
 
 @pytest.fixture(name="async_app")
@@ -73,8 +73,8 @@ def _async_app():
 
     app.register_blueprint(blueprint, url_prefix="/bp")
 
-    app.add_url_rule('/view', view_func=AsyncView.as_view('view'))
-    app.add_url_rule('/methodview', view_func=AsyncMethodView.as_view('methodview'))
+    app.add_url_rule("/view", view_func=AsyncView.as_view("view"))
+    app.add_url_rule("/methodview", view_func=AsyncMethodView.as_view("methodview"))
 
     return app
 

--------------------------------------------------------------------------------
Git show output for commit d81aa70106877b38673275e4539ab1f3232c4fea:
commit d81aa70106877b38673275e4539ab1f3232c4fea
Merge: e22021d5 aa6fbf2f
Author: Grey Li <withlihui@gmail.com>
Date:   Mon May 24 16:36:56 2021 +0800

    Merge pull request #4100 from greyli/fix-typo
    
    Fix typo in docs/tutorial/index.rst


--------------------------------------------------------------------------------
Git show output for commit c2920e2bd98cdb3dcccc2868c25b695d4780c620:
commit c2920e2bd98cdb3dcccc2868c25b695d4780c620
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Tue May 18 13:37:11 2021 +0100

    Bugfix allow blueprints to be registered with a different name
    
    This allows the same blueprint to be registered multiple times at the
    same level, but with differing url_prefixes and names.

diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index 8fe7d9e9..61b0ac69 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -274,7 +274,8 @@ class Blueprint(Scaffold):
                 first_registration = False
 
         name_prefix = options.get("name_prefix", "")
-        name = f"{name_prefix}.{self.name}".lstrip(".")
+        self_name = options.get("name", self.name)
+        name = f"{name_prefix}.{self_name}".lstrip(".")
 
         if name in app.blueprints and app.blueprints[name] is not self:
             raise ValueError(
diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py
index 0f9e9db9..2a93e8fa 100644
--- a/tests/test_blueprints.py
+++ b/tests/test_blueprints.py
@@ -866,3 +866,16 @@ def test_nesting_url_prefixes(
 
     response = client.get("/parent/child/")
     assert response.status_code == 200
+
+
+def test_unique_blueprint_names(app, client) -> None:
+    bp = flask.Blueprint("bp", __name__)
+    bp2 = flask.Blueprint("bp", __name__)
+
+    app.register_blueprint(bp)
+    app.register_blueprint(bp)  # same name, same object, no error
+
+    with pytest.raises(ValueError):
+        app.register_blueprint(bp2)  # same name, different object
+
+    app.register_blueprint(bp2, name="alt")  # different name

--------------------------------------------------------------------------------
Git show output for commit 141fde1d8ec8663b4be98777750d2f58c6fe44ad:
commit 141fde1d8ec8663b4be98777750d2f58c6fe44ad
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Tue May 18 13:33:45 2021 +0100

    Bugfix blueprint naming
    
    Following discussions for Flask we've decided to name blueprints based
    on how they are registered. This allows for two different blueprints
    to have the same self-name as long as they are registered in different
    nested positions. This helps users choose better blueprint names.

diff --git a/src/flask/app.py b/src/flask/app.py
index cd1c42ad..3bf92ceb 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -747,7 +747,7 @@ class Flask(Scaffold):
         ] = self.template_context_processors[None]
         reqctx = _request_ctx_stack.top
         if reqctx is not None:
-            for bp in self._request_blueprints():
+            for bp in request.blueprints:
                 if bp in self.template_context_processors:
                     funcs = chain(funcs, self.template_context_processors[bp])
         orig_ctx = context.copy()
@@ -1267,7 +1267,7 @@ class Flask(Scaffold):
         exc_class, code = self._get_exc_class_and_code(type(e))
 
         for c in [code, None]:
-            for name in chain(self._request_blueprints(), [None]):
+            for name in chain(request.blueprints, [None]):
                 handler_map = self.error_handler_spec[name][c]
 
                 if not handler_map:
@@ -1788,9 +1788,16 @@ class Flask(Scaffold):
         .. versionadded:: 0.7
         """
         funcs: t.Iterable[URLDefaultCallable] = self.url_default_functions[None]
+
         if "." in endpoint:
-            bp = endpoint.rsplit(".", 1)[0]
-            funcs = chain(funcs, self.url_default_functions[bp])
+            bps: t.List[str] = [endpoint.rsplit(".", 1)[0]]
+
+            while "." in bps[-1]:
+                bps.append(bps[-1].rpartition(".")[0])
+
+            for bp in bps:
+                funcs = chain(funcs, self.url_default_functions[bp])
+
         for func in funcs:
             func(endpoint, values)
 
@@ -1831,14 +1838,14 @@ class Flask(Scaffold):
         funcs: t.Iterable[URLValuePreprocessorCallable] = self.url_value_preprocessors[
             None
         ]
-        for bp in self._request_blueprints():
+        for bp in request.blueprints:
             if bp in self.url_value_preprocessors:
                 funcs = chain(funcs, self.url_value_preprocessors[bp])
         for func in funcs:
             func(request.endpoint, request.view_args)
 
         funcs: t.Iterable[BeforeRequestCallable] = self.before_request_funcs[None]
-        for bp in self._request_blueprints():
+        for bp in request.blueprints:
             if bp in self.before_request_funcs:
                 funcs = chain(funcs, self.before_request_funcs[bp])
         for func in funcs:
@@ -1863,7 +1870,7 @@ class Flask(Scaffold):
         """
         ctx = _request_ctx_stack.top
         funcs: t.Iterable[AfterRequestCallable] = ctx._after_request_functions
-        for bp in self._request_blueprints():
+        for bp in request.blueprints:
             if bp in self.after_request_funcs:
                 funcs = chain(funcs, reversed(self.after_request_funcs[bp]))
         if None in self.after_request_funcs:
@@ -1902,7 +1909,7 @@ class Flask(Scaffold):
         funcs: t.Iterable[TeardownCallable] = reversed(
             self.teardown_request_funcs[None]
         )
-        for bp in self._request_blueprints():
+        for bp in request.blueprints:
             if bp in self.teardown_request_funcs:
                 funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))
         for func in funcs:
@@ -2074,9 +2081,3 @@ class Flask(Scaffold):
         wrapped to apply middleware.
         """
         return self.wsgi_app(environ, start_response)
-
-    def _request_blueprints(self) -> t.Iterable[str]:
-        if _request_ctx_stack.top.request.blueprint is None:
-            return []
-        else:
-            return reversed(_request_ctx_stack.top.request.blueprint.split("."))
diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index 85870a90..8fe7d9e9 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -98,7 +98,7 @@ class BlueprintSetupState:
             defaults = dict(defaults, **options.pop("defaults"))
         self.app.add_url_rule(
             rule,
-            f"{self.name_prefix}{self.blueprint.name}.{endpoint}",
+            f"{self.name_prefix}.{self.blueprint.name}.{endpoint}".lstrip("."),
             view_func,
             defaults=defaults,
             **options,
@@ -266,23 +266,24 @@ class Blueprint(Scaffold):
             with.
         :param options: Keyword arguments forwarded from
             :meth:`~Flask.register_blueprint`.
-        :param first_registration: Whether this is the first time this
-            blueprint has been registered on the application.
         """
-        first_registration = False
-
-        if self.name in app.blueprints:
-            assert app.blueprints[self.name] is self, (
-                "A name collision occurred between blueprints"
-                f" {self!r} and {app.blueprints[self.name]!r}."
-                f" Both share the same name {self.name!r}."
-                f" Blueprints that are created on the fly need unique"
-                f" names."
+        first_registration = True
+
+        for blueprint in app.blueprints.values():
+            if blueprint is self:
+                first_registration = False
+
+        name_prefix = options.get("name_prefix", "")
+        name = f"{name_prefix}.{self.name}".lstrip(".")
+
+        if name in app.blueprints and app.blueprints[name] is not self:
+            raise ValueError(
+                f"Blueprint name '{self.name}' "
+                f"is already registered by {app.blueprints[self.name]}. "
+                "Blueprints must have unique names."
             )
-        else:
-            app.blueprints[self.name] = self
-            first_registration = True
 
+        app.blueprints[name] = self
         self._got_registered_once = True
         state = self.make_setup_state(app, options, first_registration)
 
@@ -298,12 +299,11 @@ class Blueprint(Scaffold):
 
             def extend(bp_dict, parent_dict):
                 for key, values in bp_dict.items():
-                    key = self.name if key is None else f"{self.name}.{key}"
-
+                    key = name if key is None else f"{name}.{key}"
                     parent_dict[key].extend(values)
 
             for key, value in self.error_handler_spec.items():
-                key = self.name if key is None else f"{self.name}.{key}"
+                key = name if key is None else f"{name}.{key}"
                 value = defaultdict(
                     dict,
                     {
@@ -337,7 +337,7 @@ class Blueprint(Scaffold):
             if cli_resolved_group is None:
                 app.cli.commands.update(self.cli.commands)
             elif cli_resolved_group is _sentinel:
-                self.cli.name = self.name
+                self.cli.name = name
                 app.cli.add_command(self.cli)
             else:
                 self.cli.name = cli_resolved_group
@@ -359,7 +359,7 @@ class Blueprint(Scaffold):
             elif state.url_prefix is not None:
                 bp_options["url_prefix"] = state.url_prefix
 
-            bp_options["name_prefix"] = options.get("name_prefix", "") + self.name + "."
+            bp_options["name_prefix"] = name
             blueprint.register(app, bp_options)
 
     def add_url_rule(
diff --git a/src/flask/wrappers.py b/src/flask/wrappers.py
index bfa9d7ce..547e68d6 100644
--- a/src/flask/wrappers.py
+++ b/src/flask/wrappers.py
@@ -1,6 +1,7 @@
 import typing as t
 
 from werkzeug.exceptions import BadRequest
+from werkzeug.utils import cached_property
 from werkzeug.wrappers import Request as RequestBase
 from werkzeug.wrappers import Response as ResponseBase
 
@@ -77,6 +78,21 @@ class Request(RequestBase):
         else:
             return None
 
+    @cached_property
+    def blueprints(self) -> t.List[str]:
+        """The names of the current blueprint upwards through parent
+        blueprints.
+        """
+        if self.blueprint is None:
+            return []
+
+        bps: t.List[str] = [self.blueprint]
+
+        while "." in bps[-1]:
+            bps.append(bps[-1].rpartition(".")[0])
+
+        return bps
+
     def _load_form_data(self) -> None:
         RequestBase._load_form_data(self)
 

--------------------------------------------------------------------------------
Git show output for commit 99afbb277d25d3b052e00b9a8da216054d51d62a:
commit 99afbb277d25d3b052e00b9a8da216054d51d62a
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Tue May 18 13:06:21 2021 +0100

    Fix blueprint nested url_prefix
    
    This ensures that the url_prefix is correctly applied, no matter if
    set during the registration override or when constructing the
    blueprint.

diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index 88883ba7..85870a90 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -354,7 +354,9 @@ class Blueprint(Scaffold):
                 bp_options["url_prefix"] = (
                     state.url_prefix.rstrip("/") + "/" + bp_url_prefix.lstrip("/")
                 )
-            else:
+            elif bp_url_prefix is not None:
+                bp_options["url_prefix"] = bp_url_prefix
+            elif state.url_prefix is not None:
                 bp_options["url_prefix"] = state.url_prefix
 
             bp_options["name_prefix"] = options.get("name_prefix", "") + self.name + "."
diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py
index 0bae5333..0f9e9db9 100644
--- a/tests/test_blueprints.py
+++ b/tests/test_blueprints.py
@@ -837,48 +837,32 @@ def test_nested_blueprint(app, client):
     assert client.get("/parent/child/grandchild/no").data == b"Grandchild no"
 
 
-def test_nested_blueprint_url_prefix(app, client):
-    parent = flask.Blueprint("parent", __name__, url_prefix="/parent")
-    child = flask.Blueprint("child", __name__, url_prefix="/child")
-    grandchild = flask.Blueprint("grandchild", __name__, url_prefix="/grandchild")
-    apple = flask.Blueprint("apple", __name__, url_prefix="/apple")
-
-    @parent.route("/")
-    def parent_index():
-        return "Parent"
+@pytest.mark.parametrize(
+    "parent_init, child_init, parent_registration, child_registration",
+    [
+        ("/parent", "/child", None, None),
+        ("/parent", None, None, "/child"),
+        (None, None, "/parent", "/child"),
+        ("/other", "/something", "/parent", "/child"),
+    ],
+)
+def test_nesting_url_prefixes(
+    parent_init,
+    child_init,
+    parent_registration,
+    child_registration,
+    app,
+    client,
+) -> None:
+    parent = flask.Blueprint("parent", __name__, url_prefix=parent_init)
+    child = flask.Blueprint("child", __name__, url_prefix=child_init)
 
     @child.route("/")
-    def child_index():
-        return "Child"
-
-    @grandchild.route("/")
-    def grandchild_index():
-        return "Grandchild"
-
-    @apple.route("/")
-    def apple_index():
-        return "Apple"
-
-    child.register_blueprint(grandchild)
-    child.register_blueprint(apple, url_prefix="/orange")  # test overwrite
-    parent.register_blueprint(child)
-    app.register_blueprint(parent)
-
-    assert client.get("/parent/").data == b"Parent"
-    assert client.get("/parent/child/").data == b"Child"
-    assert client.get("/parent/child/grandchild/").data == b"Grandchild"
-    assert client.get("/parent/child/orange/").data == b"Apple"
-
-
-def test_nested_blueprint_url_prefix_only_parent_prefix(app, client):
-    parent = flask.Blueprint("parent", __name__)
-    child = flask.Blueprint("child", __name__)
-
-    @child.route("/child-endpoint")
-    def child_index():
-        return "Child"
+    def index():
+        return "index"
 
-    parent.register_blueprint(child)
-    app.register_blueprint(parent, url_prefix="/parent")
+    parent.register_blueprint(child, url_prefix=child_registration)
+    app.register_blueprint(parent, url_prefix=parent_registration)
 
-    assert client.get("/parent/child-endpoint").data == b"Child"
+    response = client.get("/parent/child/")
+    assert response.status_code == 200

--------------------------------------------------------------------------------
Git show output for commit bf982718cf30615f2dd17fa71fe17d565ebb1d3e:
commit bf982718cf30615f2dd17fa71fe17d565ebb1d3e
Author: Alex Hedges <ahedges@isi.edu>
Date:   Sat May 15 17:38:25 2021 -0400

    Make add_url_rule() signature consistent
    
    This caused a mypy error when I was making another typing improvement,
    so I am fixing it before committing my other changes.

diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index 39396ce7..098eca8c 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -365,6 +365,7 @@ class Blueprint(Scaffold):
         rule: str,
         endpoint: t.Optional[str] = None,
         view_func: t.Optional[t.Callable] = None,
+        provide_automatic_options: t.Optional[bool] = None,
         **options: t.Any,
     ) -> None:
         """Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for
@@ -376,7 +377,15 @@ class Blueprint(Scaffold):
         if view_func and hasattr(view_func, "__name__") and "." in view_func.__name__:
             raise ValueError("'view_func' name may not contain a dot '.' character.")
 
-        self.record(lambda s: s.add_url_rule(rule, endpoint, view_func, **options))
+        self.record(
+            lambda s: s.add_url_rule(
+                rule,
+                endpoint,
+                view_func,
+                provide_automatic_options=provide_automatic_options,
+                **options,
+            )
+        )
 
     def app_template_filter(self, name: t.Optional[str] = None) -> t.Callable:
         """Register a custom template filter, available application wide.  Like
diff --git a/src/flask/scaffold.py b/src/flask/scaffold.py
index f50c9b1b..20654b6b 100644
--- a/src/flask/scaffold.py
+++ b/src/flask/scaffold.py
@@ -443,7 +443,7 @@ class Scaffold:
         view_func: t.Optional[t.Callable] = None,
         provide_automatic_options: t.Optional[bool] = None,
         **options: t.Any,
-    ) -> t.Callable:
+    ) -> None:
         """Register a rule for routing incoming requests and building
         URLs. The :meth:`route` decorator is a shortcut to call this
         with the ``view_func`` argument. These are equivalent:

--------------------------------------------------------------------------------
Git show output for commit 1c3052377b18055cbfbbbdd297dd19a5c43c55a6:
commit 1c3052377b18055cbfbbbdd297dd19a5c43c55a6
Merge: f64fff64 6fbdeb80
Author: David Lord <davidism@gmail.com>
Date:   Mon May 17 07:56:20 2021 -0700

    Merge pull request #4063 from pgjones/bp-fix
    
    Bp fix


--------------------------------------------------------------------------------
Git show output for commit 6fbdeb80c76b8a698ab366d21ccd786731b17361:
commit 6fbdeb80c76b8a698ab366d21ccd786731b17361
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Sun May 16 19:32:29 2021 +0100

    Fix nested blueprint url_prefix
    
    This fixes the case where the blueprint is registered with a
    url_prefix but any child blueprints have no prefixes.

diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index 7bfef84b..39396ce7 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -354,6 +354,8 @@ class Blueprint(Scaffold):
                 bp_options["url_prefix"] = (
                     state.url_prefix.rstrip("/") + "/" + bp_url_prefix.lstrip("/")
                 )
+            else:
+                bp_options["url_prefix"] = state.url_prefix
 
             bp_options["name_prefix"] = options.get("name_prefix", "") + self.name + "."
             blueprint.register(app, bp_options)
diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py
index e7724519..0bae5333 100644
--- a/tests/test_blueprints.py
+++ b/tests/test_blueprints.py
@@ -868,3 +868,17 @@ def test_nested_blueprint_url_prefix(app, client):
     assert client.get("/parent/child/").data == b"Child"
     assert client.get("/parent/child/grandchild/").data == b"Grandchild"
     assert client.get("/parent/child/orange/").data == b"Apple"
+
+
+def test_nested_blueprint_url_prefix_only_parent_prefix(app, client):
+    parent = flask.Blueprint("parent", __name__)
+    child = flask.Blueprint("child", __name__)
+
+    @child.route("/child-endpoint")
+    def child_index():
+        return "Child"
+
+    parent.register_blueprint(child)
+    app.register_blueprint(parent, url_prefix="/parent")
+
+    assert client.get("/parent/child-endpoint").data == b"Child"

--------------------------------------------------------------------------------
Git show output for commit 5f8d3ea2fcb4a17373653d900b060259fefb11bb:
commit 5f8d3ea2fcb4a17373653d900b060259fefb11bb
Merge: c04b0de5 3ace642e
Author: David Lord <davidism@gmail.com>
Date:   Thu May 13 18:19:46 2021 -0700

    Merge pull request #4049 from brettlangdon/fix.os.fspath
    
    Use compat fspath instead of os.fspath in static_folder


--------------------------------------------------------------------------------
Git show output for commit f3551c8b907d468b6dc8a11a14384333d6126014:
commit f3551c8b907d468b6dc8a11a14384333d6126014
Merge: 08e459e8 e93704fb
Author: David Lord <davidism@gmail.com>
Date:   Thu May 13 15:27:41 2021 -0700

    Merge pull request #4036 from greyli/fix-nesting-bp
    
    Fix url_prefix argument for nesting blueprint


--------------------------------------------------------------------------------
Git show output for commit e93704fbfd5f40e48f8fe9034b6b0fe420d28fb3:
commit e93704fbfd5f40e48f8fe9034b6b0fe420d28fb3
Author: Grey Li <withlihui@gmail.com>
Date:   Thu May 13 18:26:24 2021 +0800

    fix url_prefix argument when nesting blueprints

diff --git a/CHANGES.rst b/CHANGES.rst
index c2a42443..db4eff41 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,6 +18,8 @@ Unreleased
 -   Show an error when a blueprint name contains a dot. The ``.`` has
     special meaning, it is used to separate (nested) blueprint names and
     the endpoint name. :issue:`4041`
+-   Combine URL prefixes when nesting blueprints that were created with
+    a ``url_prefix`` value. :issue:`4037`
 
 
 Version 2.0.0
diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index 823995f6..7bfef84b 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -260,7 +260,7 @@ class Blueprint(Scaffold):
         """Called by :meth:`Flask.register_blueprint` to register all
         views and callbacks registered on the blueprint with the
         application. Creates a :class:`.BlueprintSetupState` and calls
-        each :meth:`record` callbackwith it.
+        each :meth:`record` callback with it.
 
         :param app: The application this blueprint is being registered
             with.
@@ -344,13 +344,17 @@ class Blueprint(Scaffold):
                 app.cli.add_command(self.cli)
 
         for blueprint, bp_options in self._blueprints:
-            url_prefix = options.get("url_prefix", "")
-            if "url_prefix" in bp_options:
-                url_prefix = (
-                    url_prefix.rstrip("/") + "/" + bp_options["url_prefix"].lstrip("/")
+            bp_options = bp_options.copy()
+            bp_url_prefix = bp_options.get("url_prefix")
+
+            if bp_url_prefix is None:
+                bp_url_prefix = blueprint.url_prefix
+
+            if state.url_prefix is not None and bp_url_prefix is not None:
+                bp_options["url_prefix"] = (
+                    state.url_prefix.rstrip("/") + "/" + bp_url_prefix.lstrip("/")
                 )
 
-            bp_options["url_prefix"] = url_prefix
             bp_options["name_prefix"] = options.get("name_prefix", "") + self.name + "."
             blueprint.register(app, bp_options)
 
diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py
index cfcb43b3..e7724519 100644
--- a/tests/test_blueprints.py
+++ b/tests/test_blueprints.py
@@ -835,3 +835,36 @@ def test_nested_blueprint(app, client):
     assert client.get("/parent/no").data == b"Parent no"
     assert client.get("/parent/child/no").data == b"Parent no"
     assert client.get("/parent/child/grandchild/no").data == b"Grandchild no"
+
+
+def test_nested_blueprint_url_prefix(app, client):
+    parent = flask.Blueprint("parent", __name__, url_prefix="/parent")
+    child = flask.Blueprint("child", __name__, url_prefix="/child")
+    grandchild = flask.Blueprint("grandchild", __name__, url_prefix="/grandchild")
+    apple = flask.Blueprint("apple", __name__, url_prefix="/apple")
+
+    @parent.route("/")
+    def parent_index():
+        return "Parent"
+
+    @child.route("/")
+    def child_index():
+        return "Child"
+
+    @grandchild.route("/")
+    def grandchild_index():
+        return "Grandchild"
+
+    @apple.route("/")
+    def apple_index():
+        return "Apple"
+
+    child.register_blueprint(grandchild)
+    child.register_blueprint(apple, url_prefix="/orange")  # test overwrite
+    parent.register_blueprint(child)
+    app.register_blueprint(parent)
+
+    assert client.get("/parent/").data == b"Parent"
+    assert client.get("/parent/child/").data == b"Child"
+    assert client.get("/parent/child/grandchild/").data == b"Grandchild"
+    assert client.get("/parent/child/orange/").data == b"Apple"

--------------------------------------------------------------------------------
Git show output for commit 25884c433f1eddf4537694d4c5f9f78cd9a14955:
commit 25884c433f1eddf4537694d4c5f9f78cd9a14955
Author: David Lord <davidism@gmail.com>
Date:   Thu May 13 12:53:32 2021 -0700

    fix typing that wasn't available in Python 3.6.0

diff --git a/CHANGES.rst b/CHANGES.rst
index 2214dc49..1c4a7558 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -12,6 +12,7 @@ Unreleased
     imports in user projects. :issue:`4024`
 -   Fix type annotation for ``g`` and inform mypy that it is a namespace
     object that has arbitrary attributes. :issue:`4020`
+-   Fix some types that weren't available in Python 3.6.0. :issue:`4040`
 
 
 Version 2.0.0
diff --git a/src/flask/app.py b/src/flask/app.py
index f8856a52..f0f31486 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -72,6 +72,7 @@ from .wrappers import Request
 from .wrappers import Response
 
 if t.TYPE_CHECKING:
+    import typing_extensions as te
     from .blueprints import Blueprint
     from .testing import FlaskClient
     from .testing import FlaskCliRunner
@@ -1441,7 +1442,7 @@ class Flask(Scaffold):
             f"Exception on {request.path} [{request.method}]", exc_info=exc_info
         )
 
-    def raise_routing_exception(self, request: Request) -> t.NoReturn:
+    def raise_routing_exception(self, request: Request) -> "te.NoReturn":
         """Exceptions that are recording during routing are reraised with
         this method.  During debug we are not reraising redirect requests
         for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising
diff --git a/src/flask/sessions.py b/src/flask/sessions.py
index 0e68e884..34b1d0ce 100644
--- a/src/flask/sessions.py
+++ b/src/flask/sessions.py
@@ -12,6 +12,7 @@ from .helpers import is_ip
 from .json.tag import TaggedJSONSerializer
 
 if t.TYPE_CHECKING:
+    import typing_extensions as te
     from .app import Flask
     from .wrappers import Request, Response
 
@@ -92,7 +93,7 @@ class NullSession(SecureCookieSession):
     but fail on setting.
     """
 
-    def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:
+    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
         raise RuntimeError(
             "The session is unavailable because no secret "
             "key was set.  Set the secret_key on the "
diff --git a/src/flask/wrappers.py b/src/flask/wrappers.py
index 48fcc34b..bfa9d7ce 100644
--- a/src/flask/wrappers.py
+++ b/src/flask/wrappers.py
@@ -8,6 +8,7 @@ from . import json
 from .globals import current_app
 
 if t.TYPE_CHECKING:
+    import typing_extensions as te
     from werkzeug.routing import Rule
 
 
@@ -91,7 +92,7 @@ class Request(RequestBase):
 
             attach_enctype_error_multidict(self)
 
-    def on_json_loading_failed(self, e: Exception) -> t.NoReturn:
+    def on_json_loading_failed(self, e: Exception) -> "te.NoReturn":
         if current_app and current_app.debug:
             raise BadRequest(f"Failed to decode JSON object: {e}")
 

--------------------------------------------------------------------------------
Git show output for commit 2baaa8fd8ebdd0f7bf7a24bff4855ef53476c92d:
commit 2baaa8fd8ebdd0f7bf7a24bff4855ef53476c92d
Author: David Lord <davidism@gmail.com>
Date:   Thu May 13 11:32:19 2021 -0700

    fix annotation for g object

diff --git a/src/flask/globals.py b/src/flask/globals.py
index 5e6e8c75..6d91c75e 100644
--- a/src/flask/globals.py
+++ b/src/flask/globals.py
@@ -6,7 +6,7 @@ from werkzeug.local import LocalStack
 
 if t.TYPE_CHECKING:
     from .app import Flask
-    from .ctx import AppContext
+    from .ctx import _AppCtxGlobals
     from .sessions import SessionMixin
     from .wrappers import Request
 
@@ -53,5 +53,7 @@ _request_ctx_stack = LocalStack()
 _app_ctx_stack = LocalStack()
 current_app: "Flask" = LocalProxy(_find_app)  # type: ignore
 request: "Request" = LocalProxy(partial(_lookup_req_object, "request"))  # type: ignore
-session: "SessionMixin" = LocalProxy(partial(_lookup_req_object, "session"))  # type: ignore # noqa: B950
-g: "AppContext" = LocalProxy(partial(_lookup_app_object, "g"))  # type: ignore
+session: "SessionMixin" = LocalProxy(  # type: ignore
+    partial(_lookup_req_object, "session")
+)
+g: "_AppCtxGlobals" = LocalProxy(partial(_lookup_app_object, "g"))  # type: ignore

--------------------------------------------------------------------------------
Git show output for commit 48325dbfb8a3d38966c62c17ba05882f28070981:
commit 48325dbfb8a3d38966c62c17ba05882f28070981
Merge: 15b2241b 2ddbceea
Author: David Lord <davidism@gmail.com>
Date:   Tue May 11 16:33:24 2021 -0700

    Merge pull request #4011 from ThiefMaster/fix-sphinx-build
    
    Install sphinx 4.1-dev from git


--------------------------------------------------------------------------------
Git show output for commit 2889da67cb15ac6d5d882781d54014286d9ae010:
commit 2889da67cb15ac6d5d882781d54014286d9ae010
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Mon May 3 10:59:28 2021 +0100

    Remove the async helper method
    
    It is better to encourage users to utilise the app ensure_sync method
    (or the newely added async_to_sync method) so that any extensions that
    alter these methods take affect throughout the users code.
    
    With the helper method users code fix parts of their code to the
    asgiref async_to_sync ignoring any extension changes.

diff --git a/src/flask/app.py b/src/flask/app.py
index 7bc952b1..85306d7c 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -16,6 +16,7 @@ from werkzeug.exceptions import BadRequest
 from werkzeug.exceptions import BadRequestKeyError
 from werkzeug.exceptions import HTTPException
 from werkzeug.exceptions import InternalServerError
+from werkzeug.local import ContextVar
 from werkzeug.routing import BuildError
 from werkzeug.routing import Map
 from werkzeug.routing import MapAdapter
@@ -35,7 +36,6 @@ from .globals import _request_ctx_stack
 from .globals import g
 from .globals import request
 from .globals import session
-from .helpers import async_to_sync
 from .helpers import get_debug_flag
 from .helpers import get_env
 from .helpers import get_flashed_messages
@@ -1579,10 +1579,40 @@ class Flask(Scaffold):
         .. versionadded:: 2.0
         """
         if iscoroutinefunction(func):
-            return async_to_sync(func)
+            return self.async_to_sync(func)
 
         return func
 
+    def async_to_sync(
+        self, func: t.Callable[..., t.Coroutine]
+    ) -> t.Callable[..., t.Any]:
+        """Return a sync function that will run the coroutine function.
+
+        .. code-block:: python
+
+            result = app.async_to_sync(func)(*args, **kwargs)
+
+        Override this method to change how the app converts async code
+        to be synchronously callable.
+
+        .. versionadded:: 2.0
+        """
+        try:
+            from asgiref.sync import async_to_sync as asgiref_async_to_sync
+        except ImportError:
+            raise RuntimeError(
+                "Install Flask with the 'async' extra in order to use async views."
+            )
+
+        # Check that Werkzeug isn't using its fallback ContextVar class.
+        if ContextVar.__module__ == "werkzeug.local":
+            raise RuntimeError(
+                "Async cannot be used with this combination of Python "
+                "and Greenlet versions."
+            )
+
+        return asgiref_async_to_sync(func)
+
     def make_response(self, rv: ResponseReturnValue) -> Response:
         """Convert the return value from a view function to an instance of
         :attr:`response_class`.
diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index 621d51e6..109f544f 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -10,7 +10,6 @@ from threading import RLock
 
 import werkzeug.utils
 from werkzeug.exceptions import NotFound
-from werkzeug.local import ContextVar
 from werkzeug.routing import BuildError
 from werkzeug.urls import url_quote
 
@@ -800,26 +799,3 @@ def is_ip(value: str) -> bool:
             return True
 
     return False
-
-
-def async_to_sync(func: t.Callable[..., t.Coroutine]) -> t.Callable[..., t.Any]:
-    """Return a sync function that will run the coroutine function *func*.
-
-    This can be used as so
-
-        result = async_to_async(func)(*args, **kwargs)
-    """
-    try:
-        from asgiref.sync import async_to_sync as asgiref_async_to_sync
-    except ImportError:
-        raise RuntimeError(
-            "Install Flask with the 'async' extra in order to use async views."
-        )
-
-    # Check that Werkzeug isn't using its fallback ContextVar class.
-    if ContextVar.__module__ == "werkzeug.local":
-        raise RuntimeError(
-            "Async cannot be used with this combination of Python & Greenlet versions."
-        )
-
-    return asgiref_async_to_sync(func)
diff --git a/tests/test_async.py b/tests/test_async.py
index 798eed85..26a91118 100644
--- a/tests/test_async.py
+++ b/tests/test_async.py
@@ -6,7 +6,6 @@ import pytest
 from flask import Blueprint
 from flask import Flask
 from flask import request
-from flask.helpers import async_to_sync
 
 pytest.importorskip("asgiref")
 
@@ -136,5 +135,6 @@ def test_async_before_after_request():
 
 @pytest.mark.skipif(sys.version_info >= (3, 7), reason="should only raise Python < 3.7")
 def test_async_runtime_error():
+    app = Flask(__name__)
     with pytest.raises(RuntimeError):
-        async_to_sync(None)
+        app.async_to_sync(None)

--------------------------------------------------------------------------------
Git show output for commit 8bfce88e39dd427dc1258a04c6b0cafa9667ff3e:
commit 8bfce88e39dd427dc1258a04c6b0cafa9667ff3e
Author: Joshua Bronson <jabronson@gmail.com>
Date:   Sun May 2 16:05:08 2021 -0400

    Minor docs fixes. (#3988)

diff --git a/docs/async-await.rst b/docs/async-await.rst
index 5363ca13..23b418de 100644
--- a/docs/async-await.rst
+++ b/docs/async-await.rst
@@ -57,7 +57,7 @@ example via ``asyncio.create_task``.
 If you wish to use background tasks it is best to use a task queue to
 trigger background work, rather than spawn tasks in a view
 function. With that in mind you can spawn asyncio tasks by serving
-Flask with a ASGI server and utilising the asgiref WsgiToAsgi adapter
+Flask with an ASGI server and utilising the asgiref WsgiToAsgi adapter
 as described in :ref:`asgi`. This works as the adapter creates an
 event loop that runs continually.
 
@@ -70,7 +70,7 @@ to the way it is implemented. If you have a mainly async codebase it
 would make sense to consider `Quart`_. Quart is a reimplementation of
 Flask based on the `ASGI`_ standard instead of WSGI. This allows it to
 handle many concurrent requests, long running requests, and websockets
-without requiring individual worker processes or threads.
+without requiring multiple worker processes or threads.
 
 It has also already been possible to run Flask with Gevent or Eventlet
 to get many of the benefits of async request handling. These libraries
@@ -86,8 +86,8 @@ to understanding the specific needs of your project.
 Extensions
 ----------
 
-Existing Flask extensions only expect views to be synchronous. If they
-provide decorators to add functionality to views, those will probably
+Flask extensions predating Flask's async support do not expect async views.
+If they provide decorators to add functionality to views, those will probably
 not work with async views because they will not await the function or be
 awaitable. Other functions they provide will not be awaitable either and
 will probably be blocking if called within an async view.

--------------------------------------------------------------------------------
Git show output for commit 39887ee4dfafb172312ba7db8c60728dd7181f9f:
commit 39887ee4dfafb172312ba7db8c60728dd7181f9f
Merge: fab26dcb 5c6a0f0c
Author: David Lord <davidism@gmail.com>
Date:   Fri Apr 16 06:28:53 2021 -0700

    Merge pull request #3964 from pgjones/fix
    
    Fix wrapped view function comparison


--------------------------------------------------------------------------------
Git show output for commit 5c6a0f0c121297362b4c78e4240dd8445b9d9f12:
commit 5c6a0f0c121297362b4c78e4240dd8445b9d9f12
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Fri Apr 16 12:34:51 2021 +0100

    Fix wrapped view function comparison
    
    Wrapped functions are not comparable, see
    https://bugs.python.org/issue3564, therefore a marker is used to note
    when the function has been sync wrapped to allow comparison with the
    wrapped function instead.
    
    This ensures that multiple route decorators work without raising
    exceptions i.e.,
    
        @app.route("/")
        @app.route("/a")
        async def index():
            ...
    
    works.

diff --git a/src/flask/app.py b/src/flask/app.py
index d6f15e8c..98437cba 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -1048,6 +1048,8 @@ class Flask(Scaffold):
         self.url_map.add(rule)
         if view_func is not None:
             old_func = self.view_functions.get(endpoint)
+            if getattr(old_func, "_flask_sync_wrapper", False):
+                old_func = old_func.__wrapped__
             if old_func is not None and old_func != view_func:
                 raise AssertionError(
                     "View function mapping is overwriting an existing"
diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index 1a96e744..6a6bbcf1 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -780,4 +780,5 @@ def run_async(func):
 
         return async_to_sync(inner)(*args, **kwargs)
 
+    outer._flask_sync_wrapper = True
     return outer
diff --git a/tests/test_async.py b/tests/test_async.py
index 5893ff69..8c096f69 100644
--- a/tests/test_async.py
+++ b/tests/test_async.py
@@ -24,6 +24,7 @@ def _async_app():
     app = Flask(__name__)
 
     @app.route("/", methods=["GET", "POST"])
+    @app.route("/home", methods=["GET", "POST"])
     async def index():
         await asyncio.sleep(0)
         return request.method
@@ -57,7 +58,7 @@ def _async_app():
 
 
 @pytest.mark.skipif(sys.version_info < (3, 7), reason="requires Python >= 3.7")
-@pytest.mark.parametrize("path", ["/", "/bp/"])
+@pytest.mark.parametrize("path", ["/", "/home", "/bp/"])
 def test_async_route(path, async_app):
     test_client = async_app.test_client()
     response = test_client.get(path)

--------------------------------------------------------------------------------
Git show output for commit 85dce2c836fe03aefc07b7f4e0aec575e170f1cd:
commit 85dce2c836fe03aefc07b7f4e0aec575e170f1cd
Merge: 5f03ad30 6d5ccdef
Author: David Lord <davidism@gmail.com>
Date:   Mon Apr 12 11:47:24 2021 -0700

    Merge pull request #3957 from pgjones/fix
    
    Bugfix iscoroutinefunction with Python3.7


--------------------------------------------------------------------------------
Git show output for commit 6d5ccdefe29292974d0bb8e1d80dcd1a06f28368:
commit 6d5ccdefe29292974d0bb8e1d80dcd1a06f28368
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Sun Apr 11 09:10:54 2021 +0100

    Bugfix iscoroutinefunction with Python3.7
    
    See this Python bug https://bugs.python.org/issue33261. The
    iscoroutinefunction doesn't recognise partially wrapped coroutine
    functions as coroutine functions - which is problematic as the
    coroutines will be called as if they are sync, which results in
    un-awaited coroutines.

diff --git a/src/flask/app.py b/src/flask/app.py
index eefd361a..484881f4 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -1,8 +1,9 @@
+import functools
+import inspect
 import os
 import sys
 import weakref
 from datetime import timedelta
-from inspect import iscoroutinefunction
 from itertools import chain
 from threading import Lock
 
@@ -56,6 +57,20 @@ from .wrappers import Request
 from .wrappers import Response
 
 
+if sys.version_info >= (3, 8):
+    iscoroutinefunction = inspect.iscoroutinefunction
+else:
+
+    def iscoroutinefunction(func):
+        while inspect.ismethod(func):
+            func = func.__func__
+
+        while isinstance(func, functools.partial):
+            func = func.func
+
+        return inspect.iscoroutinefunction(func)
+
+
 def _make_timedelta(value):
     if value is None or isinstance(value, timedelta):
         return value

--------------------------------------------------------------------------------
Git show output for commit 285a873ce921c1f2c52f15e1f58bcd3eae39596e:
commit 285a873ce921c1f2c52f15e1f58bcd3eae39596e
Author: dependabot-preview[bot] <27856297+dependabot-preview[bot]@users.noreply.github.com>
Date:   Tue Apr 6 17:46:53 2021 +0000

    [Security] Bump urllib3 from 1.26.3 to 1.26.4
    
    Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.3 to 1.26.4. **This update includes a security fix.**
    - [Release notes](https://github.com/urllib3/urllib3/releases)
    - [Changelog](https://github.com/urllib3/urllib3/blob/main/CHANGES.rst)
    - [Commits](https://github.com/urllib3/urllib3/compare/1.26.3...1.26.4)
    
    Signed-off-by: dependabot-preview[bot] <support@dependabot.com>

diff --git a/requirements/dev.txt b/requirements/dev.txt
index 1fa93bf1..99014e94 100644
--- a/requirements/dev.txt
+++ b/requirements/dev.txt
@@ -121,7 +121,7 @@ toml==0.10.2
     #   tox
 tox==3.22.0
     # via -r requirements/dev.in
-urllib3==1.26.3
+urllib3==1.26.4
     # via requests
 virtualenv==20.4.2
     # via
diff --git a/requirements/docs.txt b/requirements/docs.txt
index d986bace..08d3bcb0 100644
--- a/requirements/docs.txt
+++ b/requirements/docs.txt
@@ -66,7 +66,7 @@ sphinxcontrib-qthelp==1.0.3
     # via sphinx
 sphinxcontrib-serializinghtml==1.1.4
     # via sphinx
-urllib3==1.26.3
+urllib3==1.26.4
     # via requests
 
 # The following packages are considered to be unsafe in a requirements file:

--------------------------------------------------------------------------------
Git show output for commit c6c6408c3fb96245a2e2afc4b754cdf065fdad47:
commit c6c6408c3fb96245a2e2afc4b754cdf065fdad47
Author: pgjones <philip.graham.jones@googlemail.com>
Date:   Wed Feb 10 21:14:58 2021 +0000

    Raise a runtime error if run_async is called without real ContextVars
    
    Werkzeug offers a ContextVar replacement for Python < 3.7, however it
    doesn't work across asyncio tasks, hence it makes sense to error out
    rather than find there are odd bugs.
    
    Note the docs build requires the latest (dev) Werkzeug due to this
    change (to import ContextVar from werkzeug.local).

diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index 46244d29..5933f42a 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -7,6 +7,7 @@ from threading import RLock
 
 import werkzeug.utils
 from werkzeug.exceptions import NotFound
+from werkzeug.local import ContextVar
 from werkzeug.routing import BuildError
 from werkzeug.urls import url_quote
 
@@ -741,6 +742,11 @@ def run_async(func):
             "Install Flask with the 'async' extra in order to use async views."
         )
 
+    if ContextVar.__module__ == "werkzeug.local":
+        raise RuntimeError(
+            "async cannot be used with this combination of Python & Greenlet versions"
+        )
+
     @wraps(func)
     def outer(*args, **kwargs):
         """This function grabs the current context for the inner function.
diff --git a/tests/test_async.py b/tests/test_async.py
index d47d36ce..12784c34 100644
--- a/tests/test_async.py
+++ b/tests/test_async.py
@@ -1,10 +1,12 @@
 import asyncio
+import sys
 
 import pytest
 
 from flask import abort
 from flask import Flask
 from flask import request
+from flask.helpers import run_async
 
 
 @pytest.fixture(name="async_app")
@@ -23,6 +25,7 @@ def _async_app():
     return app
 
 
+@pytest.mark.skipif(sys.version_info < (3, 7), reason="requires Python >= 3.7")
 def test_async_request_context(async_app):
     test_client = async_app.test_client()
     response = test_client.get("/")
@@ -31,3 +34,9 @@ def test_async_request_context(async_app):
     assert b"POST" in response.get_data()
     response = test_client.get("/error")
     assert response.status_code == 412
+
+
+@pytest.mark.skipif(sys.version_info >= (3, 7), reason="should only raise Python < 3.7")
+def test_async_runtime_error():
+    with pytest.raises(RuntimeError):
+        run_async(None)
diff --git a/tox.ini b/tox.ini
index e0f666d8..cf12c0eb 100644
--- a/tox.ini
+++ b/tox.ini
@@ -25,5 +25,8 @@ skip_install = true
 commands = pre-commit run --all-files --show-diff-on-failure
 
 [testenv:docs]
-deps = -r requirements/docs.txt
+deps =
+    -r requirements/docs.txt
+
+    https://github.com/pallets/werkzeug/archive/master.tar.gz
 commands = sphinx-build -W -b html -d {envtmpdir}/doctrees docs {envtmpdir}/html

--------------------------------------------------------------------------------
Git show output for commit 1672c5f565c9bba0269e2c5ef3f2cc7038551641:
commit 1672c5f565c9bba0269e2c5ef3f2cc7038551641
Merge: 444550ab 6eeaa2e5
Author: David Lord <davidism@gmail.com>
Date:   Tue Mar 16 10:16:59 2021 -0700

    Merge pull request #3939 from kangetsu121/fix_link_and_typo
    
    Docs: fix a broken link


--------------------------------------------------------------------------------
Git show output for commit 6eeaa2e50d2e3ff776085d0b28d58d1db65a0538:
commit 6eeaa2e50d2e3ff776085d0b28d58d1db65a0538
Author: kangetsu121 <kangetsu121@gmail.com>
Date:   Tue Mar 16 16:30:54 2021 +0000

    fix a broken link

diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index 5521472e..fd39ba14 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -876,7 +876,7 @@ Hooking in WSGI Middleware
 
 To add WSGI middleware to your Flask application, wrap the application's
 ``wsgi_app`` attribute. For example, to apply Werkzeug's
-:class:`~werkzeug.middlware.proxy_fix.ProxyFix` middleware for running
+:class:`~werkzeug.middleware.proxy_fix.ProxyFix` middleware for running
 behind Nginx:
 
 .. code-block:: python

--------------------------------------------------------------------------------
Git show output for commit 4846e25e92638a1db5aa2b41f65eed7585366109:
commit 4846e25e92638a1db5aa2b41f65eed7585366109
Merge: dcd3b5c8 49b7341a
Author: David Lord <davidism@gmail.com>
Date:   Thu Feb 25 09:51:58 2021 -0800

    Merge pull request #3917 from greyli/fix-date-parse
    
    update json.dumps for http_date changes


--------------------------------------------------------------------------------
Git show output for commit aee3f3fee974ffb8e2ed7848c9e5744df5d7a5de:
commit aee3f3fee974ffb8e2ed7848c9e5744df5d7a5de
Merge: adeaf27e 76abbe90
Author: David Lord <davidism@gmail.com>
Date:   Fri Feb 19 07:21:18 2021 -0800

    Merge pull request #3916 from greyli/fix-extdev-docs
    
    Remove the mention of Flask-OAuth in the extension dev docs


--------------------------------------------------------------------------------
Git show output for commit ff3fb96896ef2814b695c0689009434368ca9ca3:
commit ff3fb96896ef2814b695c0689009434368ca9ca3
Merge: 192f4ae0 0ee1b0b5
Author: David Lord <davidism@gmail.com>
Date:   Mon Feb 8 18:11:47 2021 -0800

    Merge pull request #3903 from pallets/update-werkzeug
    
    fix tests for latest Werkzeug


--------------------------------------------------------------------------------
Git show output for commit c676c2c4f381e8eec3932d8bd53fdbafda70aef7:
commit c676c2c4f381e8eec3932d8bd53fdbafda70aef7
Merge: 2fab8a31 da8865bd
Author: David Lord <davidism@gmail.com>
Date:   Wed Jan 6 07:47:29 2021 -0800

    Merge pull request #3861 from greyli/fix-pytest
    
    Silence pytest warnings for exception propagation test


--------------------------------------------------------------------------------
Git show output for commit 7d3ae48d57e1f989dfec42e98997ca8b75370c9a:
commit 7d3ae48d57e1f989dfec42e98997ca8b75370c9a
Author: jordivandooren <jordivandooren@gmail.com>
Date:   Wed Dec 30 11:57:37 2020 +0100

    fix explanation of wheel name (#3848)
    
    * fix explanation of wheel name
    
    * Improve the description of wheel filename format
    
    Co-authored-by: Grey Li <withlihui@gmail.com>

diff --git a/docs/tutorial/deploy.rst b/docs/tutorial/deploy.rst
index 8c1713be..9dfe3633 100644
--- a/docs/tutorial/deploy.rst
+++ b/docs/tutorial/deploy.rst
@@ -32,8 +32,8 @@ distribution file.
     $ python setup.py bdist_wheel
 
 You can find the file in ``dist/flaskr-1.0.0-py3-none-any.whl``. The
-file name is the name of the project, the version, and some tags about
-the file can install.
+file name is in the format of {project name}-{version}-{python tag}
+-{abi tag}-{platform tag}.
 
 Copy this file to another machine,
 :ref:`set up a new virtualenv <install-create-env>`, then install the

--------------------------------------------------------------------------------
Git show output for commit 1c6dc15420b21fc325833ab2955375e9736f2e74:
commit 1c6dc15420b21fc325833ab2955375e9736f2e74
Author: David Lord <davidism@gmail.com>
Date:   Sat Oct 31 19:19:11 2020 -0700

    fix response bases order

diff --git a/src/flask/wrappers.py b/src/flask/wrappers.py
index 43b9eeec..76a12bd0 100644
--- a/src/flask/wrappers.py
+++ b/src/flask/wrappers.py
@@ -90,7 +90,7 @@ class Request(RequestBase, JSONMixin):
             attach_enctype_error_multidict(self)
 
 
-class Response(ResponseBase, JSONMixin):
+class Response(JSONMixin, ResponseBase):
     """The response object that is used by default in Flask.  Works like the
     response object from Werkzeug but is set to have an HTML mimetype by
     default.  Quite often you don't have to create this object yourself because

--------------------------------------------------------------------------------
Git show output for commit 598c56c4983b33cbd9178f28516ebee33dd10fdd:
commit 598c56c4983b33cbd9178f28516ebee33dd10fdd
Author: miquelvir <41950283+miquelvir@users.noreply.github.com>
Date:   Mon Sep 28 15:21:59 2020 +0200

    fix grammar (#3769)

diff --git a/docs/patterns/fileuploads.rst b/docs/patterns/fileuploads.rst
index 9fc73304..64643d8a 100644
--- a/docs/patterns/fileuploads.rst
+++ b/docs/patterns/fileuploads.rst
@@ -55,8 +55,8 @@ the file and redirects the user to the URL for the uploaded file::
                 flash('No file part')
                 return redirect(request.url)
             file = request.files['file']
-            # if user does not select file, browser also
-            # submit an empty part without filename
+            # If the user does not select a file, the browser submits an
+            # empty file without a filename.
             if file.filename == '':
                 flash('No selected file')
                 return redirect(request.url)
@@ -135,10 +135,10 @@ Improving Uploads
 .. versionadded:: 0.6
 
 So how exactly does Flask handle uploads?  Well it will store them in the
-webserver's memory if the files are reasonable small otherwise in a
+webserver's memory if the files are reasonably small, otherwise in a
 temporary location (as returned by :func:`tempfile.gettempdir`).  But how
 do you specify the maximum file size after which an upload is aborted?  By
-default Flask will happily accept file uploads to an unlimited amount of
+default Flask will happily accept file uploads with an unlimited amount of
 memory, but you can limit that by setting the ``MAX_CONTENT_LENGTH``
 config key::
 
@@ -167,10 +167,9 @@ Upload Progress Bars
 
 A while ago many developers had the idea to read the incoming file in
 small chunks and store the upload progress in the database to be able to
-poll the progress with JavaScript from the client.  Long story short: the
-client asks the server every 5 seconds how much it has transmitted
-already.  Do you realize the irony?  The client is asking for something it
-should already know.
+poll the progress with JavaScript from the client. The client asks the
+server every 5 seconds how much it has transmitted, but this is
+something it should already know.
 
 An Easier Solution
 ------------------

--------------------------------------------------------------------------------
Git show output for commit 5bfe236fb531045497396bc85ee5026c6c9c68eb:
commit 5bfe236fb531045497396bc85ee5026c6c9c68eb
Author: ongopongo <53710895+ongopongo@users.noreply.github.com>
Date:   Wed Aug 26 09:20:21 2020 -0700

    fix typo in flask shell help (#3744)

diff --git a/src/flask/cli.py b/src/flask/cli.py
index e73f7b78..f66b2393 100644
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -859,7 +859,7 @@ def run_command(
 def shell_command():
     """Run an interactive Python shell in the context of a given
     Flask application.  The application will populate the default
-    namespace of this shell according to it's configuration.
+    namespace of this shell according to its configuration.
 
     This is useful for executing small snippets of management code
     without having to manually configure the application.

--------------------------------------------------------------------------------
Git show output for commit 8952a178715c0f47f71a3600e9cfd49dd518096e:
commit 8952a178715c0f47f71a3600e9cfd49dd518096e
Merge: e071734b 1f1b65a6
Author: Joshua Bronson <jab@users.noreply.github.com>
Date:   Sun Aug 23 08:18:26 2020 -0400

    Merge pull request #3739 from WolframAlph/typo-fix
    
    fixed #3738 typo in src/flask/blueprints.py


--------------------------------------------------------------------------------
Git show output for commit 1f1b65a62576bc6a2f9cd27e9a725f0554fc70c7:
commit 1f1b65a62576bc6a2f9cd27e9a725f0554fc70c7
Author: WolframAlph <yyanchiy@gmail.com>
Date:   Sun Aug 23 08:56:24 2020 +0200

    fixed #3738 typo in src/flask/blueprints.py

diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index 2e030861..9f27ec6d 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -121,7 +121,7 @@ class Blueprint(Scaffold):
         default.
     :param url_defaults: A dict of default values that blueprint routes
         will receive by default.
-    :param root_path: By default, the blueprint will automatically this
+    :param root_path: By default, the blueprint will automatically set this
         based on ``import_name``. In certain situations this automatic
         detection can fail, so the path can be specified manually
         instead.

--------------------------------------------------------------------------------
Git show output for commit fd0f89ebf3ef44fd40372db48f25009bdad6d162:
commit fd0f89ebf3ef44fd40372db48f25009bdad6d162
Merge: eb865f8c 414b30b2
Author: Grey Li <withlihui@gmail.com>
Date:   Fri Aug 7 19:19:53 2020 +0800

    Merge pull request #3723 from greyli/fix-intersphinx-link
    
    Fix bad intersphinx link


--------------------------------------------------------------------------------
Git show output for commit 253570784cdcc85d82142128ce33e3b9d8f8db14:
commit 253570784cdcc85d82142128ce33e3b9d8f8db14
Author: David Lord <davidism@gmail.com>
Date:   Thu Jul 30 18:36:55 2020 -0700

    cleaner message when CLI can't load app
    
    When loading the app fails for the --help command, only the error
    message is shown, then the help text. The full traceback is shown for
    other exceptions. Also show the message when loading fails while
    getting a command, instead of only "command not found". The error
    message goes to stderr to match other error behavior, and is in red
    with an extra newline to make it more obvious next to the help text.
    
    Also fixes an issue with the test_apps fixture that caused an imported
    app to still be importable after the test was over and the path was
    reset. Now the module cache is reset as well.

diff --git a/CHANGES.rst b/CHANGES.rst
index 73ff5f2e..43a6b5e7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -12,6 +12,8 @@ Unreleased
 -   Passing ``script_info`` to app factory functions is deprecated. This
     was not portable outside the ``flask`` command. Use
     ``click.get_current_context().obj`` if it's needed. :issue:`3552`
+-   The CLI shows better error messages when the app failed to load
+    when looking up commands. :issue:`2741`
 -   Add :meth:`sessions.SessionInterface.get_cookie_name` to allow
     setting the session cookie name dynamically. :pr:`3369`
 -   Add :meth:`Config.from_file` to load config using arbitrary file
diff --git a/src/flask/cli.py b/src/flask/cli.py
index caf0dfea..e73f7b78 100644
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -536,43 +536,41 @@ class FlaskGroup(AppGroup):
 
     def get_command(self, ctx, name):
         self._load_plugin_commands()
+        # Look up built-in and plugin commands, which should be
+        # available even if the app fails to load.
+        rv = super().get_command(ctx, name)
 
-        # We load built-in commands first as these should always be the
-        # same no matter what the app does.  If the app does want to
-        # override this it needs to make a custom instance of this group
-        # and not attach the default commands.
-        #
-        # This also means that the script stays functional in case the
-        # application completely fails.
-        rv = AppGroup.get_command(self, ctx, name)
         if rv is not None:
             return rv
 
         info = ctx.ensure_object(ScriptInfo)
+
+        # Look up commands provided by the app, showing an error and
+        # continuing if the app couldn't be loaded.
         try:
-            rv = info.load_app().cli.get_command(ctx, name)
-            if rv is not None:
-                return rv
-        except NoAppException:
-            pass
+            return info.load_app().cli.get_command(ctx, name)
+        except NoAppException as e:
+            click.secho(f"Error: {e.format_message()}\n", err=True, fg="red")
 
     def list_commands(self, ctx):
         self._load_plugin_commands()
-
-        # The commands available is the list of both the application (if
-        # available) plus the builtin commands.
-        rv = set(click.Group.list_commands(self, ctx))
+        # Start with the built-in and plugin commands.
+        rv = set(super().list_commands(ctx))
         info = ctx.ensure_object(ScriptInfo)
+
+        # Add commands provided by the app, showing an error and
+        # continuing if the app couldn't be loaded.
         try:
             rv.update(info.load_app().cli.list_commands(ctx))
+        except NoAppException as e:
+            # When an app couldn't be loaded, show the error message
+            # without the traceback.
+            click.secho(f"Error: {e.format_message()}\n", err=True, fg="red")
         except Exception:
-            # Here we intentionally swallow all exceptions as we don't
-            # want the help page to break if the app does not exist.
-            # If someone attempts to use the command we try to create
-            # the app again and this will give us the error.
-            # However, we will not do so silently because that would confuse
-            # users.
-            traceback.print_exc()
+            # When any other errors occurred during loading, show the
+            # full traceback.
+            click.secho(f"{traceback.format_exc()}\n", err=True, fg="red")
+
         return sorted(rv)
 
     def main(self, *args, **kwargs):
diff --git a/tests/conftest.py b/tests/conftest.py
index d7a54a66..17ff2f3d 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -73,9 +73,15 @@ def client(app):
 
 @pytest.fixture
 def test_apps(monkeypatch):
-    monkeypatch.syspath_prepend(
-        os.path.abspath(os.path.join(os.path.dirname(__file__), "test_apps"))
-    )
+    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), "test_apps"))
+    original_modules = set(sys.modules.keys())
+
+    yield
+
+    # Remove any imports cached during the test. Otherwise "import app"
+    # will work in the next test even though it's no longer on the path.
+    for key in sys.modules.keys() - original_modules:
+        sys.modules.pop(key)
 
 
 @pytest.fixture(autouse=True)
diff --git a/tests/test_cli.py b/tests/test_cli.py
index f3f8aca1..5fb114a4 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -239,7 +239,7 @@ def test_locate_app_raises(test_apps, iname, aname):
         locate_app(info, iname, aname)
 
 
-def test_locate_app_suppress_raise():
+def test_locate_app_suppress_raise(test_apps):
     info = ScriptInfo()
     app = locate_app(info, "notanapp.py", None, raise_if_not_found=False)
     assert app is None
@@ -396,21 +396,36 @@ def test_flaskgroup_debug(runner, set_debug_flag):
     assert result.output == f"{not set_debug_flag}\n"
 
 
-def test_print_exceptions(runner):
-    """Print the stacktrace if the CLI."""
+def test_no_command_echo_loading_error():
+    from flask.cli import cli
 
+    runner = CliRunner(mix_stderr=False)
+    result = runner.invoke(cli, ["missing"])
+    assert result.exit_code == 2
+    assert "FLASK_APP" in result.stderr
+    assert "Usage:" in result.stderr
+
+
+def test_help_echo_loading_error():
+    from flask.cli import cli
+
+    runner = CliRunner(mix_stderr=False)
+    result = runner.invoke(cli, ["--help"])
+    assert result.exit_code == 0
+    assert "FLASK_APP" in result.stderr
+    assert "Usage:" in result.stdout
+
+
+def test_help_echo_exception():
     def create_app():
         raise Exception("oh no")
-        return Flask("flaskgroup")
-
-    @click.group(cls=FlaskGroup, create_app=create_app)
-    def cli(**params):
-        pass
 
+    cli = FlaskGroup(create_app=create_app)
+    runner = CliRunner(mix_stderr=False)
     result = runner.invoke(cli, ["--help"])
     assert result.exit_code == 0
-    assert "Exception: oh no" in result.output
-    assert "Traceback" in result.output
+    assert "Exception: oh no" in result.stderr
+    assert "Usage:" in result.stdout
 
 
 class TestRoutes:

--------------------------------------------------------------------------------
Git show output for commit 89d1487b2ed0eb4fc4fb49a50eb54b942bec4193:
commit 89d1487b2ed0eb4fc4fb49a50eb54b942bec4193
Author: David Lord <davidism@gmail.com>
Date:   Tue Jul 28 11:14:17 2020 -0700

    rewrite debugging docs, move to separate page

diff --git a/docs/blueprints.rst b/docs/blueprints.rst
index 0a38a530..dbad7826 100644
--- a/docs/blueprints.rst
+++ b/docs/blueprints.rst
@@ -242,7 +242,6 @@ you can use relative redirects by prefixing the endpoint with a dot only::
 This will link to ``admin.index`` for instance in case the current request
 was dispatched to any other admin blueprint endpoint.
 
-.. _my-blueprint-error-label:
 
 Blueprint Error Handlers
 ------------------------
diff --git a/docs/debugging.rst b/docs/debugging.rst
new file mode 100644
index 00000000..8370d624
--- /dev/null
+++ b/docs/debugging.rst
@@ -0,0 +1,97 @@
+Debugging Application Errors
+============================
+
+
+In Production
+-------------
+
+**Do not run the development server, or enable the built-in debugger, in
+a production environment.** The debugger allows executing arbitrary
+Python code from the browser. It's protected by a pin, but that should
+not be relied on for security.
+
+Use an error logging tool, such as Sentry, as described in
+:ref:`error-logging-tools`, or enable logging and notifications as
+described in :doc:`/logging`.
+
+If you have access to the server, you could add some code to start an
+external debugger if ``request.remote_addr`` matches your IP. Some IDE
+debuggers also have a remote mode so breakpoints on the server can be
+interacted with locally. Only enable a debugger temporarily.
+
+
+The Built-In Debugger
+---------------------
+
+The built-in Werkzeug development server provides a debugger which shows
+an interactive traceback in the browser when an unhandled error occurs
+during a request. This debugger should only be used during development.
+
+.. image:: _static/debugger.png
+   :align: center
+   :class: screenshot
+   :alt: screenshot of debugger in action
+
+.. warning::
+
+    The debugger allows executing arbitrary Python code from the
+    browser. It is protected by a pin, but still represents a major
+    security risk. Do not run the development server or debugger in a
+    production environment.
+
+To enable the debugger, run the development server with the
+``FLASK_ENV`` environment variable set to ``development``. This puts
+Flask in debug mode, which changes how it handles some errors, and
+enables the debugger and reloader.
+
+.. code-block:: text
+
+    $ export FLASK_ENV=development
+    $ flask run
+
+``FLASK_ENV`` can only be set as an environment variable. When running
+from Python code, passing ``debug=True`` enables debug mode, which is
+mostly equivalent. Debug mode can be controled separately from
+``FLASK_ENV`` with the ``FLASK_DEBUG`` environment variable as well.
+
+.. code-block:: python
+
+    app.run(debug=True)
+
+:doc:`/server` and :doc:`/cli` have more information about running the
+debugger, debug mode, and development mode. More information about the
+debugger can be found in the `Werkzeug documentation
+<https://werkzeug.palletsprojects.com/debug/>`__.
+
+
+External Debuggers
+------------------
+
+External debuggers, such as those provided by IDEs, can offer a more
+powerful debugging experience than the built-in debugger. They can also
+be used to step through code during a request before an error is raised,
+or if no error is raised. Some even have a remote mode so you can debug
+code running on another machine.
+
+When using an external debugger, the app should still be in debug mode,
+but it can be useful to disable the built-in debugger and reloader,
+which can interfere.
+
+When running from the command line:
+
+.. code-block:: text
+
+    $ export FLASK_ENV=development
+    $ flask run --no-debugger --no-reload
+
+When running from Python:
+
+.. code-block:: python
+
+    app.run(debug=True, use_debugger=False, use_reloader=False)
+
+Disabling these isn't required, an external debugger will continue to
+work with the following caveats. If the built-in debugger is not
+disabled, it will catch unhandled exceptions before the external
+debugger can. If the reloader is not disabled, it could cause an
+unexpected reload if code changes during debugging.
diff --git a/docs/errorhandling.rst b/docs/errorhandling.rst
index 5d1dbf3b..7f21f58f 100644
--- a/docs/errorhandling.rst
+++ b/docs/errorhandling.rst
@@ -73,8 +73,6 @@ See also:
 -   `Flask-specific documentation <https://docs.sentry.io/platforms/python/flask/>`__
 
 
-.. _error-handlers:
-
 Error Handlers
 --------------
 
@@ -529,63 +527,12 @@ parameter.
 Logging
 -------
 
-See :doc:`/logging` for information on how to log exceptions, such as by
-emailing them to admins.
-
-Debugging Application Errors
-============================
-
-For production applications, configure your application with logging and
-notifications as described in :doc:`/logging`. This section provides
-pointers when debugging deployment configuration and digging deeper with a
-full-featured Python debugger.
-
-When in Doubt, Run Manually
----------------------------
-
-Having problems getting your application configured for production? If you
-have shell access to your host, verify that you can run your application
-manually from the shell in the deployment environment. Be sure to run under
-the same user account as the configured deployment to troubleshoot permission
-issues. You can use Flask's builtin development server with `debug=True` on
-your production host, which is helpful in catching configuration issues, but
-**be sure to do this temporarily in a controlled environment.** Do not run in
-production with `debug=True`.
-
-
-.. _working-with-debuggers:
-
-Working with Debuggers
-----------------------
-
-The built-in development server provides a :ref:`debug-mode` that shows
-an interactive traceback in the browser when an unhandled error occurs
-during a request.
+See :doc:`/logging` for information about how to log exceptions, such as
+by emailing them to admins.
 
-External debuggers, such as those provided by IDEs, can offer a much
-more powerful and visual debugging experience. They can also be used to
-step through code during a request before an error is raised, or if no
-error is raised.
-
-When using an external debugger, the app should still be in debug mode,
-but it can be useful to disable the built-in debugger and reloader,
-which can interfere.
-
-When running from the command line:
-
-.. code-block:: text
-
-    $ export FLASK_ENV=development
-    $ flask run --no-debugger --no-reload
-
-When running from Python:
-
-.. code-block:: python
 
-    app.run(debug=True, use_debugger=False, use_reloader=False)
+Debugging
+---------
 
-Disabling these isn't required, an external debugger will continue to
-work with the following caveats. If the built-in debugger is not
-disabled, it will catch unhandled exceptions before the external
-debugger can. If the reloader is not disabled, it could cause an
-unexpected reload if code changes during debugging.
+See :doc:`/debugging` for information about how to debug errors in
+development and production.
diff --git a/docs/index.rst b/docs/index.rst
index eef180d6..ec47b232 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -44,6 +44,7 @@ instructions for web development with Flask.
    templating
    testing
    errorhandling
+   debugging
    logging
    config
    signals
diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index b3028998..7a0e8cea 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -111,59 +111,43 @@ application). It will tell you what it tried to import and why it failed.
 The most common reason is a typo or because you did not actually create an
 ``app`` object.
 
-.. _debug-mode:
 
 Debug Mode
 ----------
 
-(Want to just log errors and stack traces? See :doc:`errorhandling`)
+The ``flask run`` command can do more than just start the development
+server. By enabling debug mode, the server will automatically reload if
+code changes, and will show an interactive debugger in the browser if an
+error occurs during a request.
 
-The :command:`flask` script is nice to start a local development server, but
-you would have to restart it manually after each change to your code.
-That is not very nice and Flask can do better.  If you enable debug
-support the server will reload itself on code changes, and it will also
-provide you with a helpful debugger if things go wrong.
-
-To enable all development features (including debug mode) you can export
-the ``FLASK_ENV`` environment variable and set it to ``development``
-before running the server::
-
-    $ export FLASK_ENV=development
-    $ flask run
-
-(On Windows you need to use ``set`` instead of ``export``.)
-
-This does the following things:
-
-1.  it activates the debugger
-2.  it activates the automatic reloader
-3.  it enables the debug mode on the Flask application.
-
-You can also control debug mode separately from the environment by
-exporting ``FLASK_DEBUG=1``.
-
-There are more parameters that are explained in :doc:`/server`.
+.. image:: _static/debugger.png
+    :align: center
+    :class: screenshot
+    :alt: The interactive debugger in action.
 
-.. admonition:: Attention
+.. warning::
 
-   Even though the interactive debugger does not work in forking environments
-   (which makes it nearly impossible to use on production servers), it still
-   allows the execution of arbitrary code. This makes it a major security risk
-   and therefore it **must never be used on production machines**.
+    The debugger allows executing arbitrary Python code from the
+    browser. It is protected by a pin, but still represents a major
+    security risk. Do not run the development server or debugger in a
+    production environment.
 
-Screenshot of the debugger in action:
+To enable all development features, set the ``FLASK_ENV`` environment
+variable to ``development`` before calling ``flask run``.
 
-.. image:: _static/debugger.png
-   :align: center
-   :class: screenshot
-   :alt: screenshot of debugger in action
+.. code-block:: text
 
-More information on using the debugger can be found in the `Werkzeug
-documentation`_.
+    $ export FLASK_ENV=development
+    $ flask run
 
-.. _Werkzeug documentation: https://werkzeug.palletsprojects.com/debug/#using-the-debugger
+See also:
 
-Have another debugger in mind? See :ref:`working-with-debuggers`.
+-   :doc:`/server` and :doc:`/cli` for information about running in
+    development mode.
+-   :doc:`/debugging` for information about using the built-in debugger
+    and other debuggers.
+-   :doc:`/logging` and :doc:`/errorhandling` to log errors and display
+    nice error pages.
 
 
 HTML Escaping

--------------------------------------------------------------------------------
Git show output for commit 2db3c9a72e446eac980451ef688d87b4fd32cad4:
commit 2db3c9a72e446eac980451ef688d87b4fd32cad4
Author: David Lord <davidism@gmail.com>
Date:   Tue Jul 28 07:59:19 2020 -0700

    rewrite external debuggers section

diff --git a/docs/errorhandling.rst b/docs/errorhandling.rst
index bb907533..3c7ef1ab 100644
--- a/docs/errorhandling.rst
+++ b/docs/errorhandling.rst
@@ -1,8 +1,6 @@
 Handling Application Errors
 ===========================
 
-.. versionadded:: 0.3
-
 Applications fail, servers fail. Sooner or later you will see an exception
 in production. Even if your code is 100% correct, you will still see
 exceptions from time to time. Why? Because everything else involved will
@@ -574,36 +572,34 @@ production with `debug=True`.
 Working with Debuggers
 ----------------------
 
-To dig deeper, possibly to trace code execution, Flask provides a debugger out
-of the box (see :ref:`debug-mode`). If you would like to use another Python
-debugger, note that debuggers interfere with each other. You have to set some
-options in order to use your favorite debugger:
+The built-in development server provides a :ref:`debug-mode` that shows
+an interactive traceback in the browser when an unhandled error occurs
+during a request.
+
+External debuggers, such as those provided by IDEs, can offer a much
+more powerful and visual debugging experience. They can also be used to
+step through code during a request before an error is raised, or if no
+error is raised.
 
-* ``debug``        - whether to enable debug mode and catch exceptions
-* ``use_debugger`` - whether to use the internal Flask debugger
-* ``use_reloader`` - whether to reload and fork the process if modules
-  were changed
+When using an external debugger, the app should still be in debug mode,
+but it can be useful to disable the built-in debugger and reloader,
+which can interfere.
 
-``debug`` must be True (i.e., exceptions must be caught) in order for the other
-two options to have any value.
+When running from the command line:
 
-If you're using Aptana/Eclipse for debugging you'll need to set both
-``use_debugger`` and ``use_reloader`` to False.
+.. code-block:: text
 
-A possible useful pattern for configuration is to set the following in your
-config.yaml (change the block as appropriate for your application, of course)::
+    $ export FLASK_ENV=development
+    $ flask run --no-debugger --no-reload
 
-   FLASK:
-       DEBUG: True
-       DEBUG_WITH_APTANA: True
+When running from Python:
 
-Then in your application's entry-point (main.py),
-you could have something like::
+.. code-block:: python
 
-   if __name__ == "__main__":
-       # To allow aptana to receive errors, set use_debugger=False
-       app = create_app(config="config.yaml")
+    app.run(debug=True, use_debugger=False, use_reloader=False)
 
-       use_debugger = app.debug and not(app.config.get('DEBUG_WITH_APTANA'))
-       app.run(use_debugger=use_debugger, debug=app.debug,
-               use_reloader=use_debugger, host='0.0.0.0')
+Disabling these isn't required, an external debugger will continue to
+work with the following caveats. If the built-in debugger is not
+disabled, it will catch unhandled exceptions before the external
+debugger can. If the reloader is not disabled, it could cause an
+unexpected reload if code changes during debugging.

--------------------------------------------------------------------------------
Git show output for commit a40c381ffdc4c28a19a0910c4da8ec54e3ae63cf:
commit a40c381ffdc4c28a19a0910c4da8ec54e3ae63cf
Merge: 65a0a4b5 e403e9ea
Author: Joshua Bronson <jab@users.noreply.github.com>
Date:   Sat Jul 18 13:14:09 2020 -0400

    Merge pull request #3560 from greyli/fix-env-chdir
    
    Stop change CWD to .env/.flaskenv location

diff --cc CHANGES.rst
index c0209cde,050acc6c..43cd5457
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@@ -27,17 -27,11 +27,20 @@@ Unrelease
      instead of PyOpenSSL. :pr:`3492`
  -   When specifying a factory function with ``FLASK_APP``, keyword
      argument can be passed. :issue:`3553`
+ -   When loading a ``.env`` or ``.flaskenv`` file on top level directory,
+     Flask will not change current work directory to the location of dotenv
+     files, in order to prevent potential confusion. :pr:`3560`
  
  
 +Version 1.1.x
 +-------------
 +
 +Not yet released.
 +
 +-   Officially support passing a :class:`pathlib.Path` for
 +    ``static_folder`` which stopped working in 1.1.2. :pr:`3579`
 +
 +
  Version 1.1.2
  -------------
  

--------------------------------------------------------------------------------
Git show output for commit 4e854ee49687ceac90985526928d901570d3585d:
commit 4e854ee49687ceac90985526928d901570d3585d
Merge: a12a3410 aab20ad4
Author: David Lord <davidism@gmail.com>
Date:   Wed Jul 8 08:36:14 2020 -0700

    Merge pull request #3681 from pallets/fix-typo
    
    fix typo


--------------------------------------------------------------------------------
Git show output for commit aab20ad431985b85dbe756b375e6ccfa39132054:
commit aab20ad431985b85dbe756b375e6ccfa39132054
Author: David Lord <davidism@gmail.com>
Date:   Wed Jul 8 08:26:21 2020 -0700

    fix typo

diff --git a/docs/patterns/fileuploads.rst b/docs/patterns/fileuploads.rst
index 3e3762d9..9fc73304 100644
--- a/docs/patterns/fileuploads.rst
+++ b/docs/patterns/fileuploads.rst
@@ -182,7 +182,7 @@ construction of progress bar.
 Because the common pattern for file uploads exists almost unchanged in all
 applications dealing with uploads, there is also a Flask extension called
 `Flask-Uploads`_ that implements a full fledged upload mechanism that
-allows controlling with file extensions are allowed to be uploaded.
+allows controlling which file extensions are allowed to be uploaded.
 
 .. _jQuery: https://jquery.com/
 .. _Flask-Uploads: https://flask-uploads.readthedocs.io/en/latest/

--------------------------------------------------------------------------------
Git show output for commit a12a34100ac0ab85c29f87117ac0b75100b52d3c:
commit a12a34100ac0ab85c29f87117ac0b75100b52d3c
Merge: cf5b1d02 4a1acc8b
Author: David Lord <davidism@gmail.com>
Date:   Wed Jul 8 06:56:11 2020 -0700

    Merge pull request #3680 from pallets/feature/doc-fixes
    
    Some small doc fixes


--------------------------------------------------------------------------------
Git show output for commit 4a1acc8b5f0b5608fa8f20a1ef3afc13574cb96e:
commit 4a1acc8b5f0b5608fa8f20a1ef3afc13574cb96e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Jul 8 15:53:43 2020 +0200

    Some small doc fixes

diff --git a/docs/patterns/fileuploads.rst b/docs/patterns/fileuploads.rst
index e77bef42..3e3762d9 100644
--- a/docs/patterns/fileuploads.rst
+++ b/docs/patterns/fileuploads.rst
@@ -181,8 +181,8 @@ construction of progress bar.
 
 Because the common pattern for file uploads exists almost unchanged in all
 applications dealing with uploads, there is also a Flask extension called
-`Flask-Uploads`_ that implements a full fledged upload mechanism with white and
-blacklisting of extensions and more.
+`Flask-Uploads`_ that implements a full fledged upload mechanism that
+allows controlling with file extensions are allowed to be uploaded.
 
 .. _jQuery: https://jquery.com/
 .. _Flask-Uploads: https://flask-uploads.readthedocs.io/en/latest/
diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index 786e096d..e46c6d26 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -437,7 +437,8 @@ def get_flashed_messages(with_categories=False, category_filter=()):
         `category_filter` parameter added.
 
     :param with_categories: set to ``True`` to also receive categories.
-    :param category_filter: whitelist of categories to limit return values
+    :param category_filter: filter of categories to limit return values.  Only
+                            categories in the list will be returned.
     """
     flashes = _request_ctx_stack.top.flashes
     if flashes is None:

--------------------------------------------------------------------------------
Git show output for commit 3349c4914d8556ced05ba85a89868f2ffb78fd46:
commit 3349c4914d8556ced05ba85a89868f2ffb78fd46
Merge: 9075da12 2254adf8
Author: Joshua Bronson <jab@users.noreply.github.com>
Date:   Wed Jun 24 12:56:41 2020 -0400

    Merge pull request #3662 from lgiordani/remove-debug-from-examples
    
    Removed misleading DEBUG variable from examples


--------------------------------------------------------------------------------
Git show output for commit ac9589ca7222cc7437f09e8d4660438a132f420a:
commit ac9589ca7222cc7437f09e8d4660438a132f420a
Merge: bcf0a952 ceed993d
Author: David Lord <davidism@gmail.com>
Date:   Thu Apr 2 11:55:01 2020 -0700

    Merge pull request #3530 from valleygtc/docs-fix
    
    docs: testing.rst function def missing colon


--------------------------------------------------------------------------------
Git show output for commit bcf0a95216e530376648acd1265264386ae990d6:
commit bcf0a95216e530376648acd1265264386ae990d6
Merge: 80a597b7 1736e01e
Author: Joshua Bronson <jab@users.noreply.github.com>
Date:   Wed Mar 25 10:39:45 2020 -0400

    Merge pull request #3544 from mattc41190/patch-2
    
    Grammar and clarity fix


--------------------------------------------------------------------------------
Git show output for commit 1736e01ea0b2d39ac1ee7e7b5993579487175530:
commit 1736e01ea0b2d39ac1ee7e7b5993579487175530
Author: mattc41190 <mattc41190@gmail.com>
Date:   Wed Mar 25 09:20:55 2020 -0500

    Grammar and clarity fix

diff --git a/docs/templating.rst b/docs/templating.rst
index 2bb120ab..c10d8960 100644
--- a/docs/templating.rst
+++ b/docs/templating.rst
@@ -100,7 +100,7 @@ by default:
 Standard Filters
 ----------------
 
-These filters are available in Jinja2 additionally to the filters provided
+Flask provides the following Jinja2 filters in addition to the filters provided
 by Jinja2 itself:
 
 .. function:: tojson

--------------------------------------------------------------------------------
Git show output for commit a75315028cc7b8219f2ec28c7c7c7beb92c113c2:
commit a75315028cc7b8219f2ec28c7c7c7beb92c113c2
Merge: 71b74686 e6178fe4
Author: David Lord <davidism@gmail.com>
Date:   Wed Feb 12 07:09:32 2020 -0800

    Merge pull request #3456 from frostming/bugfix/3452
    
    Fix a bug that the static endpoint will unexpectedly catch all


--------------------------------------------------------------------------------
Git show output for commit 8973b58955df185c6502389a6e91b7b262a735d4:
commit 8973b58955df185c6502389a6e91b7b262a735d4
Merge: ef27c1b7 571e92b3
Author: David Lord <davidism@gmail.com>
Date:   Mon Feb 10 18:12:50 2020 -0800

    Merge pull request #3473 from greyli/fix-doc-import
    
    Add missing import for escape in doc


--------------------------------------------------------------------------------
Git show output for commit 986871bf4eb85ae62124e71ed579b6baa0ddaeae:
commit 986871bf4eb85ae62124e71ed579b6baa0ddaeae
Merge: 28d09ae0 5da342e4
Author: David Lord <davidism@gmail.com>
Date:   Mon Feb 10 17:28:14 2020 -0800

    Merge pull request #3453 from noviluni/remove_redundant_parentheses
    
    fix docstring and remove redundant parentheses


--------------------------------------------------------------------------------
Git show output for commit 5da342e4dd7dfcc16aa25928ea91d69c2d362f73:
commit 5da342e4dd7dfcc16aa25928ea91d69c2d362f73
Author: Marc Hernandez Cabot <noviluni@gmail.com>
Date:   Thu Dec 19 21:40:40 2019 +0100

    fix docstring and remove redundant parentheses

diff --git a/src/flask/ctx.py b/src/flask/ctx.py
index 4e6b40b1..8f96c5fd 100644
--- a/src/flask/ctx.py
+++ b/src/flask/ctx.py
@@ -75,7 +75,7 @@ class _AppCtxGlobals(object):
         set and return a default value. Like :meth:`dict.setdefault`.
 
         :param name: Name of attribute to get.
-        :param: default: Value to set and return if the attribute is not
+        :param default: Value to set and return if the attribute is not
             present.
 
         .. versionadded:: 0.11
diff --git a/tests/test_basic.py b/tests/test_basic.py
index 1022d3c9..f2e3ca96 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -1689,7 +1689,7 @@ def test_routing_redirect_debugging(app, client):
         with pytest.raises(AssertionError) as e:
             client.post("/foo", data={})
         assert "http://localhost/foo/" in str(e.value)
-        assert ("Make sure to directly send your POST-request to this URL") in str(
+        assert "Make sure to directly send your POST-request to this URL" in str(
             e.value
         )
 

--------------------------------------------------------------------------------
Git show output for commit 26dac4fd77c9f73a552618597e24f324837c10a1:
commit 26dac4fd77c9f73a552618597e24f324837c10a1
Author: David Lord <davidism@gmail.com>
Date:   Mon Nov 18 19:06:57 2019 -0800

    fix test pipeline display name

diff --git a/.azure-pipelines.yml b/.azure-pipelines.yml
index 913c3764..033a5149 100644
--- a/.azure-pipelines.yml
+++ b/.azure-pipelines.yml
@@ -3,7 +3,7 @@ trigger:
   - '*.x'
 
 jobs:
-  - job: Flask
+  - job: Tests
     variables:
       vmImage: 'ubuntu-latest'
       python.version: '3.8'

--------------------------------------------------------------------------------
Git show output for commit 3ddf7fd2c2b4108a55213c791bd80981bd1f90f5:
commit 3ddf7fd2c2b4108a55213c791bd80981bd1f90f5
Author: Chris Lamb <lamby@debian.org>
Date:   Mon Oct 28 09:13:37 2019 +0000

    Make the documentation build reproducibly
    
    Whilst working on the Reproducible Builds effort [0] we noticed that
    flask could not be built reproducibly.
    
    This is because it includes an absolute build directory in the
    documentation as the "json_module" attribute points to a Python class/
    module which has a string representation including its path.
    
    This commit skips this (inherited) member from the documentation.
    
    (This was originally filed in Debian as #943674 [1].)
    
     [0] https://reproducible-builds.org/
     [1] https://bugs.debian.org/943674

diff --git a/docs/api.rst b/docs/api.rst
index 7e278fc6..41a6f355 100644
--- a/docs/api.rst
+++ b/docs/api.rst
@@ -31,6 +31,7 @@ Incoming Request Data
 .. autoclass:: Request
    :members:
    :inherited-members:
+   :exclude-members: json_module
 
    .. attribute:: environ
 

--------------------------------------------------------------------------------
Git show output for commit 9bdc42d300c63f82cf3aad872d606434fcb8cb97:
commit 9bdc42d300c63f82cf3aad872d606434fcb8cb97
Merge: 7fdd0df6 af970bd2
Author: David Lord <davidism@gmail.com>
Date:   Tue Oct 8 09:11:18 2019 -0700

    Merge pull request #3381 from seeksort/request-context-typo
    
    fix typo in request context docs


--------------------------------------------------------------------------------
Git show output for commit af970bd20f2d5c1d36abcb1f300a531c436b5655:
commit af970bd20f2d5c1d36abcb1f300a531c436b5655
Author: Kristin Faner <seeksort@gmail.com>
Date:   Sat Oct 5 17:11:08 2019 -0500

    fix typo in request context docs

diff --git a/docs/reqcontext.rst b/docs/reqcontext.rst
index 5dad6fbf..c6f43ce1 100644
--- a/docs/reqcontext.rst
+++ b/docs/reqcontext.rst
@@ -170,8 +170,8 @@ will not fail.
 
 During testing, it can be useful to defer popping the contexts after the
 request ends, so that their data can be accessed in the test function.
-Using the :meth:`~Flask.test_client` as a ``with`` block to preserve the
-contexts until the with block exits.
+Use the :meth:`~Flask.test_client` as a ``with`` block to preserve the
+contexts until the ``with`` block exits.
 
 .. code-block:: python
 

--------------------------------------------------------------------------------
Git show output for commit 4a8e75b10a50ae13e9b61763e680f3c9fd518ed3:
commit 4a8e75b10a50ae13e9b61763e680f3c9fd518ed3
Merge: 5f5e8e53 9b94e146
Author: David Lord <davidism@gmail.com>
Date:   Mon Sep 23 12:24:08 2019 -0700

    Merge pull request #3344 from hharutyunyan/fix-the-contibution-docs
    
    Fix the contibution docs


--------------------------------------------------------------------------------
Git show output for commit 908a364996bc519c98b758a604802defc6ec16b5:
commit 908a364996bc519c98b758a604802defc6ec16b5
Merge: b3b38285 b839beb2
Author: Joshua Bronson <jab@users.noreply.github.com>
Date:   Sun Aug 25 15:36:19 2019 -0400

    Merge pull request #3343 from gruentee/patch-1
    
    fix typo: base on -> based on


--------------------------------------------------------------------------------
Git show output for commit b839beb23d5fd3431132df68693f402891c5f69e:
commit b839beb23d5fd3431132df68693f402891c5f69e
Author: Constantin <gruentee@users.noreply.github.com>
Date:   Sun Aug 25 20:33:41 2019 +0200

    fix typo: base on -> based on

diff --git a/docs/patterns/viewdecorators.rst b/docs/patterns/viewdecorators.rst
index 7fd97dca..c8d24a0f 100644
--- a/docs/patterns/viewdecorators.rst
+++ b/docs/patterns/viewdecorators.rst
@@ -70,7 +70,7 @@ straightforward to read.
 
 The decorated function will then work as follows
 
-1. get the unique cache key for the current request base on the current
+1. get the unique cache key for the current request based on the current
    path.
 2. get the value for that key from the cache. If the cache returned
    something we will return that value.

--------------------------------------------------------------------------------
Git show output for commit 353d891561659a754ee92bb5e6576e82be58934a:
commit 353d891561659a754ee92bb5e6576e82be58934a
Author: Chris Zimmerman <chris-zimmerman@live.com>
Date:   Fri Aug 9 13:47:17 2019 -0500

    fixed typo in logging docstring (#3328)
    
    * fixed typo in logging docstring
    
    * second typo fix

diff --git a/src/flask/logging.py b/src/flask/logging.py
index adaba108..b85a65b2 100644
--- a/src/flask/logging.py
+++ b/src/flask/logging.py
@@ -72,7 +72,7 @@ def _has_config(logger):
 
 
 def create_logger(app):
-    """Get the the Flask apps's logger and configure it if needed.
+    """Get the Flask app's logger and configure it if needed.
 
     The logger name will be the same as
     :attr:`app.import_name <flask.Flask.name>`.

--------------------------------------------------------------------------------
Git show output for commit b3b38285a424487e5c400bf23e2554f112a099c1:
commit b3b38285a424487e5c400bf23e2554f112a099c1
Author: David Lord <davidism@gmail.com>
Date:   Thu Aug 1 13:35:38 2019 -0700

    fix stylecheck

diff --git a/docs/conf.py b/docs/conf.py
index 99fe52aa..2bcda5af 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -1,5 +1,4 @@
 import packaging
-
 from pallets_sphinx_themes import get_version
 from pallets_sphinx_themes import ProjectLink
 

--------------------------------------------------------------------------------
Git show output for commit c074422cfdbcae3cef305631988288e13bbce2d1:
commit c074422cfdbcae3cef305631988288e13bbce2d1
Merge: d0df6192 2a8ebc44
Author: David Lord <davidism@gmail.com>
Date:   Thu Aug 1 12:56:30 2019 -0700

    Merge pull request #3321 from greyli/fix-gh-link-generator
    
    Fix github link generator for docs


--------------------------------------------------------------------------------
Git show output for commit a5ecdfa7a57bf6bcba7391fc6d356e3f7de33e57:
commit a5ecdfa7a57bf6bcba7391fc6d356e3f7de33e57
Author: Anthony Sottile <asottile@umich.edu>
Date:   Mon Jul 1 07:23:03 2019 -0700

    Fixes for PEP451 import loaders and pytest 5.x
    
    - pytest 5.x drops python2 compatibility and therefore only implements PEP 451
    - pytest 5.x made the repr of `ExcInfo` less confusing (fixed tests depending
      on the old format)

diff --git a/CHANGES.rst b/CHANGES.rst
index e1a3a9e0..c777f7d0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,7 @@ Unreleased
     requires upgrading to Werkzeug 0.15.5. :issue:`3249`
 -   ``send_file`` url quotes the ":" and "/" characters for more
     compatible UTF-8 filename support in some browsers. :issue:`3074`
+-   Fixes for PEP451 import loaders and pytest 5.x.  :issue:`3275`
 
 
 Version 1.0.3
diff --git a/docs/tutorial/tests.rst b/docs/tutorial/tests.rst
index 565450f9..218817ad 100644
--- a/docs/tutorial/tests.rst
+++ b/docs/tutorial/tests.rst
@@ -188,7 +188,7 @@ should be closed.
         with pytest.raises(sqlite3.ProgrammingError) as e:
             db.execute('SELECT 1')
 
-        assert 'closed' in str(e)
+        assert 'closed' in str(e.value)
 
 The ``init-db`` command should call the ``init_db`` function and output
 a message.
diff --git a/examples/tutorial/tests/test_db.py b/examples/tutorial/tests/test_db.py
index 99c46d04..4c112b19 100644
--- a/examples/tutorial/tests/test_db.py
+++ b/examples/tutorial/tests/test_db.py
@@ -12,7 +12,7 @@ def test_get_close_db(app):
     with pytest.raises(sqlite3.ProgrammingError) as e:
         db.execute('SELECT 1')
 
-    assert 'closed' in str(e)
+    assert 'closed' in str(e.value)
 
 
 def test_init_db_command(runner, monkeypatch):
diff --git a/flask/helpers.py b/flask/helpers.py
index f1eaa8e4..45c7909a 100644
--- a/flask/helpers.py
+++ b/flask/helpers.py
@@ -789,19 +789,38 @@ def _matching_loader_thinks_module_is_package(loader, mod_name):
         loader.__class__.__name__)
 
 
-def find_package(import_name):
-    """Finds a package and returns the prefix (or None if the package is
-    not installed) as well as the folder that contains the package or
-    module as a tuple.  The package path returned is the module that would
-    have to be added to the pythonpath in order to make it possible to
-    import the module.  The prefix is the path below which a UNIX like
-    folder structure exists (lib, share etc.).
-    """
-    root_mod_name = import_name.split('.')[0]
+def _find_package_path(root_mod_name):
+    """Find the path where the module's root exists in"""
+    if sys.version_info >= (3, 4):
+        import importlib.util
+
+        try:
+            spec = importlib.util.find_spec(root_mod_name)
+            if spec is None:
+                raise ValueError("not found")
+        # ImportError: the machinery told us it does not exist
+        # ValueError:
+        #    - the module name was invalid
+        #    - the module name is __main__
+        #    - *we* raised `ValueError` due to `spec` being `None`
+        except (ImportError, ValueError):
+            pass  # handled below
+        else:
+            # namespace package
+            if spec.origin in {"namespace", None}:
+                return os.path.dirname(next(iter(spec.submodule_search_locations)))
+            # a package (with __init__.py)
+            elif spec.submodule_search_locations:
+                return os.path.dirname(os.path.dirname(spec.origin))
+            # just a normal module
+            else:
+                return os.path.dirname(spec.origin)
+
+    # we were unable to find the `package_path` using PEP 451 loaders
     loader = pkgutil.get_loader(root_mod_name)
-    if loader is None or import_name == '__main__':
+    if loader is None or root_mod_name == '__main__':
         # import name is not found, or interactive/main module
-        package_path = os.getcwd()
+        return os.getcwd()
     else:
         # For .egg, zipimporter does not have get_filename until Python 2.7.
         if hasattr(loader, 'get_filename'):
@@ -815,17 +834,29 @@ def find_package(import_name):
             # Google App Engine's HardenedModulesHook
             #
             # Fall back to imports.
-            __import__(import_name)
-            filename = sys.modules[import_name].__file__
+            __import__(root_mod_name)
+            filename = sys.modules[root_mod_name].__file__
         package_path = os.path.abspath(os.path.dirname(filename))
 
         # In case the root module is a package we need to chop of the
         # rightmost part.  This needs to go through a helper function
         # because of python 3.3 namespace packages.
-        if _matching_loader_thinks_module_is_package(
-                loader, root_mod_name):
+        if _matching_loader_thinks_module_is_package(loader, root_mod_name):
             package_path = os.path.dirname(package_path)
 
+    return package_path
+
+
+def find_package(import_name):
+    """Finds a package and returns the prefix (or None if the package is
+    not installed) as well as the folder that contains the package or
+    module as a tuple.  The package path returned is the module that would
+    have to be added to the pythonpath in order to make it possible to
+    import the module.  The prefix is the path below which a UNIX like
+    folder structure exists (lib, share etc.).
+    """
+    root_mod_name, _, _ = import_name.partition('.')
+    package_path = _find_package_path(root_mod_name)
     site_parent, site_folder = os.path.split(package_path)
     py_prefix = os.path.abspath(sys.prefix)
     if package_path.startswith(py_prefix):
diff --git a/tests/test_basic.py b/tests/test_basic.py
index 587781b3..6f813627 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -1219,17 +1219,17 @@ def test_response_type_errors():
 
     with pytest.raises(TypeError) as e:
         c.get('/none')
-        assert 'returned None' in str(e)
+        assert 'returned None' in str(e.value)
 
     with pytest.raises(TypeError) as e:
         c.get('/small_tuple')
-        assert 'tuple must have the form' in str(e)
+        assert 'tuple must have the form' in str(e.value)
 
     pytest.raises(TypeError, c.get, '/large_tuple')
 
     with pytest.raises(TypeError) as e:
         c.get('/bad_type')
-        assert 'it was a bool' in str(e)
+        assert 'it was a bool' in str(e.value)
 
     pytest.raises(TypeError, c.get, '/bad_wsgi')
 
@@ -1622,7 +1622,7 @@ def test_debug_mode_complains_after_first_request(app, client):
         @app.route('/foo')
         def broken():
             return 'Meh'
-    assert 'A setup function was called' in str(e)
+    assert 'A setup function was called' in str(e.value)
 
     app.debug = False
 
@@ -1677,9 +1677,9 @@ def test_routing_redirect_debugging(app, client):
     with client:
         with pytest.raises(AssertionError) as e:
             client.post('/foo', data={})
-        assert 'http://localhost/foo/' in str(e)
+        assert 'http://localhost/foo/' in str(e.value)
         assert ('Make sure to directly send '
-                'your POST-request to this URL') in str(e)
+                'your POST-request to this URL') in str(e.value)
 
         rv = client.get('/foo', data={}, follow_redirects=True)
         assert rv.data == b'success'
diff --git a/tests/test_helpers.py b/tests/test_helpers.py
index d6a023e7..75c81059 100644
--- a/tests/test_helpers.py
+++ b/tests/test_helpers.py
@@ -468,8 +468,8 @@ class TestSendfile(object):
     def test_send_file_object_without_mimetype(self, app, req_ctx):
         with pytest.raises(ValueError) as excinfo:
             flask.send_file(StringIO("LOL"))
-        assert 'Unable to infer MIME-type' in str(excinfo)
-        assert 'no filename is available' in str(excinfo)
+        assert 'Unable to infer MIME-type' in str(excinfo.value)
+        assert 'no filename is available' in str(excinfo.value)
 
         flask.send_file(StringIO("LOL"), attachment_filename='filename')
 

--------------------------------------------------------------------------------
Git show output for commit b9c22672724ee3c89cc959bd80d3fcd81afb10e7:
commit b9c22672724ee3c89cc959bd80d3fcd81afb10e7
Author: David Lord <davidism@gmail.com>
Date:   Mon Jul 1 09:49:40 2019 -0700

    fix tests link

diff --git a/README.rst b/README.rst
index 994c799f..6187b3ef 100644
--- a/README.rst
+++ b/README.rst
@@ -62,7 +62,7 @@ Links
 * Releases: https://pypi.org/project/Flask/
 * Code: https://github.com/pallets/flask
 * Issue tracker: https://github.com/pallets/flask/issues
-* Test status: https://dev.azure.com/pallets/pallets/_build?definitionId=2
+* Test status: https://dev.azure.com/pallets/flask/_build
 * Official chat: https://discord.gg/t6rrQZH
 
 .. _WSGI: https://wsgi.readthedocs.io

--------------------------------------------------------------------------------
Git show output for commit cb6272ccc8a836b402d518cf1f90328cf06cd7ea:
commit cb6272ccc8a836b402d518cf1f90328cf06cd7ea
Author: David Lord <davidism@gmail.com>
Date:   Sun Jun 23 15:37:51 2019 -0700

    fix docks linkcheck

diff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst
index 7e7d4382..a68aa31c 100644
--- a/CONTRIBUTING.rst
+++ b/CONTRIBUTING.rst
@@ -9,7 +9,7 @@ Support questions
 Please, don't use the issue tracker for this. Use one of the following
 resources for questions about your own code:
 
-* The ``#get-help`` channel on our Discord chat: https://discord.gg/t6rrQZH
+* The ``#get-help`` channel on our Discord chat: https://discordapp.com/invite/t6rrQZH
 
   * The IRC channel ``#pocoo`` on FreeNode is linked to Discord, but
     Discord is preferred.
@@ -24,15 +24,15 @@ Reporting issues
 ----------------
 
 - Describe what you expected to happen.
-- If possible, include a `minimal, complete, and verifiable example`_ to help
-  us identify the issue. This also helps check that the issue is not with your
-  own code.
+- If possible, include a `minimal reproducible example`_ to help us
+  identify the issue. This also helps check that the issue is not with
+  your own code.
 - Describe what actually happened. Include the full traceback if there was an
   exception.
 - List your Python, Flask, and Werkzeug versions. If possible, check if this
   issue is already fixed in the repository.
 
-.. _minimal, complete, and verifiable example: https://stackoverflow.com/help/mcve
+.. _minimal reproducible example: https://stackoverflow.com/help/minimal-reproducible-example
 
 Submitting patches
 ------------------
@@ -76,10 +76,10 @@ First time setup
 
 .. _GitHub account: https://github.com/join
 .. _latest version of git: https://git-scm.com/downloads
-.. _username: https://help.github.com/articles/setting-your-username-in-git/
-.. _email: https://help.github.com/articles/setting-your-email-in-git/
+.. _username: https://help.github.com/en/articles/setting-your-username-in-git
+.. _email: https://help.github.com/en/articles/setting-your-commit-email-address-in-git
 .. _Fork: https://github.com/pallets/flask/fork
-.. _Clone: https://help.github.com/articles/fork-a-repo/#step-2-create-a-local-clone-of-your-fork
+.. _Clone: https://help.github.com/en/articles/fork-a-repo#step-2-create-a-local-clone-of-your-fork
 
 Start coding
 ~~~~~~~~~~~~
@@ -96,8 +96,8 @@ Start coding
         git checkout -b your-branch-name origin/master
 
 - Using your favorite editor, make your changes, `committing as you go`_.
-- Try to follow `PEP8`_, but you may ignore the line length limit if following
-  it would make the code uglier.
+- Try to follow `PEP8`_. We have a pre-commit config and tests that will
+  ensure the code follows our style guide.
 - Include tests that cover any code changes you make. Make sure the test fails
   without your patch. `Run the tests. <contributing-testsuite_>`_.
 - Push your commits to GitHub and `create a pull request`_ by using::
@@ -106,9 +106,9 @@ Start coding
 
 - Celebrate 🎉
 
-.. _committing as you go: http://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html#commit-your-changes
+.. _committing as you go: https://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html#commit-your-changes
 .. _PEP8: https://pep8.org/
-.. _create a pull request: https://help.github.com/articles/creating-a-pull-request/
+.. _create a pull request: https://help.github.com/en/articles/creating-a-pull-request
 
 .. _contributing-testsuite:
 
@@ -157,19 +157,8 @@ Build the docs in the ``docs`` directory using Sphinx::
 
 Open ``_build/html/index.html`` in your browser to view the docs.
 
-Read more about `Sphinx <http://www.sphinx-doc.org>`_.
-
-
-make targets
-~~~~~~~~~~~~
-
-Flask provides a ``Makefile`` with various shortcuts. They will ensure that
-all dependencies are installed.
+Read more about `Sphinx <https://www.sphinx-doc.org/en/master/>`_.
 
-- ``make test`` runs the basic test suite with ``pytest``
-- ``make cov`` runs the basic test suite with ``coverage``
-- ``make test-all`` runs the full test suite with ``tox``
-- ``make docs`` builds the HTML documentation
 
 Caution: zero-padded file modes
 -------------------------------
diff --git a/docs/api.rst b/docs/api.rst
index c3eda1cf..3f5dbf8b 100644
--- a/docs/api.rst
+++ b/docs/api.rst
@@ -43,9 +43,9 @@ Incoming Request Data
    .. attribute:: base_url
    .. attribute:: url_root
 
-      Provides different ways to look at the current `IRI
-      <http://tools.ietf.org/html/rfc3987>`_.  Imagine your application is
-      listening on the following application root::
+      Provides different ways to look at the current :rfc:`3987`.
+      Imagine your application is listening on the following application
+      root::
 
           http://www.example.com/myapplication
 
diff --git a/docs/becomingbig.rst b/docs/becomingbig.rst
index 16dea1da..201be2e8 100644
--- a/docs/becomingbig.rst
+++ b/docs/becomingbig.rst
@@ -44,7 +44,7 @@ The :ref:`app-dispatch` chapter shows in detail how to apply middleware. You
 can introduce WSGI middleware to wrap your Flask instances and introduce fixes
 and changes at the layer between your Flask application and your HTTP
 server. Werkzeug includes several `middlewares
-<http://werkzeug.pocoo.org/docs/middlewares/>`_.
+<https://werkzeug.palletsprojects.com/middleware/>`_.
 
 Fork.
 -----
diff --git a/docs/cli.rst b/docs/cli.rst
index 85b99fcb..abf15ff7 100644
--- a/docs/cli.rst
+++ b/docs/cli.rst
@@ -10,7 +10,7 @@ interface, in your virtualenv. Executed from the terminal, this script gives
 access to built-in, extension, and application-defined commands. The ``--help``
 option will give more information about any commands and options.
 
-.. _Click: http://click.pocoo.org/
+.. _Click: https://click.palletsprojects.com/
 
 
 Application Discovery
@@ -340,7 +340,7 @@ they are installed. Entry points are specified in :file:`setup.py` ::
     )
 
 
-.. _entry point: https://packaging.python.org/tutorials/distributing-packages/#entry-points
+.. _entry point: https://packaging.python.org/tutorials/packaging-projects/#entry-points
 
 Inside :file:`flask_my_extension/commands.py` you can then export a Click
 object::
@@ -409,7 +409,7 @@ script is available. Note that you don't need to set ``FLASK_APP``. ::
     The ``flask`` command, being separate from your code, does not have
     this issue and is recommended in most cases.
 
-.. _console script: https://packaging.python.org/tutorials/distributing-packages/#console-scripts
+.. _console script: https://packaging.python.org/tutorials/packaging-projects/#console-scripts
 
 
 PyCharm Integration
diff --git a/docs/deploying/cgi.rst b/docs/deploying/cgi.rst
index 503d9426..dbc8b08a 100644
--- a/docs/deploying/cgi.rst
+++ b/docs/deploying/cgi.rst
@@ -58,4 +58,4 @@ work in that case:
 
 For more information consult the documentation of your webserver.
 
-.. _App Engine: https://developers.google.com/appengine/
+.. _App Engine: https://cloud.google.com/appengine/docs/
diff --git a/docs/deploying/index.rst b/docs/deploying/index.rst
index edf5a256..5e98f98c 100644
--- a/docs/deploying/index.rst
+++ b/docs/deploying/index.rst
@@ -17,12 +17,9 @@ Hosted options
 --------------
 
 - `Deploying Flask on Heroku <https://devcenter.heroku.com/articles/getting-started-with-python>`_
-- `Deploying Flask on OpenShift <https://developers.openshift.com/en/python-flask.html>`_
-- `Deploying Flask on Webfaction <http://flask.pocoo.org/snippets/65/>`_
 - `Deploying Flask on Google App Engine <https://cloud.google.com/appengine/docs/standard/python/getting-started/python-standard-env>`_
 - `Deploying Flask on AWS Elastic Beanstalk <https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html>`_
-- `Sharing your Localhost Server with Localtunnel <http://flask.pocoo.org/snippets/89/>`_
-- `Deploying on Azure (IIS) <https://azure.microsoft.com/documentation/articles/web-sites-python-configure/>`_
+- `Deploying on Azure (IIS) <https://docs.microsoft.com/en-us/azure/app-service/containers/how-to-configure-python>`_
 - `Deploying on PythonAnywhere <https://help.pythonanywhere.com/pages/Flask/>`_
 
 Self-hosted options
diff --git a/docs/deploying/uwsgi.rst b/docs/deploying/uwsgi.rst
index 50c85fb2..7c7104f7 100644
--- a/docs/deploying/uwsgi.rst
+++ b/docs/deploying/uwsgi.rst
@@ -69,4 +69,4 @@ to have it in the URL root its a bit simpler::
 .. _nginx: https://nginx.org/
 .. _lighttpd: https://www.lighttpd.net/
 .. _cherokee: http://cherokee-project.com/
-.. _uwsgi: http://projects.unbit.it/uwsgi/
+.. _uwsgi: https://uwsgi-docs.readthedocs.io/en/latest/
diff --git a/docs/deploying/wsgi-standalone.rst b/docs/deploying/wsgi-standalone.rst
index a7719126..99ef2217 100644
--- a/docs/deploying/wsgi-standalone.rst
+++ b/docs/deploying/wsgi-standalone.rst
@@ -43,11 +43,10 @@ Running `uWSGI HTTP Router`_::
 
     uwsgi --http 127.0.0.1:5000 --module myproject:app
 
-For a more optimized setup, see `configuring uWSGI and NGINX`_.
+For a more optimized setup, see :doc:`/deploying/uwsgi`.
 
-.. _uWSGI: http://uwsgi-docs.readthedocs.io/en/latest/
-.. _uWSGI HTTP Router: http://uwsgi-docs.readthedocs.io/en/latest/HTTP.html#the-uwsgi-http-https-router
-.. _configuring uWSGI and NGINX: uwsgi.html#starting-your-app-with-uwsgi
+.. _uWSGI: https://uwsgi-docs.readthedocs.io/en/latest/
+.. _uWSGI HTTP Router: https://uwsgi-docs.readthedocs.io/en/latest/HTTP.html#the-uwsgi-http-https-router
 
 Gevent
 -------
@@ -86,7 +85,7 @@ application from ``myproject``::
 
     twistd -n web --port tcp:8080 --wsgi myproject.app
 
-.. _Twisted: https://twistedmatrix.com/
+.. _Twisted: https://twistedmatrix.com/trac/
 .. _Twisted Web: https://twistedmatrix.com/trac/wiki/TwistedWeb
 
 .. _deploying-proxy-setups:
diff --git a/docs/errorhandling.rst b/docs/errorhandling.rst
index 4c260112..f985a692 100644
--- a/docs/errorhandling.rst
+++ b/docs/errorhandling.rst
@@ -34,10 +34,10 @@ Error Logging Tools
 Sending error mails, even if just for critical ones, can become
 overwhelming if enough users are hitting the error and log files are
 typically never looked at. This is why we recommend using `Sentry
-<https://www.getsentry.com/>`_ for dealing with application errors.  It's
+<https://sentry.io/welcome/>`_ for dealing with application errors.  It's
 available as an Open Source project `on GitHub
 <https://github.com/getsentry/sentry>`__ and is also available as a `hosted version
-<https://getsentry.com/signup/>`_ which you can try for free. Sentry
+<https://sentry.io/signup/>`_ which you can try for free. Sentry
 aggregates duplicate errors, captures the full stack trace and local
 variables for debugging, and sends you mails based on new errors or
 frequency thresholds.
diff --git a/docs/extensiondev.rst b/docs/extensiondev.rst
index 57d7425b..87c100fe 100644
--- a/docs/extensiondev.rst
+++ b/docs/extensiondev.rst
@@ -4,9 +4,8 @@ Flask Extension Development
 ===========================
 
 Flask, being a microframework, often requires some repetitive steps to get
-a third party library working.  Because very often these steps could be
-abstracted to support multiple projects the `Flask Extension Registry`_
-was created.
+a third party library working. Many such extensions are already available
+on `PyPI <https://pypi.org/search/?c=Framework+%3A%3A+Flask>`_.
 
 If you want to create your own Flask extension for something that does not
 exist yet, this guide to extension development will help you get your
@@ -328,8 +327,8 @@ extension to be approved you have to follow these guidelines:
 6.  Approved extensions must define all their dependencies in the
     :file:`setup.py` file unless a dependency cannot be met because it is not
     available on PyPI.
-7.  The documentation must use the ``flask`` theme from the `Official
-    Pallets Themes`_.
+7.  The documentation must use the ``flask`` theme from the
+    `Official Pallets Themes`_.
 8.  The setup.py description (and thus the PyPI description) has to
     link to the documentation, website (if there is one) and there
     must be a link to automatically install the development version
@@ -342,4 +341,4 @@ extension to be approved you have to follow these guidelines:
 .. _OAuth extension: https://pythonhosted.org/Flask-OAuth/
 .. _mailinglist: http://flask.pocoo.org/mailinglist/
 .. _IRC channel: http://flask.pocoo.org/community/irc/
-.. _Official Pallets Themes: https://pypi.org/project/pallets-sphinx-themes/
+.. _Official Pallets Themes: https://pypi.org/project/Pallets-Sphinx-Themes/
diff --git a/docs/htmlfaq.rst b/docs/htmlfaq.rst
index 0b6ff504..faa674ff 100644
--- a/docs/htmlfaq.rst
+++ b/docs/htmlfaq.rst
@@ -186,7 +186,7 @@ Many other features have been added, as well. A good guide to new features
 in HTML5 is Mark Pilgrim's soon-to-be-published book, `Dive Into HTML5`_.
 Not all of them are supported in browsers yet, however, so use caution.
 
-.. _Dive Into HTML5: http://diveintohtml5.info/
+.. _Dive Into HTML5: https://diveintohtml5.info/
 
 What should be used?
 --------------------
diff --git a/docs/index.rst b/docs/index.rst
index 4e80f34a..e58233b8 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -19,7 +19,7 @@ Flask depends on the `Jinja`_ template engine and the `Werkzeug`_ WSGI
 toolkit. The documentation for these libraries can be found at:
 
 - `Jinja documentation <http://jinja.pocoo.org/docs>`_
-- `Werkzeug documentation <http://werkzeug.pocoo.org/docs>`_
+- `Werkzeug documentation <https://werkzeug.palletsprojects.com/>`_
 
 .. _Jinja: https://www.palletsprojects.com/p/jinja/
 .. _Werkzeug: https://www.palletsprojects.com/p/werkzeug/
diff --git a/docs/installation.rst b/docs/installation.rst
index e172a1c9..7cc861f5 100644
--- a/docs/installation.rst
+++ b/docs/installation.rst
@@ -25,11 +25,11 @@ These distributions will be installed automatically when installing Flask.
 * `Click`_ is a framework for writing command line applications. It provides
   the ``flask`` command and allows adding custom management commands.
 
-.. _Werkzeug: http://werkzeug.pocoo.org/
-.. _Jinja: http://jinja.pocoo.org/
-.. _MarkupSafe: https://pypi.org/project/MarkupSafe/
-.. _ItsDangerous: https://pythonhosted.org/itsdangerous/
-.. _Click: http://click.pocoo.org/
+.. _Werkzeug: https://palletsprojects.com/p/werkzeug/
+.. _Jinja: https://palletsprojects.com/p/jinja/
+.. _MarkupSafe: https://palletsprojects.com/p/markupsafe/
+.. _ItsDangerous: https://palletsprojects.com/p/itsdangerous/
+.. _Click: https://palletsprojects.com/p/click/
 
 Optional dependencies
 ~~~~~~~~~~~~~~~~~~~~~
diff --git a/docs/patterns/appfactories.rst b/docs/patterns/appfactories.rst
index 3e880205..a6d91cae 100644
--- a/docs/patterns/appfactories.rst
+++ b/docs/patterns/appfactories.rst
@@ -60,7 +60,7 @@ Factories & Extensions
 It's preferable to create your extensions and app factories so that the
 extension object does not initially get bound to the application.
 
-Using `Flask-SQLAlchemy <http://flask-sqlalchemy.pocoo.org/>`_,
+Using `Flask-SQLAlchemy <https://flask-sqlalchemy.palletsprojects.com/>`_,
 as an example, you should not do something along those lines::
 
     def create_app(config_filename):
@@ -93,13 +93,13 @@ To run such an application, you can use the :command:`flask` command::
 
     export FLASK_APP=myapp
     flask run
-    
-Flask will automatically detect the factory (``create_app`` or ``make_app``) 
+
+Flask will automatically detect the factory (``create_app`` or ``make_app``)
 in ``myapp``. You can also pass arguments to the factory like this::
 
     export FLASK_APP="myapp:create_app('dev')"
     flask run
-    
+
 Then the ``create_app`` factory in ``myapp`` is called with the string
 ``'dev'`` as the argument. See :doc:`/cli` for more detail.
 
diff --git a/docs/patterns/jquery.rst b/docs/patterns/jquery.rst
index db27f03d..b0c0287f 100644
--- a/docs/patterns/jquery.rst
+++ b/docs/patterns/jquery.rst
@@ -11,7 +11,7 @@ Python primitives (numbers, strings, dicts and lists) look like which is
 widely supported and very easy to parse.  It became popular a few years
 ago and quickly replaced XML as transport format in web applications.
 
-.. _jQuery: http://jquery.com/
+.. _jQuery: https://jquery.com/
 
 Loading jQuery
 --------------
@@ -27,7 +27,7 @@ to add a script statement to the bottom of your ``<body>`` to load jQuery:
      url_for('static', filename='jquery.js') }}"></script>
 
 Another method is using Google's `AJAX Libraries API
-<https://developers.google.com/speed/libraries/devguide>`_ to load jQuery:
+<https://developers.google.com/speed/libraries/>`_ to load jQuery:
 
 .. sourcecode:: html
 
diff --git a/docs/patterns/sqlalchemy.rst b/docs/patterns/sqlalchemy.rst
index 831d54f0..e2dfcc5d 100644
--- a/docs/patterns/sqlalchemy.rst
+++ b/docs/patterns/sqlalchemy.rst
@@ -22,7 +22,7 @@ if you want to get started quickly.
 You can download `Flask-SQLAlchemy`_ from `PyPI
 <https://pypi.org/project/Flask-SQLAlchemy/>`_.
 
-.. _Flask-SQLAlchemy: http://flask-sqlalchemy.pocoo.org/
+.. _Flask-SQLAlchemy: https://flask-sqlalchemy.palletsprojects.com/
 
 
 Declarative
diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index 625f1787..ee19ea85 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -69,8 +69,8 @@ This launches a very simple builtin server, which is good enough for testing
 but probably not what you want to use in production. For deployment options see
 :ref:`deployment`.
 
-Now head over to `http://127.0.0.1:5000/ <http://127.0.0.1:5000/>`_, and you
-should see your hello world greeting.
+Now head over to http://127.0.0.1:5000/, and you should see your hello
+world greeting.
 
 .. _public-server:
 
@@ -167,7 +167,7 @@ Screenshot of the debugger in action:
 More information on using the debugger can be found in the `Werkzeug
 documentation`_.
 
-.. _Werkzeug documentation: http://werkzeug.pocoo.org/docs/debug/#using-the-debugger
+.. _Werkzeug documentation: https://werkzeug.palletsprojects.com/debug/#using-the-debugger
 
 Have another debugger in mind? See :ref:`working-with-debuggers`.
 
@@ -384,7 +384,7 @@ package it's actually inside your package:
 
 For templates you can use the full power of Jinja2 templates.  Head over
 to the official `Jinja2 Template Documentation
-<http://jinja.pocoo.org/docs/templates>`_ for more information.
+<http://jinja.pocoo.org/docs/templates/>`_ for more information.
 
 Here is an example template:
 
@@ -819,9 +819,8 @@ Here are some example log calls::
     app.logger.error('An error occurred')
 
 The attached :attr:`~flask.Flask.logger` is a standard logging
-:class:`~logging.Logger`, so head over to the official `logging
-documentation <https://docs.python.org/library/logging.html>`_ for more
-information.
+:class:`~logging.Logger`, so head over to the official :mod:`logging`
+docs for more information.
 
 Read more on :ref:`application-errors`.
 
diff --git a/docs/templating.rst b/docs/templating.rst
index 290c0054..3fa7a066 100644
--- a/docs/templating.rst
+++ b/docs/templating.rst
@@ -11,7 +11,7 @@ An extension can depend on Jinja2 being present.
 This section only gives a very quick introduction into how Jinja2
 is integrated into Flask.  If you want information on the template
 engine's syntax itself, head over to the official `Jinja2 Template
-Documentation <http://jinja.pocoo.org/docs/templates>`_ for
+Documentation <http://jinja.pocoo.org/docs/templates/>`_ for
 more information.
 
 Jinja Setup
diff --git a/docs/testing.rst b/docs/testing.rst
index bc9c0ea1..25275d61 100644
--- a/docs/testing.rst
+++ b/docs/testing.rst
@@ -20,8 +20,7 @@ framework for our tests. You can install it with ``pip``, like so::
 
     pip install pytest
 
-.. _pytest:
-   https://pytest.org
+.. _pytest: https://docs.pytest.org/
 
 The Application
 ---------------
@@ -453,5 +452,5 @@ This is useful for testing complex validation rules and custom types. ::
         context = hello_command.make_context('hello', ['--name', 'flask'])
         assert context.params['name'] == 'FLASK'
 
-.. _click: http://click.pocoo.org/
-.. _utilities for testing: http://click.pocoo.org/testing
+.. _click: https://click.palletsprojects.com/
+.. _utilities for testing: https://click.palletsprojects.com/testing/
diff --git a/docs/tutorial/deploy.rst b/docs/tutorial/deploy.rst
index a0c052ea..b6eb385e 100644
--- a/docs/tutorial/deploy.rst
+++ b/docs/tutorial/deploy.rst
@@ -116,6 +116,6 @@ your application. Waitress is just an example, chosen for the tutorial
 because it supports both Windows and Linux. There are many more WSGI
 servers and deployment options that you may choose for your project.
 
-.. _Waitress: https://docs.pylonsproject.org/projects/waitress/
+.. _Waitress: https://docs.pylonsproject.org/projects/waitress/en/stable/
 
 Continue to :doc:`next`.
diff --git a/docs/tutorial/install.rst b/docs/tutorial/install.rst
index 06f63dea..06c265ba 100644
--- a/docs/tutorial/install.rst
+++ b/docs/tutorial/install.rst
@@ -70,7 +70,7 @@ files.
 See the `official packaging guide`_ for another explanation of the files
 and options used.
 
-.. _official packaging guide: https://packaging.python.org/tutorials/distributing-packages/
+.. _official packaging guide: https://packaging.python.org/tutorials/packaging-projects/
 
 
 Install the Project
diff --git a/docs/unicode.rst b/docs/unicode.rst
index 3ea10a07..6e5612d2 100644
--- a/docs/unicode.rst
+++ b/docs/unicode.rst
@@ -6,9 +6,9 @@ text.  Not only these libraries, also the majority of web related Python
 libraries that deal with text.  If you don't know Unicode so far, you
 should probably read `The Absolute Minimum Every Software Developer
 Absolutely, Positively Must Know About Unicode and Character Sets
-<http://www.joelonsoftware.com/articles/Unicode.html>`_.  This part of the
-documentation just tries to cover the very basics so that you have a
-pleasant experience with Unicode related things.
+<https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/>`_.
+This part of the documentation just tries to cover the very basics so
+that you have a pleasant experience with Unicode related things.
 
 Automatic Conversion
 --------------------

--------------------------------------------------------------------------------
Git show output for commit 46a67b6789ceb3ba814afdb72ed7770033858a73:
commit 46a67b6789ceb3ba814afdb72ed7770033858a73
Merge: 6369537a dbd4520c
Author: David Lord <davidism@gmail.com>
Date:   Wed Jun 12 08:17:25 2019 -0700

    Merge pull request #3261 from pallets/fix-server-name-warnings
    
    fix tests failing with server name warnings


--------------------------------------------------------------------------------
Git show output for commit dbd4520ccbe0954d8ff4f926ba5f16c4f5291533:
commit dbd4520ccbe0954d8ff4f926ba5f16c4f5291533
Author: David Lord <davidism@gmail.com>
Date:   Fri Jun 7 13:23:13 2019 -0700

    fix tests failing with server name warnings
    
    After pallets/werkzeug#1577, mismatched configured and real server
    names will show a warning in addition to raising 404. This caused
    tests that did this deliberately to fail.
    
    This patch removes the pytest fixture we were using to fail on
    warnings, instead using the standard `-Werror` option. This speeds
    up the tests by ~3x.

diff --git a/tests/conftest.py b/tests/conftest.py
index 2c19c763..7b42d6c7 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -196,10 +196,3 @@ def purge_module(request):
         request.addfinalizer(lambda: sys.modules.pop(name, None))
 
     return inner
-
-
-@pytest.fixture(autouse=True)
-def catch_deprecation_warnings(recwarn):
-    yield
-    gc.collect()
-    assert not recwarn.list, '\n'.join(str(w.message) for w in recwarn.list)
diff --git a/tests/test_basic.py b/tests/test_basic.py
index 08b4058c..169081e3 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -1442,62 +1442,46 @@ def test_request_locals():
     assert not flask.g
 
 
-def test_test_app_proper_environ():
+def test_server_name_subdomain():
     app = flask.Flask(__name__, subdomain_matching=True)
-    app.config.update(
-        SERVER_NAME='localhost.localdomain:5000'
-    )
     client = app.test_client()
 
-    @app.route('/')
+    @app.route("/")
     def index():
-        return 'Foo'
+        return "default"
 
-    @app.route('/', subdomain='foo')
+    @app.route("/", subdomain="foo")
     def subdomain():
-        return 'Foo SubDomain'
+        return "subdomain"
 
-    rv = client.get('/')
-    assert rv.data == b'Foo'
+    app.config["SERVER_NAME"] = "dev.local:5000"
+    rv = client.get("/")
+    assert rv.data == b"default"
 
-    rv = client.get('/', 'http://localhost.localdomain:5000')
-    assert rv.data == b'Foo'
+    rv = client.get("/", "http://dev.local:5000")
+    assert rv.data == b"default"
 
-    rv = client.get('/', 'https://localhost.localdomain:5000')
-    assert rv.data == b'Foo'
+    rv = client.get("/", "https://dev.local:5000")
+    assert rv.data == b"default"
 
-    app.config.update(SERVER_NAME='localhost.localdomain')
-    rv = client.get('/', 'https://localhost.localdomain')
-    assert rv.data == b'Foo'
+    app.config["SERVER_NAME"] = "dev.local:443"
+    rv = client.get("/", "https://dev.local")
 
-    try:
-        app.config.update(SERVER_NAME='localhost.localdomain:443')
-        rv = client.get('/', 'https://localhost.localdomain')
-        # Werkzeug 0.8
-        assert rv.status_code == 404
-    except ValueError as e:
-        # Werkzeug 0.7
-        assert str(e) == (
-            "the server name provided "
-            "('localhost.localdomain:443') does not match the "
-            "server name from the WSGI environment ('localhost.localdomain')"
-        )
+    # Werkzeug 1.0 fixes matching https scheme with 443 port
+    if rv.status_code != 404:
+        assert rv.data == b"default"
 
-    try:
-        app.config.update(SERVER_NAME='localhost.localdomain')
-        rv = client.get('/', 'http://foo.localhost')
-        # Werkzeug 0.8
+    app.config["SERVER_NAME"] = "dev.local"
+    rv = client.get("/", "https://dev.local")
+    assert rv.data == b"default"
+
+    # suppress Werkzeug 1.0 warning about name mismatch
+    with pytest.warns(None):
+        rv = client.get("/", "http://foo.localhost")
         assert rv.status_code == 404
-    except ValueError as e:
-        # Werkzeug 0.7
-        assert str(e) == (
-            "the server name provided "
-            "('localhost.localdomain') does not match the "
-            "server name from the WSGI environment ('foo.localhost')"
-        )
 
-    rv = client.get('/', 'http://foo.localhost.localdomain')
-    assert rv.data == b'Foo SubDomain'
+    rv = client.get("/", "http://foo.dev.local")
+    assert rv.data == b"subdomain"
 
 
 def test_exception_propagation(app, client):
@@ -1854,9 +1838,11 @@ def test_subdomain_matching_other_name(matching):
     def index():
         return '', 204
 
-    # ip address can't match name
-    rv = client.get('/', 'http://127.0.0.1:3000/')
-    assert rv.status_code == 404 if matching else 204
+    # suppress Werkzeug 0.15 warning about name mismatch
+    with pytest.warns(None):
+        # ip address can't match name
+        rv = client.get('/', 'http://127.0.0.1:3000/')
+        assert rv.status_code == 404 if matching else 204
 
     # allow all subdomains if matching is disabled
     rv = client.get('/', 'http://www.localhost.localdomain:3000/')
diff --git a/tests/test_helpers.py b/tests/test_helpers.py
index e3751899..d85d9f6e 100644
--- a/tests/test_helpers.py
+++ b/tests/test_helpers.py
@@ -443,7 +443,7 @@ class TestSendfile(object):
             assert rv.data == f.read()
         rv.close()
 
-    def test_send_file_xsendfile(self, app, req_ctx, catch_deprecation_warnings):
+    def test_send_file_xsendfile(self, app, req_ctx):
         app.use_x_sendfile = True
         rv = flask.send_file('static/index.html')
         assert rv.direct_passthrough
diff --git a/tests/test_reqctx.py b/tests/test_reqctx.py
index 75d79c67..eea4b63f 100644
--- a/tests/test_reqctx.py
+++ b/tests/test_reqctx.py
@@ -88,15 +88,10 @@ def test_proper_test_request_context(app):
         assert flask.url_for('sub', _external=True) == \
                'http://foo.localhost.localdomain:5000/'
 
-    try:
+    # suppress Werkzeug 0.15 warning about name mismatch
+    with pytest.warns(None):
         with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):
             pass
-    except ValueError as e:
-        assert str(e) == (
-            "the server name provided "
-            "('localhost.localdomain:5000') does not match the "
-            "server name from the WSGI environment ('localhost')"
-        )
 
     app.config.update(SERVER_NAME='localhost')
     with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):
diff --git a/tox.ini b/tox.ini
index 618a6ff7..7ee45b3f 100644
--- a/tox.ini
+++ b/tox.ini
@@ -33,7 +33,7 @@ commands =
     pip install -q -e examples/javascript[test]
 
     # pytest-cov doesn't seem to play nice with -p
-    coverage run -p -m pytest --tb=short {posargs:tests examples}
+    coverage run -p -m pytest --tb=short -Werror {posargs:tests examples}
 
 [testenv:nightly]
 # courtesy Python nightly test, don't fail the build in CI
@@ -41,7 +41,7 @@ ignore_outcome = true
 commands =
     pip install -q -e examples/tutorial[test]
     pip install -q -e examples/javascript[test]
-    coverage run -p -m pytest --tb=short --junitxml=test-results.xml {posargs:tests examples}
+    coverage run -p -m pytest --tb=short -Werror --junitxml=test-results.xml {posargs:tests examples}
 
 [testenv:stylecheck]
 deps = pre-commit

--------------------------------------------------------------------------------
Git show output for commit d4b688bd035b9704b3168b28fed39c8fcfe3b997:
commit d4b688bd035b9704b3168b28fed39c8fcfe3b997
Merge: 3db46979 53c893b6
Author: David Lord <davidism@gmail.com>
Date:   Sat Jun 1 12:28:29 2019 -0400

    Merge pull request #3247 from pallets/join-strings
    
    fix string concats left over by black


--------------------------------------------------------------------------------
Git show output for commit 53c893b646252d610e877eb9385e9e250a1ae5e1:
commit 53c893b646252d610e877eb9385e9e250a1ae5e1
Author: David Lord <davidism@gmail.com>
Date:   Sat Jun 1 09:22:20 2019 -0700

    fix string concats left over by black

diff --git a/examples/tutorial/flaskr/blog.py b/examples/tutorial/flaskr/blog.py
index 86dd19c7..445fb5a1 100644
--- a/examples/tutorial/flaskr/blog.py
+++ b/examples/tutorial/flaskr/blog.py
@@ -74,7 +74,7 @@ def create():
         else:
             db = get_db()
             db.execute(
-                "INSERT INTO post (title, body, author_id)" " VALUES (?, ?, ?)",
+                "INSERT INTO post (title, body, author_id) VALUES (?, ?, ?)",
                 (title, body, g.user["id"]),
             )
             db.commit()
diff --git a/src/flask/app.py b/src/flask/app.py
index 962a5e91..6e0647e3 100644
--- a/src/flask/app.py
+++ b/src/flask/app.py
@@ -1931,7 +1931,7 @@ class Flask(_PackageBoundObject):
             if not from_error_handler:
                 raise
             self.logger.exception(
-                "Request finalizing failed with an " "error while handling an error"
+                "Request finalizing failed with an error while handling an error"
             )
         return response
 
diff --git a/src/flask/cli.py b/src/flask/cli.py
index f57c237e..6f0866ce 100644
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -266,7 +266,7 @@ def get_version(ctx, param, value):
     import werkzeug
     from . import __version__
 
-    message = "Python %(python)s\n" "Flask %(flask)s\n" "Werkzeug %(werkzeug)s"
+    message = "Python %(python)s\nFlask %(flask)s\nWerkzeug %(werkzeug)s"
     click.echo(
         message
         % {
diff --git a/src/flask/ctx.py b/src/flask/ctx.py
index 176d9d8d..c23f7d19 100644
--- a/src/flask/ctx.py
+++ b/src/flask/ctx.py
@@ -437,9 +437,10 @@ class RequestContext(object):
             if app_ctx is not None:
                 app_ctx.pop(exc)
 
-            assert (
-                rv is self
-            ), "Popped wrong request context.  " "(%r instead of %r)" % (rv, self)
+            assert rv is self, "Popped wrong request context. (%r instead of %r)" % (
+                rv,
+                self,
+            )
 
     def auto_pop(self, exc):
         if self.request.environ.get("flask._preserve_context") or (
diff --git a/src/flask/helpers.py b/src/flask/helpers.py
index 91699042..b5ed62e0 100644
--- a/src/flask/helpers.py
+++ b/src/flask/helpers.py
@@ -94,7 +94,7 @@ def _endpoint_from_view_func(view_func):
     """Internal helper that returns the default endpoint for a given
     function.  This always is the function name.
     """
-    assert view_func is not None, "expected view func if endpoint " "is not provided."
+    assert view_func is not None, "expected view func if endpoint is not provided."
     return view_func.__name__
 
 
@@ -598,9 +598,7 @@ def send_file(
     headers = Headers()
     if as_attachment:
         if attachment_filename is None:
-            raise TypeError(
-                "filename unavailable, required for " "sending as attachment"
-            )
+            raise TypeError("filename unavailable, required for sending as attachment")
 
         if not isinstance(attachment_filename, text_type):
             attachment_filename = attachment_filename.decode("utf-8")
diff --git a/src/flask/testing.py b/src/flask/testing.py
index 15546241..354891e3 100644
--- a/src/flask/testing.py
+++ b/src/flask/testing.py
@@ -156,7 +156,7 @@ class FlaskClient(Client):
         """
         if self.cookie_jar is None:
             raise RuntimeError(
-                "Session transactions only make sense " "with cookies enabled."
+                "Session transactions only make sense with cookies enabled."
             )
         app = self.application
         environ_overrides = kwargs.setdefault("environ_overrides", {})
@@ -167,7 +167,7 @@ class FlaskClient(Client):
             sess = session_interface.open_session(app, c.request)
             if sess is None:
                 raise RuntimeError(
-                    "Session backend did not open a session. " "Check the configuration"
+                    "Session backend did not open a session. Check the configuration"
                 )
 
             # Since we have to open a new request context for the session
diff --git a/tests/test_basic.py b/tests/test_basic.py
index 410b12f2..92214272 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -1726,7 +1726,7 @@ def test_routing_redirect_debugging(app, client):
         with pytest.raises(AssertionError) as e:
             client.post("/foo", data={})
         assert "http://localhost/foo/" in str(e)
-        assert ("Make sure to directly send " "your POST-request to this URL") in str(e)
+        assert ("Make sure to directly send your POST-request to this URL") in str(e)
 
         rv = client.get("/foo", data={}, follow_redirects=True)
         assert rv.data == b"success"
diff --git a/tests/test_config.py b/tests/test_config.py
index 801469e7..ee3555c2 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -98,7 +98,7 @@ def test_config_from_envvar_missing(monkeypatch):
         app.config.from_envvar("FOO_SETTINGS")
     msg = str(e.value)
     assert msg.startswith(
-        "[Errno 2] Unable to load configuration " "file (No such file or directory):"
+        "[Errno 2] Unable to load configuration file (No such file or directory):"
     )
     assert msg.endswith("missing.cfg'")
     assert not app.config.from_envvar("FOO_SETTINGS", silent=True)
@@ -110,7 +110,7 @@ def test_config_missing():
         app.config.from_pyfile("missing.cfg")
     msg = str(e.value)
     assert msg.startswith(
-        "[Errno 2] Unable to load configuration " "file (No such file or directory):"
+        "[Errno 2] Unable to load configuration file (No such file or directory):"
     )
     assert msg.endswith("missing.cfg'")
     assert not app.config.from_pyfile("missing.cfg", silent=True)
@@ -122,7 +122,7 @@ def test_config_missing_json():
         app.config.from_json("missing.json")
     msg = str(e.value)
     assert msg.startswith(
-        "[Errno 2] Unable to load configuration " "file (No such file or directory):"
+        "[Errno 2] Unable to load configuration file (No such file or directory):"
     )
     assert msg.endswith("missing.json'")
     assert not app.config.from_json("missing.json", silent=True)
diff --git a/tests/test_instance_config.py b/tests/test_instance_config.py
index e37dfde7..2499fcbb 100644
--- a/tests/test_instance_config.py
+++ b/tests/test_instance_config.py
@@ -69,7 +69,7 @@ def test_installed_module_paths(
     modules_tmpdir, modules_tmpdir_prefix, purge_module, site_packages, limit_loader
 ):
     site_packages.join("site_app.py").write(
-        "import flask\n" "app = flask.Flask(__name__)\n"
+        "import flask\napp = flask.Flask(__name__)\n"
     )
     purge_module("site_app")
 
diff --git a/tests/test_templating.py b/tests/test_templating.py
index 068dd583..4f50905f 100644
--- a/tests/test_templating.py
+++ b/tests/test_templating.py
@@ -46,7 +46,7 @@ def test_request_less_rendering(app, app_ctx):
     def context_processor():
         return dict(foo=42)
 
-    rv = flask.render_template_string("Hello {{ config.WORLD_NAME }} " "{{ foo }}")
+    rv = flask.render_template_string("Hello {{ config.WORLD_NAME }} {{ foo }}")
     assert rv == "Hello Special World 42"
 
 

--------------------------------------------------------------------------------
Git show output for commit 6e995f23792c1cc1809292c770d02797d80622fb:
commit 6e995f23792c1cc1809292c770d02797d80622fb
Merge: 5e158505 d981cc67
Author: David Lord <davidism@gmail.com>
Date:   Fri May 31 14:06:54 2019 -0400

    Merge pull request #3240 from ultimecia7/docfix
    
    Fix testing documentation to demonstrate using test client with teardown


--------------------------------------------------------------------------------
Git show output for commit 5e15850532be5521dac7082b155b15b83e1236e8:
commit 5e15850532be5521dac7082b155b15b83e1236e8
Merge: cd4023d9 e45370b9
Author: David Lord <davidism@gmail.com>
Date:   Fri May 31 13:58:40 2019 -0400

    Merge pull request #3232 from lordmauve/environbuilder
    
    Convert make_test_environ_builder into class (fixes #3207)


--------------------------------------------------------------------------------
Git show output for commit cd4023d9d2ab630ce4f95856f065072ef8badb2b:
commit cd4023d9d2ab630ce4f95856f065072ef8badb2b
Merge: 91e53da0 55ad09c9
Author: David Lord <davidism@gmail.com>
Date:   Fri May 31 13:44:22 2019 -0400

    Merge pull request #3237 from scrosby/fix-3218
    
    Move python properties to decorator syntax


--------------------------------------------------------------------------------
Git show output for commit 976dfedaa9efdb566333ea829b12751820268f67:
commit 976dfedaa9efdb566333ea829b12751820268f67
Author: Daniel Pope <mauve@mauveweb.co.uk>
Date:   Fri May 31 15:49:23 2019 +0100

    Convert make_test_environ_builder into class (fixes #3207)

diff --git a/flask/app.py b/flask/app.py
index 654ee963..2816b4c4 100644
--- a/flask/app.py
+++ b/flask/app.py
@@ -2359,9 +2359,9 @@ class Flask(_PackageBoundObject):
         :param kwargs: other keyword arguments passed to
             :class:`~werkzeug.test.EnvironBuilder`.
         """
-        from flask.testing import make_test_environ_builder
+        from flask.testing import EnvironBuilder
 
-        builder = make_test_environ_builder(self, *args, **kwargs)
+        builder = EnvironBuilder(self, *args, **kwargs)
 
         try:
             return self.request_context(builder.get_environ())
diff --git a/flask/testing.py b/flask/testing.py
index f2fbad6c..15e6d70d 100644
--- a/flask/testing.py
+++ b/flask/testing.py
@@ -9,8 +9,9 @@
     :copyright: © 2010 by the Pallets team.
     :license: BSD, see LICENSE for more details.
 """
-
+import warnings
 import werkzeug
+import werkzeug.test
 from contextlib import contextmanager
 
 from click.testing import CliRunner
@@ -21,11 +22,9 @@ from flask.json import dumps as json_dumps
 from werkzeug.urls import url_parse
 
 
-def make_test_environ_builder(
-    app, path="/", base_url=None, subdomain=None, url_scheme=None, *args, **kwargs
-):
-    """Create a :class:`~werkzeug.test.EnvironBuilder`, taking some
-    defaults from the application.
+class EnvironBuilder(werkzeug.test.EnvironBuilder):
+    """An :class:`~werkzeug.test.EnvironBuilder`, that takes defaults from the
+    application.
 
     :param app: The Flask application to configure the environment from.
     :param path: URL path being requested.
@@ -45,41 +44,72 @@ def make_test_environ_builder(
         :class:`~werkzeug.test.EnvironBuilder`.
     """
 
-    assert not (base_url or subdomain or url_scheme) or (base_url is not None) != bool(
-        subdomain or url_scheme
-    ), 'Cannot pass "subdomain" or "url_scheme" with "base_url".'
+    def __init__(
+        self,
+        app,
+        path="/",
+        base_url=None,
+        subdomain=None,
+        url_scheme=None,
+        *args,
+        **kwargs
+    ):
+        assert not (base_url or subdomain or url_scheme) or (
+            base_url is not None
+        ) != bool(
+            subdomain or url_scheme
+        ), 'Cannot pass "subdomain" or "url_scheme" with "base_url".'
+
+        if base_url is None:
+            http_host = app.config.get("SERVER_NAME") or "localhost"
+            app_root = app.config["APPLICATION_ROOT"]
+
+            if subdomain:
+                http_host = "{0}.{1}".format(subdomain, http_host)
+
+            if url_scheme is None:
+                url_scheme = app.config["PREFERRED_URL_SCHEME"]
+
+            url = url_parse(path)
+            base_url = "{scheme}://{netloc}/{path}".format(
+                scheme=url.scheme or url_scheme,
+                netloc=url.netloc or http_host,
+                path=app_root.lstrip("/"),
+            )
+            path = url.path
 
-    if base_url is None:
-        http_host = app.config.get("SERVER_NAME") or "localhost"
-        app_root = app.config["APPLICATION_ROOT"]
+            if url.query:
+                sep = b"?" if isinstance(url.query, bytes) else "?"
+                path += sep + url.query
 
-        if subdomain:
-            http_host = "{0}.{1}".format(subdomain, http_host)
+        if "json" in kwargs:
+            assert "data" not in kwargs, "Client cannot provide both 'json' and 'data'."
+            kwargs["data"] = self.json_dumps(kwargs.pop("json"), app=app)
 
-        if url_scheme is None:
-            url_scheme = app.config["PREFERRED_URL_SCHEME"]
+            if "content_type" not in kwargs:
+                kwargs["content_type"] = "application/json"
 
-        url = url_parse(path)
-        base_url = "{scheme}://{netloc}/{path}".format(
-            scheme=url.scheme or url_scheme,
-            netloc=url.netloc or http_host,
-            path=app_root.lstrip("/"),
-        )
-        path = url.path
+        super(EnvironBuilder, self).__init__(path, base_url, *args, **kwargs)
+        self.app = app
 
-        if url.query:
-            sep = b"?" if isinstance(url.query, bytes) else "?"
-            path += sep + url.query
+    json_dumps = staticmethod(json_dumps)
 
-    # TODO use EnvironBuilder.json_dumps once we require Werkzeug 0.15
-    if "json" in kwargs:
-        assert "data" not in kwargs, "Client cannot provide both 'json' and 'data'."
-        kwargs["data"] = json_dumps(kwargs.pop("json"), app=app)
 
-        if "content_type" not in kwargs:
-            kwargs["content_type"] = "application/json"
+def make_test_environ_builder(*args, **kwargs):
+    """Create a :class:`flask.testing.EnvironBuilder`.
 
-    return EnvironBuilder(path, base_url, *args, **kwargs)
+    .. deprecated: 1.1
+        Will be removed in 1.2. Construct ``flask.testing.EnvironBuilder``
+        directly instead.
+    """
+    warnings.warn(
+        DeprecationWarning(
+            '"make_test_environ_builder()" is deprecated and will be removed '
+            'in 1.2. Construct "flask.testing.EnvironBuilder" directly '
+            "instead."
+        )
+    )
+    return EnvironBuilder(*args, **kwargs)
 
 
 class FlaskClient(Client):
@@ -167,11 +197,11 @@ class FlaskClient(Client):
         if (
             not kwargs
             and len(args) == 1
-            and isinstance(args[0], (EnvironBuilder, dict))
+            and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict))
         ):
             environ = self.environ_base.copy()
 
-            if isinstance(args[0], EnvironBuilder):
+            if isinstance(args[0], werkzeug.test.EnvironBuilder):
                 environ.update(args[0].get_environ())
             else:
                 environ.update(args[0])
@@ -182,7 +212,7 @@ class FlaskClient(Client):
                 "flask._preserve_context"
             ] = self.preserve_context
             kwargs.setdefault("environ_base", self.environ_base)
-            builder = make_test_environ_builder(self.application, *args, **kwargs)
+            builder = EnvironBuilder(self.application, *args, **kwargs)
 
             try:
                 environ = builder.get_environ()
diff --git a/tests/test_reqctx.py b/tests/test_reqctx.py
index 7ac5c370..1947f592 100644
--- a/tests/test_reqctx.py
+++ b/tests/test_reqctx.py
@@ -243,9 +243,9 @@ def test_bad_environ_raises_bad_request():
     # because werkzeug enforces latin1 on Python 2.
     # However it works when actually passed to the server.
 
-    from flask.testing import make_test_environ_builder
+    from flask.testing import EnvironBuilder
 
-    builder = make_test_environ_builder(app)
+    builder = EnvironBuilder(app)
     environ = builder.get_environ()
 
     # use a non-printable character in the Host - this is key to this test
@@ -267,9 +267,9 @@ def test_environ_for_valid_idna_completes():
     # because werkzeug enforces latin1 on Python 2.
     # However it works when actually passed to the server.
 
-    from flask.testing import make_test_environ_builder
+    from flask.testing import EnvironBuilder
 
-    builder = make_test_environ_builder(app)
+    builder = EnvironBuilder(app)
     environ = builder.get_environ()
 
     # these characters are all IDNA-compatible
diff --git a/tests/test_testing.py b/tests/test_testing.py
index ae0f54d9..5ea72b3f 100644
--- a/tests/test_testing.py
+++ b/tests/test_testing.py
@@ -18,7 +18,7 @@ from flask import appcontext_popped
 from flask._compat import text_type
 from flask.cli import ScriptInfo
 from flask.json import jsonify
-from flask.testing import make_test_environ_builder, FlaskCliRunner
+from flask.testing import make_test_environ_builder, FlaskCliRunner, EnvironBuilder
 
 try:
     import blinker
@@ -88,7 +88,7 @@ def test_client_open_environ(app, client, request):
     def index():
         return flask.request.remote_addr
 
-    builder = make_test_environ_builder(app, path="/index", method="GET")
+    builder = EnvironBuilder(app, path="/index", method="GET")
     request.addfinalizer(builder.close)
 
     rv = client.open(builder)
@@ -113,13 +113,34 @@ def test_specify_url_scheme(app, client):
 
 
 def test_path_is_url(app):
-    eb = make_test_environ_builder(app, "https://example.com/")
+    eb = EnvironBuilder(app, "https://example.com/")
     assert eb.url_scheme == "https"
     assert eb.host == "example.com"
     assert eb.script_root == ""
     assert eb.path == "/"
 
 
+def test_make_test_environ_builder(app):
+    with pytest.deprecated_call():
+        eb = make_test_environ_builder(app, "https://example.com/")
+    assert eb.url_scheme == "https"
+    assert eb.host == "example.com"
+    assert eb.script_root == ""
+    assert eb.path == "/"
+
+
+def test_environbuilder_json_dumps(app):
+    """EnvironBuilder.json_dumps() takes settings from the app."""
+    app.config["JSON_AS_ASCII"] = False
+    eb = EnvironBuilder(app, json=u"\u20ac")
+    assert eb.input_stream.read().decode("utf8") == u'"\u20ac"'
+
+
+def test_environbuilder_json_dumps_static():
+    """EnvironBuilder.json_dumps() can be called as a static method."""
+    assert EnvironBuilder.json_dumps(u"\u20ac") == u'"\\u20ac"'
+
+
 def test_blueprint_with_subdomain():
     app = flask.Flask(__name__, subdomain_matching=True)
     app.config["SERVER_NAME"] = "example.com:1234"

--------------------------------------------------------------------------------
Git show output for commit 1250775a5575d40b00d1212bde1df55a9b71df04:
commit 1250775a5575d40b00d1212bde1df55a9b71df04
Merge: 240e398c 96b92ff9
Author: David Lord <davidism@gmail.com>
Date:   Fri May 31 08:21:24 2019 -0400

    Merge pull request #3230 from lordmauve/azure-stylecheck
    
    Enable stylecheck tox run on Azure pipelines (fixes #3228)


--------------------------------------------------------------------------------
Git show output for commit 240e398c8d2b46607f6e5c87b6e39eab50ad7796:
commit 240e398c8d2b46607f6e5c87b6e39eab50ad7796
Merge: 2c68f863 a5ff3cd0
Author: David Lord <davidism@gmail.com>
Date:   Fri May 31 07:18:40 2019 -0400

    Merge pull request #3229 from lordmauve/style-fix
    
    Fix style issues on master using Black


--------------------------------------------------------------------------------
Git show output for commit 2c68f86336dc8729f58e8e19af0f49c269c1cfaa:
commit 2c68f86336dc8729f58e8e19af0f49c269c1cfaa
Merge: 754b7295 a71c1678
Author: David Lord <davidism@gmail.com>
Date:   Sat May 25 14:09:17 2019 -0700

    Merge pull request #3157 from fantix/fix-test-client-teardown
    
    Fix teardown bug in FlaskClient


--------------------------------------------------------------------------------
Git show output for commit a71c167836c9dd938199fc72292951359948149c:
commit a71c167836c9dd938199fc72292951359948149c
Author: Fantix King <fantix@uchicago.edu>
Date:   Tue Apr 16 17:29:17 2019 -0500

    fix teardown bug in FlaskClient
    
    * Fixes pytest-dev/pytest-flask#42

diff --git a/CHANGES.rst b/CHANGES.rst
index 1dbb9605..f7508afd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -61,6 +61,9 @@ Unreleased
 -   Blueprints have a ``cli`` Click group like ``app.cli``. CLI commands
     registered with a blueprint will be available as a group under the
     ``flask`` command. :issue:`1357`.
+-   When using the test client as a context manager (``with client:``),
+    all preserved request contexts are popped when the block exits,
+    ensuring nested contexts are cleaned up correctly. :pr:`3157`
 
 .. _#2935: https://github.com/pallets/flask/issues/2935
 .. _#2957: https://github.com/pallets/flask/issues/2957
diff --git a/flask/testing.py b/flask/testing.py
index 6c9de313..f2fbad6c 100644
--- a/flask/testing.py
+++ b/flask/testing.py
@@ -206,12 +206,17 @@ class FlaskClient(Client):
     def __exit__(self, exc_type, exc_value, tb):
         self.preserve_context = False
 
-        # on exit we want to clean up earlier.  Normally the request context
-        # stays preserved until the next request in the same thread comes
-        # in.  See RequestGlobals.push() for the general behavior.
-        top = _request_ctx_stack.top
-        if top is not None and top.preserved:
-            top.pop()
+        # Normally the request context is preserved until the next
+        # request in the same thread comes. When the client exits we
+        # want to clean up earlier. Pop request contexts until the stack
+        # is empty or a non-preserved one is found.
+        while True:
+            top = _request_ctx_stack.top
+
+            if top is not None and top.preserved:
+                top.pop()
+            else:
+                break
 
 
 class FlaskCliRunner(CliRunner):
diff --git a/tests/test_testing.py b/tests/test_testing.py
index a6b9d70e..ae0f54d9 100644
--- a/tests/test_testing.py
+++ b/tests/test_testing.py
@@ -411,3 +411,18 @@ def test_cli_custom_obj(app):
     runner = app.test_cli_runner()
     runner.invoke(hello_command, obj=script_info)
     assert NS.called
+
+
+def test_client_pop_all_preserved(app, req_ctx, client):
+    @app.route("/")
+    def index():
+        # stream_with_context pushes a third context, preserved by client
+        return flask.Response(flask.stream_with_context("hello"))
+
+    # req_ctx fixture pushed an initial context, not marked preserved
+    with client:
+        # request pushes a second request context, preserved by client
+        client.get("/")
+
+    # only req_ctx fixture should still be pushed
+    assert flask._request_ctx_stack.top is req_ctx

--------------------------------------------------------------------------------
Git show output for commit 754b72957854e0b955fe973d169daa27a2f98ef1:
commit 754b72957854e0b955fe973d169daa27a2f98ef1
Merge: b8376067 ed9ab2d3
Author: David Lord <davidism@gmail.com>
Date:   Sat May 25 11:23:00 2019 -0700

    Merge pull request #3124 from elbeardmorez/fix_static_url_path
    
    fix 'static_url_path' defaulting for empty paths


--------------------------------------------------------------------------------
Git show output for commit a12bf290da4e5ccc9cc7bd00a8e1ba8bccb50586:
commit a12bf290da4e5ccc9cc7bd00a8e1ba8bccb50586
Author: Pete Beardmore <pete.beardmore@msn.com>
Date:   Mon Mar 18 18:50:08 2019 +0000

    fix 'static_url_path' defaulting for empty paths
    
    -prefix a path delimiter iff there's a path to delimit
    -ensures a valid default static route rule is created on application
    intialisation for the case 'static_folder=""' and implicit
    'static_url_path'

diff --git a/flask/helpers.py b/flask/helpers.py
index 33e87b70..9825202a 100644
--- a/flask/helpers.py
+++ b/flask/helpers.py
@@ -970,7 +970,8 @@ class _PackageBoundObject(object):
             return self._static_url_path
 
         if self.static_folder is not None:
-            return "/" + os.path.basename(self.static_folder)
+            basename = os.path.basename(self.static_folder)
+            return "/" + basename if basename else ""
 
     def _set_static_url_path(self, value):
         self._static_url_path = value
diff --git a/tests/test_basic.py b/tests/test_basic.py
index 7a16ebd4..025b5a99 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -1427,6 +1427,20 @@ def test_static_url_path_with_ending_slash():
         assert flask.url_for("static", filename="index.html") == "/foo/index.html"
 
 
+def test_static_url_null_path(app):
+    app = flask.Flask(__name__, static_folder='', static_url_path='')
+    rv = app.test_client().open('/static/index.html', method='GET')
+    assert rv.status_code == 200
+    rv.close()
+
+
+def test_static_url_null_path_defaulting(app):
+    app = flask.Flask(__name__, static_folder='')
+    rv = app.test_client().open('/static/index.html', method='GET')
+    assert rv.status_code == 200
+    rv.close()
+
+
 def test_static_route_with_host_matching():
     app = flask.Flask(__name__, host_matching=True, static_host="example.com")
     c = app.test_client()

--------------------------------------------------------------------------------
Git show output for commit bcf8cb1fd4605046a76b956bfbfaab246d9f8d18:
commit bcf8cb1fd4605046a76b956bfbfaab246d9f8d18
Author: David Lord <davidism@gmail.com>
Date:   Thu May 16 12:45:03 2019 -0700

    azure config, fix docs build

diff --git a/.azure-pipelines.yml b/.azure-pipelines.yml
index f9e2d0c3..e9af4301 100644
--- a/.azure-pipelines.yml
+++ b/.azure-pipelines.yml
@@ -1,14 +1,14 @@
 trigger:
 - 'master'
-- '*-maintenance'
+- '*.x'
 
 jobs:
 - job: Flask
   variables:
     vmImage: ubuntu-latest
     python.version: '3.7'
-    TOXENV: 'py,codecov'
     python.architecture: 'x64'
+    TOXENV: 'py,codecov'
     publish.test.results: 'true'
 
   strategy:
@@ -33,10 +33,10 @@ jobs:
         python.version: '2.7'
         vmImage: 'windows-latest'
       DocsHtml:
-        TOXENV: docs-html
+        TOXENV: 'docs-html'
         publish.test.results: 'false'
       VersionRange:
-        TOXENV: devel,lowest,codecov
+        TOXENV: 'devel,lowest,codecov'
 
   pool:
     vmImage: $[ variables.vmImage ]
@@ -46,6 +46,7 @@ jobs:
     inputs:
       versionSpec: $(python.version)
       architecture: $(python.architecture)
+    displayName: 'Use Python $(python.version)'
 
   - script: pip install -U tox
     displayName: 'Install tox'
@@ -58,22 +59,24 @@ jobs:
       testResultsFiles: 'test-results.xml'
       testRunTitle: '$(Agent.JobName)'
     condition: eq(variables['publish.test.results'], 'true')
-  
+    displayName: 'Publish test results'
+
   # TODO: add codecov token
 
 # As a courtesy, try this on the dev version of Python
 # Use a container since Azure Pipelines may not have the bleeding-edge Python RC
 - job: FlaskOnLatest
-  pool: { vmImage: ubuntu-latest }
+  pool:
+    vmImage: ubuntu-latest
+  container: python:rc-stretch
   variables:
     TOXENV: 'future'
-  container: python:rc-stretch
   steps:
   - script: |
       echo "##vso[task.prependPath]$HOME/.local/bin"
       pip install -U --user tox
     displayName: 'Install tox'
-  
+
   # don't fail the build if this doesn't work!
   - script: tox
     displayName: 'Run tox'
diff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst
index bbed06fc..fd9734c8 100644
--- a/CONTRIBUTING.rst
+++ b/CONTRIBUTING.rst
@@ -10,8 +10,10 @@ Please, don't use the issue tracker for this. Use one of the following
 resources for questions about your own code:
 
 * The ``#get-help`` channel on our Discord chat: https://discord.gg/t6rrQZH
+
   * The IRC channel ``#pocoo`` on FreeNode is linked to Discord, but
     Discord is preferred.
+
 * The mailing list flask@python.org for long term discussion or larger issues.
 * Ask on `Stack Overflow`_. Search with Google first using:
   ``site:stackoverflow.com flask {search term, exception message, etc.}``
diff --git a/tox.ini b/tox.ini
index 2afa66d0..5110c152 100644
--- a/tox.ini
+++ b/tox.ini
@@ -35,16 +35,15 @@ commands =
     pip install -q -e examples/javascript[test]
 
     # pytest-cov doesn't seem to play nice with -p
-    coverage run -p -m pytest --junitxml=test-results.xml tests examples
+    coverage run -p -m pytest --tb=short --junitxml=test-results.xml {posargs:tests examples}
 
 [testenv:future]
+# courtesy Python nightly test, don't fail the build in CI
 ignore_outcome = true
-
 commands =
     pip install -q -e examples/tutorial[test]
     pip install -q -e examples/javascript[test]
-
-    coverage run -p -m pytest tests examples
+    coverage run -p -m pytest --tb=short --junitxml=test-results.xml {posargs:tests examples}
 
 [testenv:stylecheck]
 deps = pre-commit

--------------------------------------------------------------------------------
Git show output for commit e61fd5f6cb1c7ebba86a9eef9c5e645d9c4032d1:
commit e61fd5f6cb1c7ebba86a9eef9c5e645d9c4032d1
Author: David Lord <davidism@gmail.com>
Date:   Thu May 16 10:21:35 2019 -0700

    add instructions for bug and feature branches

diff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst
index 0fdc18b1..2f752e66 100644
--- a/CONTRIBUTING.rst
+++ b/CONTRIBUTING.rst
@@ -82,19 +82,18 @@ First time setup
 Start coding
 ~~~~~~~~~~~~
 
-- Create a branch to identify the issue you would like to work on::
+-   Create a branch to identify the issue you would like to work on. If
+    you're submitting a bug or documentation fix, branch off of the
+    latest ".x" branch::
 
-        git branch your-branch-name
+        git checkout -b your-branch-name origin/1.0.x
 
-- Then switch to make sure that we are working on that branch by using::
+    If you're submitting a feature addition or change, branch off of the
+    "master" branch::
 
-        git checkout your-branch-name
-
-- Using your favorite editor, make your changes, `committing as you go`_ by using the following::
-
-        git add -A
-        git commit
+        git checkout -b your-branch-name origin/master
 
+- Using your favorite editor, make your changes, `committing as you go`_.
 - Try to follow `PEP8`_, but you may ignore the line length limit if following
   it would make the code uglier.
 - Include tests that cover any code changes you make. Make sure the test fails

--------------------------------------------------------------------------------
Git show output for commit bbedd6454094bc26edbcc95bab1ed3d05b4085ea:
commit bbedd6454094bc26edbcc95bab1ed3d05b4085ea
Merge: eadb99eb e5b0fe68
Author: David Lord <davidism@gmail.com>
Date:   Thu May 16 09:52:13 2019 -0700

    Merge pull request #3129 from adamchainz/fix_html_injection
    
    Fix some HTML injection paths in examples


--------------------------------------------------------------------------------
Git show output for commit 5e41e409bca42a8fef7b4460adfc76bf432824da:
commit 5e41e409bca42a8fef7b4460adfc76bf432824da
Author: David Lord <davidism@gmail.com>
Date:   Thu May 16 09:47:56 2019 -0700

    fix discord link, clean up

diff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst
index 387d8dae..44bb53d5 100644
--- a/CONTRIBUTING.rst
+++ b/CONTRIBUTING.rst
@@ -9,9 +9,9 @@ Support questions
 Please, don't use the issue tracker for this. Use one of the following
 resources for questions about your own code:
 
-* The IRC channel ``#pocoo`` on FreeNode.
-* The IRC channel ``#python`` on FreeNode for more general questions.
-* Our Discord server is here: `https://discordapp.com/invite/3TDRQsx`_
+* The ``#get-help`` channel on our Discord chat: https://discord.gg/t6rrQZH
+  * The IRC channel ``#pocoo`` on FreeNode is linked to Discord, but
+    Discord is preferred.
 * The mailing list flask@python.org for long term discussion or larger issues.
 * Ask on `Stack Overflow`_. Search with Google first using:
   ``site:stackoverflow.com flask {search term, exception message, etc.}``
@@ -40,7 +40,6 @@ Submitting patches
   without your patch.
 - Try to follow `PEP8`_, but you may ignore the line length limit if following
   it would make the code uglier.
-- We don't accept style-related patches.
 
 First time setup
 ~~~~~~~~~~~~~~~~

--------------------------------------------------------------------------------
Git show output for commit b765e0db509eadd6d35093dafbc3b9814ba109d4:
commit b765e0db509eadd6d35093dafbc3b9814ba109d4
Merge: c88e4634 205c943d
Author: David Lord <davidism@gmail.com>
Date:   Thu May 16 08:28:58 2019 -0700

    Merge pull request #3196 from jakseb/fix-docs-paren
    
    Fix misplaced paren in docs


--------------------------------------------------------------------------------
Git show output for commit 819368a52dc9eb0ba4e20195783f2807872dabad:
commit 819368a52dc9eb0ba4e20195783f2807872dabad
Merge: 5e378b4f 6606a4a2
Author: David Baumgold <david@davidbaumgold.com>
Date:   Mon May 6 15:23:35 2019 -0400

    Merge pull request #3175 from singingwolfboy/fix-rst-line-too-long
    
    fix RST line too long


--------------------------------------------------------------------------------
Git show output for commit 6606a4a2386a9635b8ad25b4ae6329be783e00b3:
commit 6606a4a2386a9635b8ad25b4ae6329be783e00b3
Author: David Baumgold <david@davidbaumgold.com>
Date:   Mon May 6 10:54:57 2019 -0400

    fix RST line too long

diff --git a/docs/advanced_foreword.rst b/docs/advanced_foreword.rst
index bd56f53c..4ac81905 100644
--- a/docs/advanced_foreword.rst
+++ b/docs/advanced_foreword.rst
@@ -8,10 +8,11 @@ Thread-Locals in Flask
 
 One of the design decisions in Flask was that simple tasks should be simple;
 they should not take a lot of code and yet they should not limit you. Because
-of that, Flask has a few design choices that some people might find surprising or
-unorthodox. For example, Flask uses thread-local objects internally so that you
-don’t have to pass objects around from function to function within a request in
-order to stay threadsafe. This approach is convenient, but requires a valid
+of that, Flask has a few design choices that some people might find
+surprising or unorthodox. For example, Flask uses thread-local objects
+internally so that you don’t have to pass objects around from
+function to function within a request in order to stay threadsafe.
+This approach is convenient, but requires a valid
 request context for dependency injection or when attempting to reuse code which
 uses a value pegged to the request.  The Flask project is honest about
 thread-locals, does not hide them, and calls out in the code and documentation
diff --git a/docs/becomingbig.rst b/docs/becomingbig.rst
index 0facbfee..58e1778d 100644
--- a/docs/becomingbig.rst
+++ b/docs/becomingbig.rst
@@ -35,7 +35,8 @@ Subclass.
 The :class:`~flask.Flask` class has many methods designed for subclassing. You
 can quickly add or customize behavior by subclassing :class:`~flask.Flask` (see
 the linked method docs) and using that subclass wherever you instantiate an
-application class. This works well with :ref:`app-factories`. See :doc:`/patterns/subclassing` for an example.
+application class. This works well with :ref:`app-factories`.
+See :doc:`/patterns/subclassing` for an example.
 
 Wrap with middleware.
 ---------------------
diff --git a/docs/blueprints.rst b/docs/blueprints.rst
index 2b8e8d91..fb639966 100644
--- a/docs/blueprints.rst
+++ b/docs/blueprints.rst
@@ -258,13 +258,14 @@ Here is an example for a "404 Page Not Found" exception::
 
 Most errorhandlers will simply work as expected; however, there is a caveat
 concerning handlers for 404 and 405 exceptions.  These errorhandlers are only
-invoked from an appropriate ``raise`` statement or a call to ``abort`` in another
-of the blueprint's view functions; they are not invoked by, e.g., an invalid URL
-access.  This is because the blueprint does not "own" a certain URL space, so
-the application instance has no way of knowing which blueprint errorhandler it
-should run if given an invalid URL.  If you would like to execute different
-handling strategies for these errors based on URL prefixes, they may be defined
-at the application level using the ``request`` proxy object::
+invoked from an appropriate ``raise`` statement or a call to ``abort``
+in another of the blueprint's view functions; they are not invoked by,
+e.g., an invalid URL access.  This is because the blueprint does not
+"own" a certain URL space, so the application instance has no way of
+knowing which blueprint errorhandler it should run if given an invalid URL.
+If you would like to execute different handling strategies for these errors
+based on URL prefixes, they may be defined at the application level using
+the ``request`` proxy object::
 
     @app.errorhandler(404)
     @app.errorhandler(405)
diff --git a/docs/cli.rst b/docs/cli.rst
index 78f8e3d5..efe94e98 100644
--- a/docs/cli.rst
+++ b/docs/cli.rst
@@ -193,7 +193,7 @@ environment variables. The variables use the pattern
 ``FLASK_COMMAND_OPTION``. For example, to set the port for the run
 command, instead of ``flask run --port 8000``:
 
-.. code-block:: none
+.. code-block:: bash
 
     $ export FLASK_RUN_PORT=8000
     $ flask run
@@ -209,7 +209,7 @@ Disable dotenv
 The ``flask`` command will show a message if it detects dotenv files but
 python-dotenv is not installed.
 
-.. code-block:: none
+.. code-block:: bash
 
     $ flask run
      * Tip: There are .env files present. Do "pip install python-dotenv" to use them.
@@ -221,7 +221,7 @@ a project runner that loads them already. Keep in mind that the
 environment variables must be set before the app loads or it won't
 configure as expected.
 
-.. code-block:: none
+.. code-block:: bash
 
     $ export FLASK_SKIP_DOTENV=1
     $ flask run
diff --git a/docs/deploying/cgi.rst b/docs/deploying/cgi.rst
index 503d9426..e6c768b4 100644
--- a/docs/deploying/cgi.rst
+++ b/docs/deploying/cgi.rst
@@ -46,9 +46,9 @@ In Apache for example you can put something like this into the config:
     ScriptAlias /app /path/to/the/application.cgi
 
 On shared webhosting, though, you might not have access to your Apache config.
-In this case, a file called ``.htaccess``, sitting in the public directory you want
-your app to be available, works too but the ``ScriptAlias`` directive won't
-work in that case:
+In this case, a file called ``.htaccess``, sitting in the public directory
+you want your app to be available, works too but the ``ScriptAlias`` directive
+won't work in that case:
 
 .. sourcecode:: apache
 
diff --git a/docs/deploying/fastcgi.rst b/docs/deploying/fastcgi.rst
index 65b35cab..33704062 100644
--- a/docs/deploying/fastcgi.rst
+++ b/docs/deploying/fastcgi.rst
@@ -4,10 +4,10 @@ FastCGI
 =======
 
 FastCGI is a deployment option on servers like `nginx`_, `lighttpd`_, and
-`cherokee`_; see :doc:`uwsgi` and :doc:`wsgi-standalone` for other options. To
-use your WSGI application with any of them you will need a FastCGI server first.
-The most popular one is `flup`_ which we will use for this guide. Make sure to
-have it installed to follow along.
+`cherokee`_; see :doc:`uwsgi` and :doc:`wsgi-standalone` for other options.
+To use your WSGI application with any of them you will need a FastCGI
+server first. The most popular one is `flup`_ which we will use for
+this guide. Make sure to have it installed to follow along.
 
 .. admonition:: Watch Out
 
diff --git a/docs/deploying/mod_wsgi.rst b/docs/deploying/mod_wsgi.rst
index 203e0d36..76d986b7 100644
--- a/docs/deploying/mod_wsgi.rst
+++ b/docs/deploying/mod_wsgi.rst
@@ -52,10 +52,10 @@ reload you can safely ignore them.  Just restart the server.
 Creating a `.wsgi` file
 -----------------------
 
-To run your application you need a :file:`yourapplication.wsgi` file.  This file
-contains the code `mod_wsgi` is executing on startup to get the application
-object.  The object called `application` in that file is then used as
-application.
+To run your application you need a :file:`yourapplication.wsgi` file.
+This file contains the code `mod_wsgi` is executing on startup
+to get the application object.  The object called `application`
+in that file is then used as application.
 
 For most applications the following file should be sufficient::
 
@@ -108,16 +108,17 @@ refuse to run with the above configuration. On a Windows system, eliminate those
 
 .. sourcecode:: apache
 
-	<VirtualHost *>
-		ServerName example.com
-		WSGIScriptAlias / C:\yourdir\yourapp.wsgi
-		<Directory C:\yourdir>
-			Order deny,allow
-			Allow from all
-		</Directory>
-	</VirtualHost>
+    <VirtualHost *>
+        ServerName example.com
+        WSGIScriptAlias / C:\yourdir\yourapp.wsgi
+        <Directory C:\yourdir>
+            Order deny,allow
+            Allow from all
+        </Directory>
+    </VirtualHost>
 
-Note: There have been some changes in access control configuration for `Apache 2.4`_.
+Note: There have been some changes in access control configuration
+for `Apache 2.4`_.
 
 .. _Apache 2.4: https://httpd.apache.org/docs/trunk/upgrading.html
 
diff --git a/docs/deploying/uwsgi.rst b/docs/deploying/uwsgi.rst
index d3c38642..dd0f315d 100644
--- a/docs/deploying/uwsgi.rst
+++ b/docs/deploying/uwsgi.rst
@@ -31,10 +31,11 @@ Given a flask application in myapp.py, use the following command:
 
     $ uwsgi -s /tmp/yourapplication.sock --manage-script-name --mount /yourapplication=myapp:app
 
-The ``--manage-script-name`` will move the handling of ``SCRIPT_NAME`` to uwsgi,
-since it is smarter about that. It is used together with the ``--mount``
-directive which will make requests to ``/yourapplication`` be directed to
-``myapp:app``. If your application is accessible at root level, you can use a
+The ``--manage-script-name`` will move the handling of ``SCRIPT_NAME``
+to uwsgi, since it is smarter about that.
+It is used together with the ``--mount`` directive which will make
+requests to ``/yourapplication`` be directed to ``myapp:app``.
+If your application is accessible at root level, you can use a
 single ``/`` instead of ``/yourapplication``. ``myapp`` refers to the name of
 the file of your flask application (without extension) or the module which
 provides ``app``. ``app`` is the callable inside of your application (usually
diff --git a/docs/errorhandling.rst b/docs/errorhandling.rst
index 557f07ed..92a88a07 100644
--- a/docs/errorhandling.rst
+++ b/docs/errorhandling.rst
@@ -50,14 +50,15 @@ And then add this to your Flask app::
 
     import sentry_sdk
     from sentry_sdk.integrations.flask import FlaskIntegration
-    
+
     sentry_sdk.init('YOUR_DSN_HERE',integrations=[FlaskIntegration()])
 
 The `YOUR_DSN_HERE` value needs to be replaced with the DSN value you get
 from your Sentry installation.
 
-After installation, failures leading to an Internal Server Error are automatically reported to 
-Sentry and from there you can receive error notifications.
+After installation, failures leading to an Internal Server Error
+are automatically reported to Sentry and from there you can
+receive error notifications.
 
 Follow-up reads:
 
@@ -126,8 +127,9 @@ registered, :class:`~werkzeug.exceptions.HTTPException` subclasses show a
 generic message about their code, while other exceptions are converted to a
 generic 500 Internal Server Error.
 
-For example, if an instance of :exc:`ConnectionRefusedError` is raised, and a handler
-is registered for :exc:`ConnectionError` and :exc:`ConnectionRefusedError`,
+For example, if an instance of :exc:`ConnectionRefusedError` is raised,
+and a handler is registered for :exc:`ConnectionError` and
+:exc:`ConnectionRefusedError`,
 the more specific :exc:`ConnectionRefusedError` handler is called with the
 exception instance to generate the response.
 
@@ -183,7 +185,8 @@ options in order to use your favorite debugger:
 
 * ``debug``        - whether to enable debug mode and catch exceptions
 * ``use_debugger`` - whether to use the internal Flask debugger
-* ``use_reloader`` - whether to reload and fork the process if modules were changed
+* ``use_reloader`` - whether to reload and fork the process if modules
+  were changed
 
 ``debug`` must be True (i.e., exceptions must be caught) in order for the other
 two options to have any value.
@@ -198,7 +201,8 @@ config.yaml (change the block as appropriate for your application, of course)::
        DEBUG: True
        DEBUG_WITH_APTANA: True
 
-Then in your application's entry-point (main.py), you could have something like::
+Then in your application's entry-point (main.py),
+you could have something like::
 
    if __name__ == "__main__":
        # To allow aptana to receive errors, set use_debugger=False
diff --git a/docs/extensiondev.rst b/docs/extensiondev.rst
index aa4eff76..fc65a350 100644
--- a/docs/extensiondev.rst
+++ b/docs/extensiondev.rst
@@ -197,8 +197,8 @@ So here's what these lines of code do:
     instantiated without requiring an app object.  This method supports the
     factory pattern for creating applications.  The ``init_app`` will set the
     configuration for the database, defaulting to an in memory database if
-    no configuration is supplied.  In addition, the ``init_app`` method attaches
-    the ``teardown`` handler.
+    no configuration is supplied.  In addition, the ``init_app`` method
+    attaches the ``teardown`` handler.
 3.  Next, we define a ``connect`` method that opens a database connection.
 4.  Finally, we add a ``connection`` property that on first access opens
     the database connection and stores it on the context.  This is also
@@ -312,8 +312,8 @@ extension to be approved you have to follow these guidelines:
     or ``python setup.py test``.  For test suites invoked with ``make
     test`` the extension has to ensure that all dependencies for the test
     are installed automatically.  If tests are invoked with ``python setup.py
-    test``, test dependencies can be specified in the :file:`setup.py` file.  The
-    test suite also has to be part of the distribution.
+    test``, test dependencies can be specified in the :file:`setup.py` file.
+    The test suite also has to be part of the distribution.
 3.  APIs of approved extensions will be checked for the following
     characteristics:
 
diff --git a/docs/foreword.rst b/docs/foreword.rst
index 4142cb83..f0dfaee2 100644
--- a/docs/foreword.rst
+++ b/docs/foreword.rst
@@ -28,10 +28,11 @@ Configuration and Conventions
 -----------------------------
 
 Flask has many configuration values, with sensible defaults, and a few
-conventions when getting started.  By convention, templates and static files are
-stored in subdirectories within the application's Python source tree, with the
-names :file:`templates` and :file:`static` respectively. While this can be changed, you
-usually don't have to, especially when getting started.
+conventions when getting started.  By convention, templates and static
+files are stored in subdirectories within the application's Python
+source tree, with the names :file:`templates` and :file:`static`
+respectively. While this can be changed, you usually don't have to,
+especially when getting started.
 
 Growing with Flask
 ------------------
diff --git a/docs/htmlfaq.rst b/docs/htmlfaq.rst
index 500a35ce..37075381 100644
--- a/docs/htmlfaq.rst
+++ b/docs/htmlfaq.rst
@@ -16,8 +16,8 @@ However, barely any websites on the Internet are actual XHTML (which is
 HTML processed using XML rules).  There are a couple of major reasons
 why this is the case.  One of them is Internet Explorer's lack of proper
 XHTML support. The XHTML spec states that XHTML must be served with the MIME
-type :mimetype:`application/xhtml+xml`, but Internet Explorer refuses to read files
-with that MIME type.
+type :mimetype:`application/xhtml+xml`, but Internet Explorer refuses
+to read files with that MIME type.
 While it is relatively easy to configure Web servers to serve XHTML properly,
 few people do.  This is likely because properly using XHTML can be quite
 painful.
diff --git a/docs/quickstart.rst b/docs/quickstart.rst
index ee2f8ef2..acf6dc15 100644
--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -93,9 +93,9 @@ should see your hello world greeting.
 What to do if the Server does not Start
 ---------------------------------------
 
-In case the :command:`python -m flask` fails or :command:`flask` does not exist,
-there are multiple reasons this might be the case.  First of all you need
-to look at the error message.
+In case the :command:`python -m flask` fails or :command:`flask`
+does not exist, there are multiple reasons this might be the case.
+First of all you need to look at the error message.
 
 Old Version of Flask
 ````````````````````
@@ -560,9 +560,9 @@ filesystem.  You can access those files by looking at the
 :attr:`~flask.request.files` attribute on the request object.  Each
 uploaded file is stored in that dictionary.  It behaves just like a
 standard Python :class:`file` object, but it also has a
-:meth:`~werkzeug.datastructures.FileStorage.save` method that allows you to store that
-file on the filesystem of the server.  Here is a simple example showing how
-that works::
+:meth:`~werkzeug.datastructures.FileStorage.save` method that
+allows you to store that file on the filesystem of the server.
+Here is a simple example showing how that works::
 
     from flask import request
 
@@ -575,10 +575,11 @@ that works::
 
 If you want to know how the file was named on the client before it was
 uploaded to your application, you can access the
-:attr:`~werkzeug.datastructures.FileStorage.filename` attribute.  However please keep in
-mind that this value can be forged so never ever trust that value.  If you
-want to use the filename of the client to store the file on the server,
-pass it through the :func:`~werkzeug.utils.secure_filename` function that
+:attr:`~werkzeug.datastructures.FileStorage.filename` attribute.
+However please keep in mind that this value can be forged
+so never ever trust that value.  If you want to use the filename
+of the client to store the file on the server, pass it through the
+:func:`~werkzeug.utils.secure_filename` function that
 Werkzeug provides for you::
 
     from flask import request
@@ -681,8 +682,9 @@ About Responses
 The return value from a view function is automatically converted into a
 response object for you.  If the return value is a string it's converted
 into a response object with the string as response body, a ``200 OK``
-status code and a :mimetype:`text/html` mimetype.  The logic that Flask applies to
-converting return values into response objects is as follows:
+status code and a :mimetype:`text/html` mimetype.
+The logic that Flask applies to converting return values into
+response objects is as follows:
 
 1.  If a response object of the correct type is returned it's directly
     returned from the view.
@@ -806,12 +808,12 @@ Logging
 .. versionadded:: 0.3
 
 Sometimes you might be in a situation where you deal with data that
-should be correct, but actually is not.  For example you may have some client-side
-code that sends an HTTP request to the server but it's obviously
-malformed.  This might be caused by a user tampering with the data, or the
-client code failing.  Most of the time it's okay to reply with ``400 Bad
-Request`` in that situation, but sometimes that won't do and the code has
-to continue working.
+should be correct, but actually is not.  For example you may have
+some client-side code that sends an HTTP request to the server
+but it's obviously malformed.  This might be caused by a user tampering
+with the data, or the client code failing.  Most of the time it's okay
+to reply with ``400 Bad Request`` in that situation, but sometimes
+that won't do and the code has to continue working.
 
 You may still want to log that something fishy happened.  This is where
 loggers come in handy.  As of Flask 0.3 a logger is preconfigured for you
diff --git a/docs/testing.rst b/docs/testing.rst
index 23ce2105..a18aca6c 100644
--- a/docs/testing.rst
+++ b/docs/testing.rst
@@ -73,9 +73,9 @@ this does is disable error catching during request handling, so that
 you get better error reports when performing test requests against the
 application.
 
-Because SQLite3 is filesystem-based, we can easily use the :mod:`tempfile` module
-to create a temporary database and initialize it.  The
-:func:`~tempfile.mkstemp` function does two things for us: it returns a
+Because SQLite3 is filesystem-based, we can easily use the
+:mod:`tempfile` module to create a temporary database and initialize it.
+The :func:`~tempfile.mkstemp` function does two things for us: it returns a
 low-level file handle and a random file name, the latter we use as
 database name.  We just have to keep the `db_fd` around so that we can use
 the :func:`os.close` function to close the file.
@@ -93,9 +93,9 @@ If we now run the test suite, we should see the following output::
 
     =========== no tests ran in 0.07 seconds ============
 
-Even though it did not run any actual tests, we already know that our ``flaskr``
-application is syntactically valid, otherwise the import would have died
-with an exception.
+Even though it did not run any actual tests, we already know that our
+``flaskr`` application is syntactically valid, otherwise the import
+would have died with an exception.
 
 .. _pytest fixture:
    https://docs.pytest.org/en/latest/fixture.html
@@ -117,11 +117,13 @@ test function to :file:`test_flaskr.py`, like this::
 Notice that our test functions begin with the word `test`; this allows
 `pytest`_ to automatically identify the function as a test to run.
 
-By using ``client.get`` we can send an HTTP ``GET`` request to the application with
-the given path.  The return value will be a :class:`~flask.Flask.response_class` object.
-We can now use the :attr:`~werkzeug.wrappers.BaseResponse.data` attribute to inspect
-the return value (as string) from the application.  In this case, we ensure that
-``'No entries here so far'`` is part of the output.
+By using ``client.get`` we can send an HTTP ``GET`` request to the
+application with the given path.  The return value will be a
+:class:`~flask.Flask.response_class` object. We can now use the
+:attr:`~werkzeug.wrappers.BaseResponse.data` attribute to inspect
+the return value (as string) from the application.
+In this case, we ensure that ``'No entries here so far'``
+is part of the output.
 
 Run it again and you should see one passing test::
 
@@ -333,7 +335,8 @@ happen.  With Flask 0.4 this is possible by using the
 
 If you were to use just the :meth:`~flask.Flask.test_client` without
 the ``with`` block, the ``assert`` would fail with an error because `request`
-is no longer available (because you are trying to use it outside of the actual request).
+is no longer available (because you are trying to use it
+outside of the actual request).
 
 
 Accessing and Modifying Sessions
diff --git a/docs/upgrading.rst b/docs/upgrading.rst
index 612e3634..805bf4ed 100644
--- a/docs/upgrading.rst
+++ b/docs/upgrading.rst
@@ -68,9 +68,9 @@ to the release we decided to push out a 0.11 release first with some
 changes removed to make the transition easier.  If you have been tracking
 the master branch which was 1.0 you might see some unexpected changes.
 
-In case you did track the master branch you will notice that :command:`flask --app`
-is removed now.  You need to use the environment variable to specify an
-application.
+In case you did track the master branch you will notice that
+:command:`flask --app` is removed now.
+You need to use the environment variable to specify an application.
 
 Debugging
 `````````

--------------------------------------------------------------------------------
Git show output for commit de01dfb70206f8dbb55724b7abfc515ead3ca283:
commit de01dfb70206f8dbb55724b7abfc515ead3ca283
Author: Max <maxim.suraev@here.com>
Date:   Mon Apr 15 17:01:44 2019 +0200

    Bump Jinja2 requirements
    
    The 2.10.1 version was released 2019-04-06 and contains important security fix.
    This change allows flask users to avoid implicit insecure dependency.

diff --git a/setup.py b/setup.py
index 851a14e0..0bc1c90b 100755
--- a/setup.py
+++ b/setup.py
@@ -35,7 +35,7 @@ setup(
     python_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*',
     install_requires=[
         'Werkzeug>=0.14',
-        'Jinja2>=2.10',
+        'Jinja2>=2.10.1',
         'itsdangerous>=0.24',
         'click>=5.1',
     ],

--------------------------------------------------------------------------------
Git show output for commit 42b67a1f95b9055735d28d51c07a70c7523a4f24:
commit 42b67a1f95b9055735d28d51c07a70c7523a4f24
Merge: 5cb4b731 4df7b220
Author: David Lord <davidism@gmail.com>
Date:   Thu Apr 11 19:11:21 2019 -0700

    Merge pull request #3150 from greyli/fix-route-defaults-doc
    
    [Doc] Fix typo in code example for route defaults


--------------------------------------------------------------------------------
Git show output for commit 8c979698bd9942a525dbb0e1ef4a31269a0b04cb:
commit 8c979698bd9942a525dbb0e1ef4a31269a0b04cb
Author: venus <venus@venusworld.cn>
Date:   Sat Jan 12 14:51:04 2019 +0800

    fix the typo

diff --git a/docs/extensiondev.rst b/docs/extensiondev.rst
index f48fb46b..aa4eff76 100644
--- a/docs/extensiondev.rst
+++ b/docs/extensiondev.rst
@@ -240,7 +240,7 @@ automatically.
 Additionally, the ``init_app`` method is used to support the factory pattern
 for creating apps::
 
-    db = Sqlite3()
+    db = SQLite3()
     # Then later on.
     app = create_app('the-config.cfg')
     db.init_app(app)

--------------------------------------------------------------------------------
Git show output for commit 33c89aab14e74b15c9a9caa7684c06fa96122de2:
commit 33c89aab14e74b15c9a9caa7684c06fa96122de2
Merge: a74864ec 99ad1f3c
Author: Hsiaoming Yang <me@lepture.com>
Date:   Sat Jan 12 19:11:44 2019 +0900

    Merge pull request #3071 from bbbbx/master
    
    fix the typo


--------------------------------------------------------------------------------
Git show output for commit 99ad1f3cae66aabb654e38c2c8bfd5889e4020a5:
commit 99ad1f3cae66aabb654e38c2c8bfd5889e4020a5
Author: venus <venus@venusworld.cn>
Date:   Sat Jan 12 14:51:04 2019 +0800

    fix the typo

diff --git a/docs/extensiondev.rst b/docs/extensiondev.rst
index f48fb46b..aa4eff76 100644
--- a/docs/extensiondev.rst
+++ b/docs/extensiondev.rst
@@ -240,7 +240,7 @@ automatically.
 Additionally, the ``init_app`` method is used to support the factory pattern
 for creating apps::
 
-    db = Sqlite3()
+    db = SQLite3()
     # Then later on.
     app = create_app('the-config.cfg')
     db.init_app(app)

--------------------------------------------------------------------------------
Git show output for commit 38a391815b4936e9357834bb4924e09fc4384e9a:
commit 38a391815b4936e9357834bb4924e09fc4384e9a
Merge: 232e5c81 40118e78
Author: David Lord <davidism@gmail.com>
Date:   Mon Jan 7 07:22:59 2019 -0800

    Merge pull request #2934 from garenchan/bugfix-#2933
    
    Fix issue #2933: Make sure the attachment filename is text type.


--------------------------------------------------------------------------------
Git show output for commit 232e5c81bc722c3ea87f15d0f95f8b52f064fc4c:
commit 232e5c81bc722c3ea87f15d0f95f8b52f064fc4c
Merge: 0f56c0cb a0ccc477
Author: David Lord <davidism@gmail.com>
Date:   Sun Jan 6 16:30:11 2019 -0800

    Merge pull request #2825 from eso31/fix-2824-issue
    
    Fixes issue #2824 flask --version


--------------------------------------------------------------------------------
Git show output for commit 1e616696c00c72f01958b761173c8f29f09acc60:
commit 1e616696c00c72f01958b761173c8f29f09acc60
Merge: 914a0335 5409606c
Author: David Lord <davidism@gmail.com>
Date:   Sun Jan 6 14:51:55 2019 -0800

    Merge pull request #2918 from garenchan/docs2
    
    Docs: fix some typos in config.rst


--------------------------------------------------------------------------------
